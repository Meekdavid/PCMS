2025-03-28 15:18:23.305 -07:00 [INF] Start installing Hangfire SQL objects...
2025-03-28 15:18:25.576 -07:00 [INF] Hangfire SQL objects installed.
2025-03-28 15:18:26.314 -07:00 [INF] User profile is available. Using 'C:\Users\HP\AppData\Local\ASP.NET\DataProtection-Keys' as key repository and Windows DPAPI to encrypt keys at rest.
2025-03-28 15:18:28.051 -07:00 [WRN] Sensitive data logging is enabled. Log entries and exception messages may include sensitive application data; this mode should only be enabled during development.
2025-03-28 15:18:28.226 -07:00 [WRN] No store type was specified for the decimal property 'CurrentBalance' on entity type 'Account'. This will cause values to be silently truncated if they do not fit in the default precision and scale. Explicitly specify the SQL server column type that can accommodate all the values in 'OnModelCreating' using 'HasColumnType', specify precision and scale using 'HasPrecision', or configure a value converter using 'HasConversion'.
2025-03-28 15:18:28.251 -07:00 [WRN] No store type was specified for the decimal property 'TotalContributions' on entity type 'Account'. This will cause values to be silently truncated if they do not fit in the default precision and scale. Explicitly specify the SQL server column type that can accommodate all the values in 'OnModelCreating' using 'HasColumnType', specify precision and scale using 'HasPrecision', or configure a value converter using 'HasConversion'.
2025-03-28 15:18:28.284 -07:00 [WRN] No store type was specified for the decimal property 'Amount' on entity type 'Contribution'. This will cause values to be silently truncated if they do not fit in the default precision and scale. Explicitly specify the SQL server column type that can accommodate all the values in 'OnModelCreating' using 'HasColumnType', specify precision and scale using 'HasPrecision', or configure a value converter using 'HasConversion'.
2025-03-28 15:18:28.300 -07:00 [WRN] No store type was specified for the decimal property 'ThresholdValue' on entity type 'EligibilityRule'. This will cause values to be silently truncated if they do not fit in the default precision and scale. Explicitly specify the SQL server column type that can accommodate all the values in 'OnModelCreating' using 'HasColumnType', specify precision and scale using 'HasPrecision', or configure a value converter using 'HasConversion'.
2025-03-28 15:18:28.309 -07:00 [WRN] No store type was specified for the decimal property 'PensionContributionRate' on entity type 'Employer'. This will cause values to be silently truncated if they do not fit in the default precision and scale. Explicitly specify the SQL server column type that can accommodate all the values in 'OnModelCreating' using 'HasColumnType', specify precision and scale using 'HasPrecision', or configure a value converter using 'HasConversion'.
2025-03-28 15:18:28.320 -07:00 [WRN] No store type was specified for the decimal property 'Amount' on entity type 'Transaction'. This will cause values to be silently truncated if they do not fit in the default precision and scale. Explicitly specify the SQL server column type that can accommodate all the values in 'OnModelCreating' using 'HasColumnType', specify precision and scale using 'HasPrecision', or configure a value converter using 'HasConversion'.
2025-03-28 15:18:29.544 -07:00 [WRN] No store type was specified for the decimal property 'CurrentBalance' on entity type 'Account'. This will cause values to be silently truncated if they do not fit in the default precision and scale. Explicitly specify the SQL server column type that can accommodate all the values in 'OnModelCreating' using 'HasColumnType', specify precision and scale using 'HasPrecision', or configure a value converter using 'HasConversion'.
2025-03-28 15:18:29.550 -07:00 [WRN] No store type was specified for the decimal property 'TotalContributions' on entity type 'Account'. This will cause values to be silently truncated if they do not fit in the default precision and scale. Explicitly specify the SQL server column type that can accommodate all the values in 'OnModelCreating' using 'HasColumnType', specify precision and scale using 'HasPrecision', or configure a value converter using 'HasConversion'.
2025-03-28 15:18:29.559 -07:00 [WRN] No store type was specified for the decimal property 'Amount' on entity type 'Contribution'. This will cause values to be silently truncated if they do not fit in the default precision and scale. Explicitly specify the SQL server column type that can accommodate all the values in 'OnModelCreating' using 'HasColumnType', specify precision and scale using 'HasPrecision', or configure a value converter using 'HasConversion'.
2025-03-28 15:18:29.577 -07:00 [WRN] No store type was specified for the decimal property 'ThresholdValue' on entity type 'EligibilityRule'. This will cause values to be silently truncated if they do not fit in the default precision and scale. Explicitly specify the SQL server column type that can accommodate all the values in 'OnModelCreating' using 'HasColumnType', specify precision and scale using 'HasPrecision', or configure a value converter using 'HasConversion'.
2025-03-28 15:18:29.588 -07:00 [WRN] No store type was specified for the decimal property 'PensionContributionRate' on entity type 'Employer'. This will cause values to be silently truncated if they do not fit in the default precision and scale. Explicitly specify the SQL server column type that can accommodate all the values in 'OnModelCreating' using 'HasColumnType', specify precision and scale using 'HasPrecision', or configure a value converter using 'HasConversion'.
2025-03-28 15:18:29.599 -07:00 [WRN] No store type was specified for the decimal property 'Amount' on entity type 'Transaction'. This will cause values to be silently truncated if they do not fit in the default precision and scale. Explicitly specify the SQL server column type that can accommodate all the values in 'OnModelCreating' using 'HasColumnType', specify precision and scale using 'HasPrecision', or configure a value converter using 'HasConversion'.
2025-03-28 15:18:29.823 -07:00 [ERR] An error occurred while starting the application.
System.InvalidOperationException: An error was generated for warning 'Microsoft.EntityFrameworkCore.Migrations.PendingModelChangesWarning': The model for context 'ApplicationDbContext' has pending changes. Add a new migration before updating the database. See https://aka.ms/efcore-docs-pending-changes. This exception can be suppressed or logged by passing event ID 'RelationalEventId.PendingModelChangesWarning' to the 'ConfigureWarnings' method in 'DbContext.OnConfiguring' or 'AddDbContext'.
   at Microsoft.EntityFrameworkCore.Diagnostics.EventDefinition`1.Log[TLoggerCategory](IDiagnosticsLogger`1 logger, TParam arg)
   at Microsoft.EntityFrameworkCore.Diagnostics.RelationalLoggerExtensions.PendingModelChangesWarning(IDiagnosticsLogger`1 diagnostics, Type contextType)
   at Microsoft.EntityFrameworkCore.Migrations.Internal.Migrator.ValidateMigrations(Boolean useTransaction, String targetMigration)
   at Microsoft.EntityFrameworkCore.Migrations.Internal.Migrator.MigrateAsync(String targetMigration, CancellationToken cancellationToken)
   at Program.<Main>$(String[] args) in C:\Users\HP\OneDrive\Desktop\PCMS\PCMSAPI\Program.cs:line 193
2025-03-28 15:19:17.059 -07:00 [WRN] Sensitive data logging is enabled. Log entries and exception messages may include sensitive application data; this mode should only be enabled during development.
2025-03-28 15:19:17.199 -07:00 [WRN] No store type was specified for the decimal property 'CurrentBalance' on entity type 'Account'. This will cause values to be silently truncated if they do not fit in the default precision and scale. Explicitly specify the SQL server column type that can accommodate all the values in 'OnModelCreating' using 'HasColumnType', specify precision and scale using 'HasPrecision', or configure a value converter using 'HasConversion'.
2025-03-28 15:19:17.206 -07:00 [WRN] No store type was specified for the decimal property 'TotalContributions' on entity type 'Account'. This will cause values to be silently truncated if they do not fit in the default precision and scale. Explicitly specify the SQL server column type that can accommodate all the values in 'OnModelCreating' using 'HasColumnType', specify precision and scale using 'HasPrecision', or configure a value converter using 'HasConversion'.
2025-03-28 15:19:17.207 -07:00 [WRN] No store type was specified for the decimal property 'Amount' on entity type 'Contribution'. This will cause values to be silently truncated if they do not fit in the default precision and scale. Explicitly specify the SQL server column type that can accommodate all the values in 'OnModelCreating' using 'HasColumnType', specify precision and scale using 'HasPrecision', or configure a value converter using 'HasConversion'.
2025-03-28 15:19:17.208 -07:00 [WRN] No store type was specified for the decimal property 'ThresholdValue' on entity type 'EligibilityRule'. This will cause values to be silently truncated if they do not fit in the default precision and scale. Explicitly specify the SQL server column type that can accommodate all the values in 'OnModelCreating' using 'HasColumnType', specify precision and scale using 'HasPrecision', or configure a value converter using 'HasConversion'.
2025-03-28 15:19:17.209 -07:00 [WRN] No store type was specified for the decimal property 'PensionContributionRate' on entity type 'Employer'. This will cause values to be silently truncated if they do not fit in the default precision and scale. Explicitly specify the SQL server column type that can accommodate all the values in 'OnModelCreating' using 'HasColumnType', specify precision and scale using 'HasPrecision', or configure a value converter using 'HasConversion'.
2025-03-28 15:19:17.210 -07:00 [WRN] No store type was specified for the decimal property 'Amount' on entity type 'Transaction'. This will cause values to be silently truncated if they do not fit in the default precision and scale. Explicitly specify the SQL server column type that can accommodate all the values in 'OnModelCreating' using 'HasColumnType', specify precision and scale using 'HasPrecision', or configure a value converter using 'HasConversion'.
2025-03-28 15:19:28.079 -07:00 [WRN] Sensitive data logging is enabled. Log entries and exception messages may include sensitive application data; this mode should only be enabled during development.
2025-03-28 15:19:28.229 -07:00 [WRN] No store type was specified for the decimal property 'CurrentBalance' on entity type 'Account'. This will cause values to be silently truncated if they do not fit in the default precision and scale. Explicitly specify the SQL server column type that can accommodate all the values in 'OnModelCreating' using 'HasColumnType', specify precision and scale using 'HasPrecision', or configure a value converter using 'HasConversion'.
2025-03-28 15:19:28.236 -07:00 [WRN] No store type was specified for the decimal property 'TotalContributions' on entity type 'Account'. This will cause values to be silently truncated if they do not fit in the default precision and scale. Explicitly specify the SQL server column type that can accommodate all the values in 'OnModelCreating' using 'HasColumnType', specify precision and scale using 'HasPrecision', or configure a value converter using 'HasConversion'.
2025-03-28 15:19:28.237 -07:00 [WRN] No store type was specified for the decimal property 'Amount' on entity type 'Contribution'. This will cause values to be silently truncated if they do not fit in the default precision and scale. Explicitly specify the SQL server column type that can accommodate all the values in 'OnModelCreating' using 'HasColumnType', specify precision and scale using 'HasPrecision', or configure a value converter using 'HasConversion'.
2025-03-28 15:19:28.238 -07:00 [WRN] No store type was specified for the decimal property 'ThresholdValue' on entity type 'EligibilityRule'. This will cause values to be silently truncated if they do not fit in the default precision and scale. Explicitly specify the SQL server column type that can accommodate all the values in 'OnModelCreating' using 'HasColumnType', specify precision and scale using 'HasPrecision', or configure a value converter using 'HasConversion'.
2025-03-28 15:19:28.239 -07:00 [WRN] No store type was specified for the decimal property 'PensionContributionRate' on entity type 'Employer'. This will cause values to be silently truncated if they do not fit in the default precision and scale. Explicitly specify the SQL server column type that can accommodate all the values in 'OnModelCreating' using 'HasColumnType', specify precision and scale using 'HasPrecision', or configure a value converter using 'HasConversion'.
2025-03-28 15:19:28.241 -07:00 [WRN] No store type was specified for the decimal property 'Amount' on entity type 'Transaction'. This will cause values to be silently truncated if they do not fit in the default precision and scale. Explicitly specify the SQL server column type that can accommodate all the values in 'OnModelCreating' using 'HasColumnType', specify precision and scale using 'HasPrecision', or configure a value converter using 'HasConversion'.
2025-03-28 15:20:03.318 -07:00 [WRN] Sensitive data logging is enabled. Log entries and exception messages may include sensitive application data; this mode should only be enabled during development.
2025-03-28 15:20:03.542 -07:00 [WRN] No store type was specified for the decimal property 'CurrentBalance' on entity type 'Account'. This will cause values to be silently truncated if they do not fit in the default precision and scale. Explicitly specify the SQL server column type that can accommodate all the values in 'OnModelCreating' using 'HasColumnType', specify precision and scale using 'HasPrecision', or configure a value converter using 'HasConversion'.
2025-03-28 15:20:03.551 -07:00 [WRN] No store type was specified for the decimal property 'TotalContributions' on entity type 'Account'. This will cause values to be silently truncated if they do not fit in the default precision and scale. Explicitly specify the SQL server column type that can accommodate all the values in 'OnModelCreating' using 'HasColumnType', specify precision and scale using 'HasPrecision', or configure a value converter using 'HasConversion'.
2025-03-28 15:20:03.552 -07:00 [WRN] No store type was specified for the decimal property 'Amount' on entity type 'Contribution'. This will cause values to be silently truncated if they do not fit in the default precision and scale. Explicitly specify the SQL server column type that can accommodate all the values in 'OnModelCreating' using 'HasColumnType', specify precision and scale using 'HasPrecision', or configure a value converter using 'HasConversion'.
2025-03-28 15:20:03.553 -07:00 [WRN] No store type was specified for the decimal property 'ThresholdValue' on entity type 'EligibilityRule'. This will cause values to be silently truncated if they do not fit in the default precision and scale. Explicitly specify the SQL server column type that can accommodate all the values in 'OnModelCreating' using 'HasColumnType', specify precision and scale using 'HasPrecision', or configure a value converter using 'HasConversion'.
2025-03-28 15:20:03.556 -07:00 [WRN] No store type was specified for the decimal property 'PensionContributionRate' on entity type 'Employer'. This will cause values to be silently truncated if they do not fit in the default precision and scale. Explicitly specify the SQL server column type that can accommodate all the values in 'OnModelCreating' using 'HasColumnType', specify precision and scale using 'HasPrecision', or configure a value converter using 'HasConversion'.
2025-03-28 15:20:03.557 -07:00 [WRN] No store type was specified for the decimal property 'Amount' on entity type 'Transaction'. This will cause values to be silently truncated if they do not fit in the default precision and scale. Explicitly specify the SQL server column type that can accommodate all the values in 'OnModelCreating' using 'HasColumnType', specify precision and scale using 'HasPrecision', or configure a value converter using 'HasConversion'.
2025-03-28 15:20:04.490 -07:00 [INF] Executed DbCommand (17ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT 1
2025-03-28 15:20:04.509 -07:00 [INF] Acquiring an exclusive lock for migration application. See https://aka.ms/efcore-docs-migrations-lock for more information if this takes too long.
2025-03-28 15:20:04.534 -07:00 [INF] Executed DbCommand (19ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
DECLARE @result int;
EXEC @result = sp_getapplock @Resource = '__EFMigrationsLock', @LockOwner = 'Session', @LockMode = 'Exclusive';
SELECT @result
2025-03-28 15:20:04.628 -07:00 [INF] Executed DbCommand (2ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
IF OBJECT_ID(N'[__EFMigrationsHistory]') IS NULL
BEGIN
    CREATE TABLE [__EFMigrationsHistory] (
        [MigrationId] nvarchar(150) NOT NULL,
        [ProductVersion] nvarchar(32) NOT NULL,
        CONSTRAINT [PK___EFMigrationsHistory] PRIMARY KEY ([MigrationId])
    );
END;
2025-03-28 15:20:04.643 -07:00 [INF] Executed DbCommand (1ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT 1
2025-03-28 15:20:04.646 -07:00 [INF] Executed DbCommand (1ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT OBJECT_ID(N'[__EFMigrationsHistory]');
2025-03-28 15:20:04.652 -07:00 [INF] Executed DbCommand (3ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT [MigrationId], [ProductVersion]
FROM [__EFMigrationsHistory]
ORDER BY [MigrationId];
2025-03-28 15:20:04.673 -07:00 [INF] Applying migration '20250328221935_JobUpdate'.
2025-03-28 15:20:04.743 -07:00 [INF] Executed DbCommand (21ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
ALTER TABLE [Accounts] DROP CONSTRAINT [PK_Accounts];
2025-03-28 15:20:04.786 -07:00 [INF] Executed DbCommand (41ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
DECLARE @var sysname;
SELECT @var = [d].[name]
FROM [sys].[default_constraints] [d]
INNER JOIN [sys].[columns] [c] ON [d].[parent_column_id] = [c].[column_id] AND [d].[parent_object_id] = [c].[object_id]
WHERE ([d].[parent_object_id] = OBJECT_ID(N'[Accounts]') AND [c].[name] = N'Id');
IF @var IS NOT NULL EXEC(N'ALTER TABLE [Accounts] DROP CONSTRAINT [' + @var + '];');
ALTER TABLE [Accounts] DROP COLUMN [Id];
2025-03-28 15:20:04.791 -07:00 [INF] Executed DbCommand (4ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
ALTER TABLE [Accounts] ADD [AccountId] nvarchar(50) NOT NULL DEFAULT N'';
2025-03-28 15:20:04.798 -07:00 [INF] Executed DbCommand (6ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
ALTER TABLE [Accounts] ADD CONSTRAINT [PK_Accounts] PRIMARY KEY ([AccountId]);
2025-03-28 15:20:04.801 -07:00 [INF] Executed DbCommand (2ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
INSERT INTO [__EFMigrationsHistory] ([MigrationId], [ProductVersion])
VALUES (N'20250328221935_JobUpdate', N'9.0.3');
2025-03-28 15:20:04.807 -07:00 [INF] Executed DbCommand (2ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
DECLARE @result int;
EXEC @result = sp_releaseapplock @Resource = '__EFMigrationsLock', @LockOwner = 'Session';
SELECT @result
2025-03-28 15:20:15.599 -07:00 [INF] Start installing Hangfire SQL objects...
2025-03-28 15:20:16.626 -07:00 [INF] Hangfire SQL objects installed.
2025-03-28 15:20:17.056 -07:00 [INF] User profile is available. Using 'C:\Users\HP\AppData\Local\ASP.NET\DataProtection-Keys' as key repository and Windows DPAPI to encrypt keys at rest.
2025-03-28 15:20:18.282 -07:00 [WRN] Sensitive data logging is enabled. Log entries and exception messages may include sensitive application data; this mode should only be enabled during development.
2025-03-28 15:20:18.457 -07:00 [WRN] No store type was specified for the decimal property 'CurrentBalance' on entity type 'Account'. This will cause values to be silently truncated if they do not fit in the default precision and scale. Explicitly specify the SQL server column type that can accommodate all the values in 'OnModelCreating' using 'HasColumnType', specify precision and scale using 'HasPrecision', or configure a value converter using 'HasConversion'.
2025-03-28 15:20:18.472 -07:00 [WRN] No store type was specified for the decimal property 'TotalContributions' on entity type 'Account'. This will cause values to be silently truncated if they do not fit in the default precision and scale. Explicitly specify the SQL server column type that can accommodate all the values in 'OnModelCreating' using 'HasColumnType', specify precision and scale using 'HasPrecision', or configure a value converter using 'HasConversion'.
2025-03-28 15:20:18.479 -07:00 [WRN] No store type was specified for the decimal property 'Amount' on entity type 'Contribution'. This will cause values to be silently truncated if they do not fit in the default precision and scale. Explicitly specify the SQL server column type that can accommodate all the values in 'OnModelCreating' using 'HasColumnType', specify precision and scale using 'HasPrecision', or configure a value converter using 'HasConversion'.
2025-03-28 15:20:18.484 -07:00 [WRN] No store type was specified for the decimal property 'ThresholdValue' on entity type 'EligibilityRule'. This will cause values to be silently truncated if they do not fit in the default precision and scale. Explicitly specify the SQL server column type that can accommodate all the values in 'OnModelCreating' using 'HasColumnType', specify precision and scale using 'HasPrecision', or configure a value converter using 'HasConversion'.
2025-03-28 15:20:18.492 -07:00 [WRN] No store type was specified for the decimal property 'PensionContributionRate' on entity type 'Employer'. This will cause values to be silently truncated if they do not fit in the default precision and scale. Explicitly specify the SQL server column type that can accommodate all the values in 'OnModelCreating' using 'HasColumnType', specify precision and scale using 'HasPrecision', or configure a value converter using 'HasConversion'.
2025-03-28 15:20:18.499 -07:00 [WRN] No store type was specified for the decimal property 'Amount' on entity type 'Transaction'. This will cause values to be silently truncated if they do not fit in the default precision and scale. Explicitly specify the SQL server column type that can accommodate all the values in 'OnModelCreating' using 'HasColumnType', specify precision and scale using 'HasPrecision', or configure a value converter using 'HasConversion'.
2025-03-28 15:20:19.144 -07:00 [INF] Executed DbCommand (34ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT 1
2025-03-28 15:20:19.207 -07:00 [INF] Acquiring an exclusive lock for migration application. See https://aka.ms/efcore-docs-migrations-lock for more information if this takes too long.
2025-03-28 15:20:19.257 -07:00 [INF] Executed DbCommand (37ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
DECLARE @result int;
EXEC @result = sp_getapplock @Resource = '__EFMigrationsLock', @LockOwner = 'Session', @LockMode = 'Exclusive';
SELECT @result
2025-03-28 15:20:19.424 -07:00 [INF] Executed DbCommand (3ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
IF OBJECT_ID(N'[__EFMigrationsHistory]') IS NULL
BEGIN
    CREATE TABLE [__EFMigrationsHistory] (
        [MigrationId] nvarchar(150) NOT NULL,
        [ProductVersion] nvarchar(32) NOT NULL,
        CONSTRAINT [PK___EFMigrationsHistory] PRIMARY KEY ([MigrationId])
    );
END;
2025-03-28 15:20:19.498 -07:00 [INF] Executed DbCommand (1ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT 1
2025-03-28 15:20:19.523 -07:00 [INF] Executed DbCommand (2ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT OBJECT_ID(N'[__EFMigrationsHistory]');
2025-03-28 15:20:19.550 -07:00 [INF] Executed DbCommand (5ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT [MigrationId], [ProductVersion]
FROM [__EFMigrationsHistory]
ORDER BY [MigrationId];
2025-03-28 15:20:19.607 -07:00 [INF] No migrations were applied. The database is already up to date.
2025-03-28 15:20:19.620 -07:00 [INF] Executed DbCommand (3ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
DECLARE @result int;
EXEC @result = sp_releaseapplock @Resource = '__EFMigrationsLock', @LockOwner = 'Session';
SELECT @result
2025-03-28 15:20:20.327 -07:00 [INF] Executed DbCommand (5ms) [Parameters=[@__normalizedName_0='ADMIN' (Size = 256)], CommandType='"Text"', CommandTimeout='30']
SELECT TOP(1) [a].[Id], [a].[ConcurrencyStamp], [a].[Name], [a].[NormalizedName]
FROM [AspNetRoles] AS [a]
WHERE [a].[NormalizedName] = @__normalizedName_0
2025-03-28 15:20:21.025 -07:00 [INF] Executed DbCommand (2ms) [Parameters=[@__normalizedName_0='EMPLOYER' (Size = 256)], CommandType='"Text"', CommandTimeout='30']
SELECT TOP(1) [a].[Id], [a].[ConcurrencyStamp], [a].[Name], [a].[NormalizedName]
FROM [AspNetRoles] AS [a]
WHERE [a].[NormalizedName] = @__normalizedName_0
2025-03-28 15:20:21.039 -07:00 [INF] Executed DbCommand (2ms) [Parameters=[@__normalizedName_0='MEMBER' (Size = 256)], CommandType='"Text"', CommandTimeout='30']
SELECT TOP(1) [a].[Id], [a].[ConcurrencyStamp], [a].[Name], [a].[NormalizedName]
FROM [AspNetRoles] AS [a]
WHERE [a].[NormalizedName] = @__normalizedName_0
2025-03-28 15:20:21.106 -07:00 [INF] Executed DbCommand (3ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT CASE
    WHEN EXISTS (
        SELECT 1
        FROM [EligibilityRules] AS [e]
        WHERE [e].[Status] <> 3) THEN CAST(1 AS bit)
    ELSE CAST(0 AS bit)
END
2025-03-28 15:20:21.203 -07:00 [INF] Executed DbCommand (6ms) [Parameters=[@__normalizedEmail_0='ADMIN@NLPC.COM' (Size = 256)], CommandType='"Text"', CommandTimeout='30']
SELECT TOP(2) [a].[Id], [a].[AccessFailedCount], [a].[Address], [a].[BankAccountNumber], [a].[BankName], [a].[ConcurrencyStamp], [a].[CreatedDate], [a].[DateOfBirth], [a].[DeletedDate], [a].[Email], [a].[EmailConfirmed], [a].[EmployerId], [a].[FirstName], [a].[IsActive], [a].[IsEligibleForBenefits], [a].[LastName], [a].[LockoutEnabled], [a].[LockoutEnd], [a].[MembershipType], [a].[ModifiedDate], [a].[NationalIdentificationNumber], [a].[NickName], [a].[NormalizedEmail], [a].[NormalizedUserName], [a].[PasswordHash], [a].[PhoneNumber], [a].[PhoneNumberConfirmed], [a].[ProfilePicture], [a].[RefreshToken], [a].[RefreshTokenEndDate], [a].[SecurityStamp], [a].[Status], [a].[TwoFactorEnabled], [a].[UserName]
FROM [AspNetUsers] AS [a]
WHERE [a].[NormalizedEmail] = @__normalizedEmail_0
2025-03-28 15:20:23.332 -07:00 [INF] Now listening on: https://localhost:7055
2025-03-28 15:20:23.338 -07:00 [INF] Now listening on: http://localhost:5226
2025-03-28 15:20:23.532 -07:00 [INF] Starting Hangfire Server using job storage: 'SQL Server: localhost@NLPCDb'
2025-03-28 15:20:23.535 -07:00 [INF] Using the following options for SQL Server job storage: Queue poll interval: 00:00:00.
2025-03-28 15:20:23.538 -07:00 [INF] Using the following options for Hangfire Server:
    Worker count: 16
    Listening queues: 'default', 'contributions', 'eligibility', 'transactions'
    Shutdown timeout: 00:00:15
    Schedule polling interval: 00:00:15
2025-03-28 15:20:23.643 -07:00 [INF] Application started. Press Ctrl+C to shut down.
2025-03-28 15:20:23.653 -07:00 [INF] Hosting environment: Development
2025-03-28 15:20:23.657 -07:00 [INF] Content root path: C:\Users\HP\OneDrive\Desktop\PCMS\PCMSAPI
2025-03-28 15:20:23.680 -07:00 [INF] Server desktop-79ihet5:30136:2838b727 successfully announced in 39.0407 ms
2025-03-28 15:20:23.697 -07:00 [INF] Server desktop-79ihet5:30136:2838b727 is starting the registered dispatchers: ServerWatchdog, ServerJobCancellationWatcher, ExpirationManager, CountersAggregator, SqlServerHeartbeatProcess, Worker, DelayedJobScheduler, RecurringJobScheduler...
2025-03-28 15:20:23.737 -07:00 [INF] 3 servers were removed due to timeout
2025-03-28 15:20:23.866 -07:00 [INF] Server desktop-79ihet5:30136:2838b727 all the dispatchers started
2025-03-28 15:20:24.835 -07:00 [INF] Request starting HTTP/2 GET https://localhost:7055/swagger/index.html - null null
2025-03-28 15:20:25.243 -07:00 [INF] Starting interest calculation job
2025-03-28 15:20:25.245 -07:00 [INF] Starting failed transaction processing job
2025-03-28 15:20:25.250 -07:00 [INF] GetAccountsForInterestCalculationAsync called
2025-03-28 15:20:25.254 -07:00 [INF] Retrieving failed transactions with less than 3 attempts
2025-03-28 15:21:59.661 -07:00 [INF] Start installing Hangfire SQL objects...
2025-03-28 15:22:00.544 -07:00 [INF] Hangfire SQL objects installed.
2025-03-28 15:22:00.954 -07:00 [INF] User profile is available. Using 'C:\Users\HP\AppData\Local\ASP.NET\DataProtection-Keys' as key repository and Windows DPAPI to encrypt keys at rest.
2025-03-28 15:22:01.916 -07:00 [WRN] Sensitive data logging is enabled. Log entries and exception messages may include sensitive application data; this mode should only be enabled during development.
2025-03-28 15:22:02.051 -07:00 [WRN] No store type was specified for the decimal property 'CurrentBalance' on entity type 'Account'. This will cause values to be silently truncated if they do not fit in the default precision and scale. Explicitly specify the SQL server column type that can accommodate all the values in 'OnModelCreating' using 'HasColumnType', specify precision and scale using 'HasPrecision', or configure a value converter using 'HasConversion'.
2025-03-28 15:22:02.067 -07:00 [WRN] No store type was specified for the decimal property 'TotalContributions' on entity type 'Account'. This will cause values to be silently truncated if they do not fit in the default precision and scale. Explicitly specify the SQL server column type that can accommodate all the values in 'OnModelCreating' using 'HasColumnType', specify precision and scale using 'HasPrecision', or configure a value converter using 'HasConversion'.
2025-03-28 15:22:02.075 -07:00 [WRN] No store type was specified for the decimal property 'Amount' on entity type 'Contribution'. This will cause values to be silently truncated if they do not fit in the default precision and scale. Explicitly specify the SQL server column type that can accommodate all the values in 'OnModelCreating' using 'HasColumnType', specify precision and scale using 'HasPrecision', or configure a value converter using 'HasConversion'.
2025-03-28 15:22:02.082 -07:00 [WRN] No store type was specified for the decimal property 'ThresholdValue' on entity type 'EligibilityRule'. This will cause values to be silently truncated if they do not fit in the default precision and scale. Explicitly specify the SQL server column type that can accommodate all the values in 'OnModelCreating' using 'HasColumnType', specify precision and scale using 'HasPrecision', or configure a value converter using 'HasConversion'.
2025-03-28 15:22:02.090 -07:00 [WRN] No store type was specified for the decimal property 'PensionContributionRate' on entity type 'Employer'. This will cause values to be silently truncated if they do not fit in the default precision and scale. Explicitly specify the SQL server column type that can accommodate all the values in 'OnModelCreating' using 'HasColumnType', specify precision and scale using 'HasPrecision', or configure a value converter using 'HasConversion'.
2025-03-28 15:22:02.100 -07:00 [WRN] No store type was specified for the decimal property 'Amount' on entity type 'Transaction'. This will cause values to be silently truncated if they do not fit in the default precision and scale. Explicitly specify the SQL server column type that can accommodate all the values in 'OnModelCreating' using 'HasColumnType', specify precision and scale using 'HasPrecision', or configure a value converter using 'HasConversion'.
2025-03-28 15:22:02.785 -07:00 [INF] Executed DbCommand (32ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT 1
2025-03-28 15:22:02.829 -07:00 [INF] Acquiring an exclusive lock for migration application. See https://aka.ms/efcore-docs-migrations-lock for more information if this takes too long.
2025-03-28 15:22:02.871 -07:00 [INF] Executed DbCommand (25ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
DECLARE @result int;
EXEC @result = sp_getapplock @Resource = '__EFMigrationsLock', @LockOwner = 'Session', @LockMode = 'Exclusive';
SELECT @result
2025-03-28 15:22:03.028 -07:00 [INF] Executed DbCommand (8ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
IF OBJECT_ID(N'[__EFMigrationsHistory]') IS NULL
BEGIN
    CREATE TABLE [__EFMigrationsHistory] (
        [MigrationId] nvarchar(150) NOT NULL,
        [ProductVersion] nvarchar(32) NOT NULL,
        CONSTRAINT [PK___EFMigrationsHistory] PRIMARY KEY ([MigrationId])
    );
END;
2025-03-28 15:22:03.082 -07:00 [INF] Executed DbCommand (1ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT 1
2025-03-28 15:22:03.094 -07:00 [INF] Executed DbCommand (2ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT OBJECT_ID(N'[__EFMigrationsHistory]');
2025-03-28 15:22:03.116 -07:00 [INF] Executed DbCommand (4ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT [MigrationId], [ProductVersion]
FROM [__EFMigrationsHistory]
ORDER BY [MigrationId];
2025-03-28 15:22:03.164 -07:00 [INF] No migrations were applied. The database is already up to date.
2025-03-28 15:22:03.175 -07:00 [INF] Executed DbCommand (2ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
DECLARE @result int;
EXEC @result = sp_releaseapplock @Resource = '__EFMigrationsLock', @LockOwner = 'Session';
SELECT @result
2025-03-28 15:22:03.997 -07:00 [INF] Executed DbCommand (5ms) [Parameters=[@__normalizedName_0='ADMIN' (Size = 256)], CommandType='"Text"', CommandTimeout='30']
SELECT TOP(1) [a].[Id], [a].[ConcurrencyStamp], [a].[Name], [a].[NormalizedName]
FROM [AspNetRoles] AS [a]
WHERE [a].[NormalizedName] = @__normalizedName_0
2025-03-28 15:22:04.121 -07:00 [INF] Executed DbCommand (1ms) [Parameters=[@__normalizedName_0='EMPLOYER' (Size = 256)], CommandType='"Text"', CommandTimeout='30']
SELECT TOP(1) [a].[Id], [a].[ConcurrencyStamp], [a].[Name], [a].[NormalizedName]
FROM [AspNetRoles] AS [a]
WHERE [a].[NormalizedName] = @__normalizedName_0
2025-03-28 15:22:04.135 -07:00 [INF] Executed DbCommand (2ms) [Parameters=[@__normalizedName_0='MEMBER' (Size = 256)], CommandType='"Text"', CommandTimeout='30']
SELECT TOP(1) [a].[Id], [a].[ConcurrencyStamp], [a].[Name], [a].[NormalizedName]
FROM [AspNetRoles] AS [a]
WHERE [a].[NormalizedName] = @__normalizedName_0
2025-03-28 15:22:04.202 -07:00 [INF] Executed DbCommand (3ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT CASE
    WHEN EXISTS (
        SELECT 1
        FROM [EligibilityRules] AS [e]
        WHERE [e].[Status] <> 3) THEN CAST(1 AS bit)
    ELSE CAST(0 AS bit)
END
2025-03-28 15:22:04.290 -07:00 [INF] Executed DbCommand (6ms) [Parameters=[@__normalizedEmail_0='ADMIN@NLPC.COM' (Size = 256)], CommandType='"Text"', CommandTimeout='30']
SELECT TOP(2) [a].[Id], [a].[AccessFailedCount], [a].[Address], [a].[BankAccountNumber], [a].[BankName], [a].[ConcurrencyStamp], [a].[CreatedDate], [a].[DateOfBirth], [a].[DeletedDate], [a].[Email], [a].[EmailConfirmed], [a].[EmployerId], [a].[FirstName], [a].[IsActive], [a].[IsEligibleForBenefits], [a].[LastName], [a].[LockoutEnabled], [a].[LockoutEnd], [a].[MembershipType], [a].[ModifiedDate], [a].[NationalIdentificationNumber], [a].[NickName], [a].[NormalizedEmail], [a].[NormalizedUserName], [a].[PasswordHash], [a].[PhoneNumber], [a].[PhoneNumberConfirmed], [a].[ProfilePicture], [a].[RefreshToken], [a].[RefreshTokenEndDate], [a].[SecurityStamp], [a].[Status], [a].[TwoFactorEnabled], [a].[UserName]
FROM [AspNetUsers] AS [a]
WHERE [a].[NormalizedEmail] = @__normalizedEmail_0
2025-03-28 15:22:05.124 -07:00 [INF] Now listening on: https://localhost:7055
2025-03-28 15:22:05.132 -07:00 [INF] Now listening on: http://localhost:5226
2025-03-28 15:22:05.327 -07:00 [INF] Starting Hangfire Server using job storage: 'SQL Server: localhost@NLPCDb'
2025-03-28 15:22:05.332 -07:00 [INF] Using the following options for SQL Server job storage: Queue poll interval: 00:00:00.
2025-03-28 15:22:05.348 -07:00 [INF] Using the following options for Hangfire Server:
    Worker count: 16
    Listening queues: 'default', 'contributions', 'eligibility', 'transactions'
    Shutdown timeout: 00:00:15
    Schedule polling interval: 00:00:15
2025-03-28 15:22:05.388 -07:00 [INF] Application started. Press Ctrl+C to shut down.
2025-03-28 15:22:05.394 -07:00 [INF] Hosting environment: Development
2025-03-28 15:22:05.398 -07:00 [INF] Content root path: C:\Users\HP\OneDrive\Desktop\PCMS\PCMSAPI
2025-03-28 15:22:05.418 -07:00 [INF] Server desktop-79ihet5:40504:e1c00f7d successfully announced in 30.6672 ms
2025-03-28 15:22:05.436 -07:00 [INF] Server desktop-79ihet5:40504:e1c00f7d is starting the registered dispatchers: ServerWatchdog, ServerJobCancellationWatcher, ExpirationManager, CountersAggregator, SqlServerHeartbeatProcess, Worker, DelayedJobScheduler, RecurringJobScheduler...
2025-03-28 15:22:05.609 -07:00 [INF] Server desktop-79ihet5:40504:e1c00f7d all the dispatchers started
2025-03-28 15:22:06.217 -07:00 [INF] Request starting HTTP/2 GET https://localhost:7055/swagger/index.html - null null
2025-03-28 15:22:07.339 -07:00 [INF] Request starting HTTP/2 GET https://localhost:7055/swagger/index.css - null null
2025-03-28 15:22:07.339 -07:00 [INF] Request starting HTTP/2 GET https://localhost:7055/swagger/index.js - null null
2025-03-28 15:22:07.339 -07:00 [INF] Request starting HTTP/2 GET https://localhost:7055/_framework/aspnetcore-browser-refresh.js - null null
2025-03-28 15:22:07.394 -07:00 [INF] The file /index.css was not modified
2025-03-28 15:22:07.448 -07:00 [INF] Request finished HTTP/2 GET https://localhost:7055/_framework/aspnetcore-browser-refresh.js - 200 16491 application/javascript; charset=utf-8 104.8262ms
2025-03-28 15:22:07.449 -07:00 [INF] Request starting HTTP/2 GET https://localhost:7055/_vs/browserLink - null null
2025-03-28 15:22:07.587 -07:00 [INF] Request finished HTTP/2 GET https://localhost:7055/_vs/browserLink - 200 null text/javascript; charset=UTF-8 137.9176ms
2025-03-28 15:22:07.683 -07:00 [INF] Executed DbCommand (7ms) [Parameters=[@p0='01JQFDJ8XVRKE9PW002T545RV5' (Nullable = false) (Size = 50), @p1='::1' (Nullable = false) (Size = 4000), @p2='00:00:00.1127101', @p3='GET' (Nullable = false) (Size = 4000), @p4='' (Nullable = false) (Size = 4000), @p5='' (Nullable = false) (Size = 4000), @p6='' (Nullable = false) (Size = 4000), @p7='' (Nullable = false) (Size = 4000), @p8='{"Accept":["text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7"],"Host":["localhost:7055"],"User-Agent":["Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/134.0.0.0 Safari/537.36"],"Accept-Encoding":["gzip, deflate, br, zstd"],"Accept-Language":["en-US,en;q=0.9,fr;q=0.8"],"Upgrade-Insecure-Requests":["1"],"sec-fetch-site":["none"],"sec-fetch-mode":["navigate"],"sec-fetch-user":["?1"],"sec-fetch-dest":["document"],"sec-ch-ua":["\"Chromium\";v=\"134\", \"Not:A-Brand\";v=\"24\", \"Google Chrome\";v=\"134\""],"sec-ch-ua-mobile":["?0"],"sec-ch-ua-platform":["\"Windows\""],"priority":["u=0, i"]}' (Nullable = false) (Size = 4000), @p9='2025-03-28T22:22:07.1523123Z', @p10='/swagger/index.html' (Nullable = false) (Size = 4000), @p11='<!-- HTML for static distribution bundle build -->
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>Swagger UI</title>
    <link rel="stylesheet" type="text/css" href="./swagger-ui.css">
    <link rel="stylesheet" type="text/css" href="./index.css">
    <link rel="icon" type="image/png" href="./favicon-32x32.png" sizes="32x32" />
    <link rel="icon" type="image/png" href="./favicon-16x16.png" sizes="16x16" />
       
</head>

<body>
    <div id="swagger-ui"></div>

    <script src="./swagger-ui-bundle.js" charset="utf-8"></script>
    <script src="./swagger-ui-standalone-preset.js" charset="utf-8"></script>
    <script src="index.js" charset="utf-8"></script>
</body>
</html>
' (Nullable = false) (Size = 4000), @p12='{"Content-Type":["text/html;charset=utf-8"],"Date":["Fri, 28 Mar 2025 22:22:06 GMT"],"Server":["Kestrel"]}' (Nullable = false) (Size = 4000), @p13='2025-03-28T22:22:07.2650250Z', @p14='200', @p15='2025-03-28T22:22:07.2918080Z'], CommandType='"Text"', CommandTimeout='30']
SET IMPLICIT_TRANSACTIONS OFF;
SET NOCOUNT ON;
INSERT INTO [RequestResponseLogs] ([RequestResponseLogId], [ClientIp], [ExecutionTime], [HttpMethod], [MemberAgent], [MemberId], [QueryString], [RequestBody], [RequestHeaders], [RequestInitiatedAt], [RequestPath], [ResponseBody], [ResponseHeaders], [ResponseReceivedAt], [StatusCode], [Timestamp])
VALUES (@p0, @p1, @p2, @p3, @p4, @p5, @p6, @p7, @p8, @p9, @p10, @p11, @p12, @p13, @p14, @p15);
2025-03-28 15:22:07.684 -07:00 [INF] Executed DbCommand (8ms) [Parameters=[@p0='01JQFDJ918R6C3TRZ603FZ3HXD' (Nullable = false) (Size = 50), @p1='::1' (Nullable = false) (Size = 4000), @p2='00:00:00.0009822', @p3='GET' (Nullable = false) (Size = 4000), @p4='' (Nullable = false) (Size = 4000), @p5='' (Nullable = false) (Size = 4000), @p6='' (Nullable = false) (Size = 4000), @p7='' (Nullable = false) (Size = 4000), @p8='{"Accept":["*/*"],"Host":["localhost:7055"],"User-Agent":["Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/134.0.0.0 Safari/537.36"],"Accept-Encoding":["gzip, deflate, br, zstd"],"Accept-Language":["en-US,en;q=0.9,fr;q=0.8"],"Referer":["https://localhost:7055/swagger/index.html"],"sec-ch-ua-platform":["\"Windows\""],"sec-ch-ua":["\"Chromium\";v=\"134\", \"Not:A-Brand\";v=\"24\", \"Google Chrome\";v=\"134\""],"sec-ch-ua-mobile":["?0"],"sec-fetch-site":["same-origin"],"sec-fetch-mode":["no-cors"],"sec-fetch-dest":["script"],"priority":["u=1"]}' (Nullable = false) (Size = 4000), @p9='2025-03-28T22:22:07.3719357Z', @p10='/swagger/index.js' (Nullable = false) (Size = 4000), @p11='/* Source: https://gist.github.com/lamberta/3768814
 * Parse a string function definition and return a function object. Does not use eval.
 * @param {string} str
 * @return {function}
 *
 * Example:
 *  var f = function (x, y) { return x * y; };
 *  var g = parseFunction(f.toString());
 *  g(33, 3); //=> 99
 */
function parseFunction(str) {
    if (!str) return void (0);

    var fn_body_idx = str.indexOf('{'),
        fn_body = str.substring(fn_body_idx + 1, str.lastIndexOf('}')),
        fn_declare = str.substring(0, fn_body_idx),
        fn_params = fn_declare.substring(fn_declare.indexOf('(') + 1, fn_declare.lastIndexOf(')')),
        args = fn_params.split(',');

    args.push(fn_body);

    function Fn() {
        return Function.apply(this, args);
    }
    Fn.prototype = Function.prototype;

    return new Fn();
}

window.onload = function () {
    var configObject = JSON.parse('{"urls":[{"url":"./v1/swagger.json","name":"NLPC PCMS V1"}],"deepLinking":false,"persistAuthorization":false,"displayOperationId":false,"defaultModelsExpandDepth":1,"defaultModelExpandDepth":1,"defaultModelRendering":"example","displayRequestDuration":false,"docExpansion":"list","showExtensions":false,"showCommonExtensions":false,"supportedSubmitMethods":["get","put","post","delete","options","head","patch","trace"],"tryItOutEnabled":false}');
    var oauthConfigObject = JSON.parse('{"scopeSeparator":" ","scopes":[],"useBasicAuthenticationWithAccessCodeGrant":false,"usePkceWithAuthorizationCodeGrant":false}');

    // Workaround for https://github.com/swagger-api/swagger-ui/issues/5945
    configObject.urls.forEach(function (item) {
        if (item.url.startsWith("http") || item.url.startsWith("/")) return;
        item.url = window.location.href.replace("index.html", item.url).split('#')[0];
    });

    // If validatorUrl is not explicitly provided, disable the feature by setting to null
    if (!configObject.hasOwnProperty("validatorUrl"))
        configObject.validatorUrl = null

    // If oauth2RedirectUrl isn't specified, use the built-in default
    if (!configObject.hasOwnProperty("oauth2RedirectUrl"))
        configObject.oauth2RedirectUrl = (new URL("oauth2-redirect.html", window.location.href)).href;

    // Apply mandatory parameters
    configObject.dom_id = "#swagger-ui";
    configObject.presets = [SwaggerUIBundle.presets.apis, SwaggerUIStandalonePreset];
    configObject.layout = "StandaloneLayout";

    // Parse and add interceptor functions
    var interceptors = JSON.parse('{}');
    if (interceptors.RequestInterceptorFunction)
        configObject.requestInterceptor = parseFunction(interceptors.RequestInterceptorFunction);
    if (interceptors.ResponseInterceptorFunction)
        configObject.responseInterceptor = parseFunction(interceptors.ResponseInterceptorFunction);

    if (configObject.plugins) {
        configObject.plugins = configObject.plugins.map(eval);
    }
    
    // Begin Swagger UI call region

    const ui = SwaggerUIBundle(configObject);

    ui.initOAuth(oauthConfigObject);

    // End Swagger UI call region

    window.ui = ui
}
' (Nullable = false) (Size = 4000), @p12='{"Content-Type":["application/javascript;charset=utf-8"],"Date":["Fri, 28 Mar 2025 22:22:06 GMT"],"Server":["Kestrel"]}' (Nullable = false) (Size = 4000), @p13='2025-03-28T22:22:07.3729200Z', @p14='200', @p15='2025-03-28T22:22:07.4001359Z'], CommandType='"Text"', CommandTimeout='30']
SET IMPLICIT_TRANSACTIONS OFF;
SET NOCOUNT ON;
INSERT INTO [RequestResponseLogs] ([RequestResponseLogId], [ClientIp], [ExecutionTime], [HttpMethod], [MemberAgent], [MemberId], [QueryString], [RequestBody], [RequestHeaders], [RequestInitiatedAt], [RequestPath], [ResponseBody], [ResponseHeaders], [ResponseReceivedAt], [StatusCode], [Timestamp])
VALUES (@p0, @p1, @p2, @p3, @p4, @p5, @p6, @p7, @p8, @p9, @p10, @p11, @p12, @p13, @p14, @p15);
2025-03-28 15:22:07.683 -07:00 [INF] Executed DbCommand (7ms) [Parameters=[@p0='01JQFDJ91KHWAPCJGJBWE99VPD' (Nullable = false) (Size = 50), @p1='::1' (Nullable = false) (Size = 4000), @p2='00:00:00.0384327', @p3='GET' (Nullable = false) (Size = 4000), @p4='' (Nullable = false) (Size = 4000), @p5='' (Nullable = false) (Size = 4000), @p6='' (Nullable = false) (Size = 4000), @p7='' (Nullable = false) (Size = 4000), @p8='{"Accept":["text/css,*/*;q=0.1"],"Host":["localhost:7055"],"User-Agent":["Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/134.0.0.0 Safari/537.36"],"Accept-Encoding":["gzip, deflate, br, zstd"],"Accept-Language":["en-US,en;q=0.9,fr;q=0.8"],"If-Modified-Since":["Tue, 18 Mar 2025 18:11:18 GMT"],"If-None-Match":["\"1db9831250d27ca\""],"Referer":["https://localhost:7055/swagger/index.html"],"sec-ch-ua-platform":["\"Windows\""],"sec-ch-ua":["\"Chromium\";v=\"134\", \"Not:A-Brand\";v=\"24\", \"Google Chrome\";v=\"134\""],"sec-ch-ua-mobile":["?0"],"sec-fetch-site":["same-origin"],"sec-fetch-mode":["no-cors"],"sec-fetch-dest":["style"],"priority":["u=0"]}' (Nullable = false) (Size = 4000), @p9='2025-03-28T22:22:07.3639206Z', @p10='/swagger/index.css' (Nullable = false) (Size = 4000), @p11='' (Nullable = false) (Size = 4000), @p12='{"Content-Type":["text/css"],"Accept-Ranges":["bytes"],"ETag":["\"1db9831250d27ca\""],"Last-Modified":["Tue, 18 Mar 2025 18:11:18 GMT"]}' (Nullable = false) (Size = 4000), @p13='2025-03-28T22:22:07.4023557Z', @p14='304', @p15='2025-03-28T22:22:07.4116033Z'], CommandType='"Text"', CommandTimeout='30']
SET IMPLICIT_TRANSACTIONS OFF;
SET NOCOUNT ON;
INSERT INTO [RequestResponseLogs] ([RequestResponseLogId], [ClientIp], [ExecutionTime], [HttpMethod], [MemberAgent], [MemberId], [QueryString], [RequestBody], [RequestHeaders], [RequestInitiatedAt], [RequestPath], [ResponseBody], [ResponseHeaders], [ResponseReceivedAt], [StatusCode], [Timestamp])
VALUES (@p0, @p1, @p2, @p3, @p4, @p5, @p6, @p7, @p8, @p9, @p10, @p11, @p12, @p13, @p14, @p15);
2025-03-28 15:22:07.757 -07:00 [INF] Request finished HTTP/2 GET https://localhost:7055/swagger/index.html - 200 null text/html;charset=utf-8 1555.3161ms
2025-03-28 15:22:07.757 -07:00 [INF] Request finished HTTP/2 GET https://localhost:7055/swagger/index.js - 200 null application/javascript;charset=utf-8 418.2151ms
2025-03-28 15:22:07.757 -07:00 [INF] Request finished HTTP/2 GET https://localhost:7055/swagger/index.css - 304 null text/css 418.5482ms
2025-03-28 15:22:08.923 -07:00 [INF] Request starting HTTP/2 GET https://localhost:7055/swagger/v1/swagger.json - null null
2025-03-28 15:22:09.222 -07:00 [INF] Executed DbCommand (19ms) [Parameters=[@p0='01JQFDJARSP2T4D9Z1CFPZJ4JY' (Nullable = false) (Size = 50), @p1='::1' (Nullable = false) (Size = 4000), @p2='00:00:00.2240169', @p3='GET' (Nullable = false) (Size = 4000), @p4='' (Nullable = false) (Size = 4000), @p5='' (Nullable = false) (Size = 4000), @p6='' (Nullable = false) (Size = 4000), @p7='' (Nullable = false) (Size = 4000), @p8='{"Accept":["application/json,*/*"],"Host":["localhost:7055"],"User-Agent":["Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/134.0.0.0 Safari/537.36"],"Accept-Encoding":["gzip, deflate, br, zstd"],"Accept-Language":["en-US,en;q=0.9,fr;q=0.8"],"Referer":["https://localhost:7055/swagger/index.html"],"sec-ch-ua-platform":["\"Windows\""],"sec-ch-ua":["\"Chromium\";v=\"134\", \"Not:A-Brand\";v=\"24\", \"Google Chrome\";v=\"134\""],"sec-ch-ua-mobile":["?0"],"sec-fetch-site":["same-origin"],"sec-fetch-mode":["cors"],"sec-fetch-dest":["empty"],"priority":["u=1, i"]}' (Nullable = false) (Size = 4000), @p9='2025-03-28T22:22:08.9406512Z', @p10='/swagger/v1/swagger.json' (Nullable = false) (Size = 4000), @p11='{
  "openapi": "3.0.4",
  "info": {
    "title": "NLPC PCMS",
    "description": "API documentation for NLPC PCMS system.",
    "termsOfService": "https://terms-of-service-url.com",
    "contact": {
      "name": "Pension Team",
      "url": "https://healthtriagen.com/contact",
      "email": "support@pcms.com"
    },
    "license": {
      "name": "MIT License",
      "url": "https://opensource.org/licenses/MIT"
    },
    "version": "v1"
  },
  "paths": {
    "/api/accounts": {
      "post": {
        "tags": [
          "Account"
        ],
        "summary": "Creates a new pension account.",
        "description": "**Endpoint:** `POST /api/accounts`  \r\n \r\nRegisters a new pension account for a member.\r\n \r\n**Validation Requirements:**  \r\n- Member ID is required and must be valid  \r\n- Account type 1 is for individual contribution account, while 2 is for employer sponsored contribution account  \r\n \r\n**Response Codes:**  \r\n| Status Code | Response Code | Description |  \r\n|------------|--------------|-------------|  \r\n| 200        | 00           | Account created successfully |  \r\n| 200        | 31           | Member not found |  \r\n| 422        | 14           | Invalid input (e.g., missing fields) |  \r\n| 500        | 09           | Exception occurred, contact developer |",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NewAccountRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/NewAccountRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/NewAccountRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/StringSuccessDataResult"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StringSuccessDataResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/StringSuccessDataResult"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Content",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/StringErrorDataResult"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StringErrorDataResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/StringErrorDataResult"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/StringErrorDataResult"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StringErrorDataResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/StringErrorDataResult"
                }
              }
            }
          },
          "404": {
            "description": "Not Found"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "ResponseCode": {
                      "type": "string",
                      "example": "00"
                    },
                    "ResponseDescription": {
                      "type": "string",
                      "example": "Request Successful."
                    },
                    "data": {
                      "type": "object",
                      "nullable": true
                    }
                  }
                }
              }
            }
          }
        }
      },
      "get": {
        "tags": [
          "Account"
        ],
        "summary": "Retrieves all accounts.",
        "description": "**Endpoint:** `GET /api/accounts`  \r\n \r\nFetches a list of all accounts.\r\n \r\n**Response Codes:**  \r\n| Status Code | Response Code | Description |  \r\n|------------|--------------|-------------|  \r\n| 200        | 00           | Accounts retrieved successfully |  \r\n| 200        | 31           | No accounts found |  \r\n| 500        | 09           | Exception occurred, contact developer |",
        "parameters": [
          {
            "name": "pageIndex",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/AccountDTOListSuccessDataResult"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AccountDTOListSuccessDataResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/AccountDTOListSuccessDataResult"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/StringErrorDataResult"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StringErrorDataResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/StringErrorDataResult"
                }
              }
            }
          },
          "404": {
            "description": "Not Found"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "ResponseCode": {
                      "type": "string",
                      "example": "00"
                    },
                    "ResponseDescription": {
                      "type": "string",
                      "example": "Request Successful."
                    },
                    "data": {
                      "type": "object",
                      "nullable": true
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/accounts/{accountId}": {
      "get": {
        "tags": [
          "Account"
        ],
        "summary": "Retrieves details of a specific account.",
        "description": "**Endpoint:** `GET /api/accounts/{accountId}`  \r\n \r\nFetches account details using the unique account ID.\r\n \r\n**Response Codes:**  \r\n| Status Code | Response Code | Description |  \r\n|------------|--------------|-------------|  \r\n| 200        | 00           | Account retrieved successfully |  \r\n| 200        | 31           | Account not found |  \r\n| 422        | 14           | Invalid input (e.g., missing fields) |  \r\n| 500        | 09           | Exception occurred, contact developer |",
        "parameters": [
          {
            "name": "accountId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/AccountDTOSuccessDataResult"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AccountDTOSuccessDataResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/AccountDTOSuccessDataResult"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Content",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/StringErrorDataResult"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StringErrorDataResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/StringErrorDataResult"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/StringErrorDataResult"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StringErrorDataResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/StringErrorDataResult"
                }
              }
            }
          },
          "404": {
            "description": "Not Found"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "ResponseCode": {
                      "type": "string",
                      "example": "00"
                    },
                    "ResponseDescription": {
                      "type": "string",
                      "example": "Request Successful."
                    },
                    "data": {
                      "type": "object",
                      "nullable": true
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/accounts/member/{memberId}": {
      "get": {
        "tags": [
          "Account"
        ],
        "summary": "Retrieves accounts for a specific member.",
        "description": "**Endpoint:** `GET /api/accounts/member/{memberId}`  \r\n \r\nFetches all accounts associated with a specific member by their unique identifier.  \r\n \r\n**Response Codes:**  \r\n| Status Code | Response Code | Description |  \r\n|------------|--------------|-------------|  \r\n| 200        | 00           | Accounts retrieved successfully | \r\n| 200        | 31           | No accounts found for the member |  \r\n| 422        | 14           | Invalid input (e.g., missing or incorrect memberId) |  \r\n| 500        | 09           | Exception occurred, contact developer |",
        "parameters": [
          {
            "name": "memberId",
            "in": "path",
            "description": "Unique identifier for the member.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/AccountDTOListSuccessDataResult"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AccountDTOListSuccessDataResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/AccountDTOListSuccessDataResult"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/StringErrorDataResult"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StringErrorDataResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/StringErrorDataResult"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Content",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/StringErrorDataResult"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StringErrorDataResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/StringErrorDataResult"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/StringErrorDataResult"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StringErrorDataResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/StringErrorDataResult"
                }
              }
            }
          },
          "404": {
            "description": "Not Found"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        }
      }
    },
    "/api/contributions": {
      "post": {
        "tags": [
          "Contribution"
        ],
        "summary": "Adds a new contribution (Monthly/Voluntary).",
        "description": "**Endpoint:** `POST /api/contributions`  \r\n \r\nAdds a new contribution for a member.  \r\n \r\n**Validation Requirements:**  \r\n- Contribution type must be valid  \r\n- Amount must be greater than zero  \r\n \r\n**Response Codes:**  \r\n| Status Code | Response Code | Description |  \r\n|------------|--------------|-------------|  \r\n| 200        | 00           | Contribution added successfully |  \r\n| 422        | 14           | Invalid input (e.g., missing or invalid fields) |  \r\n| 500        | 09           | Exception occurred, contact developer |",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ContributionRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/ContributionRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/ContributionRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ContributionDTOSuccessDataResult"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ContributionDTOSuccessDataResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ContributionDTOSuccessDataResult"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/StringErrorDataResult"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StringErrorDataResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/StringErrorDataResult"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Content",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/StringErrorDataResult"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StringErrorDataResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/StringErrorDataResult"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/StringErrorDataResult"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StringErrorDataResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/StringErrorDataResult"
                }
              }
            }
          },
          "404": {
            "description": "Not Found"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        }
      }
    },
    "/api/contributions/{id}": {
      "get": {
        "tags": [
          "Contribution"
        ],
        "summary": "Retrieves details of a specific contribution by ID.",
        "description": "**Endpoint:** `GET /api/contributions/{id}`  \r\n \r\nFetches details of a contribution by its unique identifier.  \r\n \r\n**Response Codes:**  \r\n| Status Code | Response Code | Description |  \r\n|------------|--------------|-------------|  \r\n| 200        | 00           | Contribution retrieved successfully |  \r\n| 404        | 31           | Contribution not found |  \r\n| 500        | 09           | Exception occurred, contact developer |",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ContributionDTOSuccessDataResult"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ContributionDTOSuccessDataResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ContributionDTOSuccessDataResult"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/StringErrorDataResult"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StringErrorDataResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/StringErrorDataResult"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/StringErrorDataResult"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StringErrorDataResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/StringErrorDataResult"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "ResponseCode": {
                      "type": "string",
                      "example": "00"
                    },
                    "ResponseDescription": {
                      "type": "string",
                      "example": "Request Successful."
                    },
                    "data": {
                      "type": "object",
                      "nullable": true
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/contributions/member/{memberId}": {
      "get": {
        "tags": [
          "Contribution"
        ],
        "summary": "Retrieves all contributions for a member.",
        "description": "**Endpoint:** `GET /api/contributions/member/{memberId}`  \r\n \r\nFetches all contributions made by a specific member.  \r\n \r\n**Response Codes:**  \r\n| Status Code | Response Code | Description |  \r\n|------------|--------------|-------------|  \r\n| 200        | 00           | Contributions retrieved successfully |  \r\n| 404        | 31           | Member contributions not found |  \r\n| 500        | 09           | Exception occurred, contact developer |",
        "parameters": [
          {
            "name": "memberId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ContributionDTOListSuccessDataResult"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ContributionDTOListSuccessDataResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ContributionDTOListSuccessDataResult"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/StringErrorDataResult"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StringErrorDataResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/StringErrorDataResult"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/StringErrorDataResult"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StringErrorDataResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/StringErrorDataResult"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "ResponseCode": {
                      "type": "string",
                      "example": "00"
                    },
                    "ResponseDescription": {
                      "type": "string",
                      "example": "Request Successful."
                    },
                    "data": {
                      "type": "object",
                      "nullable": true
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/contributions/summary/{memberId}": {
      "get": {
        "tags": [
          "Contribution"
        ],
        "summary": "Retrieves contribution summary for a member.",
        "description": "**Endpoint:** `GET /api/contributions/summary/{memberId}`  \r\n \r\nProvides a summary of contributions made by a specific member.  \r\n \r\n**Response Codes:**  \r\n| Status Code | Response Code | Description |  \r\n|------------|--------------|-------------|  \r\n| 200        | 00           | Contribution summary retrieved successfully |  \r\n| 404        | 31           | Contribution summary not found |  \r\n| 500        | 09           | Exception occurred, contact developer |",
        "parameters": [
          {
            "name": "memberId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ContributionDTOSuccessDataResult"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ContributionDTOSuccessDataResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ContributionDTOSuccessDataResult"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/StringErrorDataResult"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StringErrorDataResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/StringErrorDataResult"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/StringErrorDataResult"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StringErrorDataResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/StringErrorDataResult"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "ResponseCode": {
                      "type": "string",
                      "example": "00"
                    },
                    "ResponseDescription": {
                      "type": "string",
                      "example": "Request Successful."
                    },
                    "data": {
                      "type": "object",
                      "nullable": true
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/contributions/statements": {
      "get": {
        "tags": [
          "Contribution"
        ],
        "summary": "Generates contribution statements for members.",
        "description": "**Endpoint:** `GET /api/contributions/statements`  \r\n \r\nCreates and retrieves detailed contribution statements based on query parameters.  \r\n \r\n**Response Codes:**  \r\n| Status Code | Response Code | Description |  \r\n|------------|--------------|-------------|  \r\n| 200        | 00           | Statements generated successfully |  \r\n| 400        | 14           | Invalid input parameters |  \r\n| 500        | 09           | Exception occurred, contact developer |",
        "parameters": [
          {
            "name": "MemberId",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "StartDate",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "EndDate",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "Format",
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/StatementFormat"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              },
              "application/json": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              },
              "text/json": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/StringErrorDataResult"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StringErrorDataResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/StringErrorDataResult"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/StringErrorDataResult"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StringErrorDataResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/StringErrorDataResult"
                }
              }
            }
          },
          "404": {
            "description": "Not Found"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        }
      }
    },
    "/api/contributions/withdraw": {
      "post": {
        "tags": [
          "Contribution"
        ],
        "summary": "Processes a pension withdrawal for an eligible member.",
        "description": "**Endpoint:** `POST /api/contributions/withdraw`\r\n\r\nProcesses a withdrawal from a member's pension account after verifying:\r\n- Member eligibility (IsEligibleForBenefits flag)\r\n- Sufficient account balance\r\n- Valid withdrawal amount\r\n\r\n**Business Rules:**\r\n- Member must be marked as eligible for benefits\r\n- Withdrawal amount must be positive\r\n- Account must have sufficient balance\r\n- Updates account balance and creates transaction record\r\n\r\n**Response Codes:**\r\n| Status Code | Response Code | Description |\r\n|------------|--------------|-------------|\r\n| 200        | 00           | Withdrawal processed successfully |\r\n| 400        | 31           | Insufficient funds for withdrawal |\r\n| 403        | 30           | Member not eligible for benefits |\r\n| 404        | 19/20        | Member or account not found |\r\n| 422        | 14           | Invalid input (e.g., amount ≤ 0) |\r\n| 500        | 09           | System error, contact developer |",
        "requestBody": {
          "description": "Withdrawal request details",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/WithdrawalRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/WithdrawalRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/WithdrawalRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/WithdrawalResultSuccessDataResult"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WithdrawalResultSuccessDataResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/WithdrawalResultSuccessDataResult"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/StringErrorDataResult"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StringErrorDataResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/StringErrorDataResult"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/StringErrorDataResult"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StringErrorDataResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/StringErrorDataResult"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/StringErrorDataResult"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StringErrorDataResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/StringErrorDataResult"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Content",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/StringErrorDataResult"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StringErrorDataResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/StringErrorDataResult"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/StringErrorDataResult"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StringErrorDataResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/StringErrorDataResult"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/contributions/eligibility/{memberId}": {
      "get": {
        "tags": [
          "Contribution"
        ],
        "summary": "Checks if a member is eligible for pension benefits",
        "description": "**Endpoint:** `GET /api/contributions/eligibility/{memberId}`\r\n\r\nVerifies if a member meets all requirements to receive pension benefits.\r\n\r\n**Validation Rules:**\r\n- Minimum contribution period (configurable)\r\n- Minimum age requirement (configurable)\r\n- Account in good standing\r\n\r\n**Response Codes:**\r\n| Status Code | Response Code | Description |\r\n|------------|--------------|-------------|\r\n| 200        | 00           | Eligibility check completed |\r\n| 404        | 19           | Member not found |\r\n| 500        | 09           | System error |",
        "parameters": [
          {
            "name": "memberId",
            "in": "path",
            "description": "Member unique identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/EligibilityResultDTOSuccessDataResult"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EligibilityResultDTOSuccessDataResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/EligibilityResultDTOSuccessDataResult"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/StringErrorDataResult"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StringErrorDataResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/StringErrorDataResult"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/StringErrorDataResult"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StringErrorDataResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/StringErrorDataResult"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "ResponseCode": {
                      "type": "string",
                      "example": "00"
                    },
                    "ResponseDescription": {
                      "type": "string",
                      "example": "Request Successful."
                    },
                    "data": {
                      "type": "object",
                      "nullable": true
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/employers": {
      "post": {
        "tags": [
          "Employer"
        ],
        "summary": "Registers a new employer.",
        "description": "**Endpoint:** `POST /api/employers`  \r\n \r\nRegisters a new employer in the system.\r\n \r\n**Validation Requirements:**  \r\n- Company name is required (minimum 2 characters)  \r\n- Registration number is required and must be valid  \r\n- Active status must be specified  \r\n \r\n**Response Codes:**  \r\n| Status Code | Response Code | Description |  \r\n|------------|--------------|-------------|  \r\n| 200        | 00           | Employer registered successfully |  \r\n| 200        | 15           | Employer role assignment failed |  \r\n| 200        | 32           | Employer already exists |  \r\n| 200        | 16           | Employer creation failed |  \r\n| 422        | 14           | Invalid input (e.g., missing fields) |  \r\n| 500        | 09           | Exception occurred, contact developer |",
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "CompanyName": {
                    "type": "string"
                  },
                  "CompanyProfileImage": {
                    "type": "string",
                    "format": "binary"
                  },
                  "RegistrationNumber": {
                    "type": "string"
                  },
                  "TaxIdentificationNumber": {
                    "type": "string"
                  },
                  "Industry": {
                    "type": "string"
                  },
                  "ContactEmail": {
                    "type": "string"
                  },
                  "MemberId": {
                    "type": "string"
                  },
                  "ContactPhone": {
                    "type": "string"
                  },
                  "WebsiteUrl": {
                    "type": "string"
                  },
                  "Address": {
                    "type": "string"
                  },
                  "Country": {
                    "type": "string"
                  },
                  "State": {
                    "type": "string"
                  },
                  "City": {
                    "type": "string"
                  },
                  "NumberOfEmployees": {
                    "type": "integer",
                    "format": "int32"
                  },
                  "PensionContributionRate": {
                    "type": "number",
                    "format": "double"
                  },
                  "IsActive": {
                    "type": "boolean"
                  }
                }
              },
              "encoding": {
                "CompanyName": {
                  "style": "form"
                },
                "CompanyProfileImage": {
                  "style": "form"
                },
                "RegistrationNumber": {
                  "style": "form"
                },
                "TaxIdentificationNumber": {
                  "style": "form"
                },
                "Industry": {
                  "style": "form"
                },
                "ContactEmail": {
                  "style": "form"
                },
                "MemberId": {
                  "style": "form"
                },
                "ContactPhone": {
                  "style": "form"
                },
                "WebsiteUrl": {
                  "style": "form"
                },
                "Address": {
                  "style": "form"
                },
                "Country": {
                  "style": "form"
                },
                "State": {
                  "style": "form"
                },
                "City": {
                  "style": "form"
                },
                "NumberOfEmployees": {
                  "style": "form"
                },
                "PensionContributionRate": {
                  "style": "form"
                },
                "IsActive": {
                  "style": "form"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/StringSuccessDataResult"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StringSuccessDataResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/StringSuccessDataResult"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/StringErrorDataResult"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StringErrorDataResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/StringErrorDataResult"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/StringErrorDataResult"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StringErrorDataResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/StringErrorDataResult"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Content",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/StringErrorDataResult"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StringErrorDataResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/StringErrorDataResult"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/StringErrorDataResult"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StringErrorDataResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/StringErrorDataResult"
                }
              }
            }
          },
          "404": {
            "description": "Not Found"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        }
      },
      "get": {
        "tags": [
          "Employer"
        ],
        "summary": "Retrieves all employers.",
        "description": "**Endpoint:** `GET /api/employers`  \r\n \r\nFetches details of all employers with pagination.\r\n \r\n**Response Codes:**  \r\n| Status Code | Response Code | Description |  \r\n|------------|--------------|-------------|  \r\n| 200        | 00           | Employers retrieved successfully | \r\n| 200        | 31           | No employers found |  \r\n| 422        | 14           | Invalid input (e.g., missing fields) |  \r\n| 500        | 09           | Exception occurred, contact developer |",
        "parameters": [
          {
            "name": "pageIndex",
            "in": "query",
            "description": "The page index (starting from 1).",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "description": "The number of records per page.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/EmployerDTOPaginatedListSuccessDataResult"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EmployerDTOPaginatedListSuccessDataResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/EmployerDTOPaginatedListSuccessDataResult"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/StringErrorDataResult"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StringErrorDataResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/StringErrorDataResult"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/StringErrorDataResult"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StringErrorDataResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/StringErrorDataResult"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Content",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/StringErrorDataResult"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StringErrorDataResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/StringErrorDataResult"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/StringErrorDataResult"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StringErrorDataResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/StringErrorDataResult"
                }
              }
            }
          },
          "404": {
            "description": "Not Found"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        }
      }
    },
    "/api/employers/{employerId}": {
      "put": {
        "tags": [
          "Employer"
        ],
        "summary": "Updates an employer's records.",
        "description": "**Endpoint:** `PUT /api/employers/{employerId}`  \r\n \r\nUpdates the details of an existing employer.\r\n \r\n**Validation Requirements:**  \r\n- Company name is required (minimum 2 characters)  \r\n- Registration number is required and must be valid  \r\n- Active status must be specified  \r\n \r\n**Response Codes:**  \r\n| Status Code | Response Code | Description |  \r\n|------------|--------------|-------------|  \r\n| 200        | 00           | Employer updated successfully |  \r\n| 200        | 15           | Employer role assignment failed |  \r\n| 200        | 31           | Employer not found |  \r\n| 422        | 14           | Invalid input (e.g., missing fields) |  \r\n| 409        | 16           | Employer already exists |  \r\n| 500        | 09           | Exception occurred, contact developer |",
        "parameters": [
          {
            "name": "employerId",
            "in": "path",
            "description": "Existing employer unique Id.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "CompanyName": {
                    "type": "string"
                  },
                  "CompanyProfileImage": {
                    "type": "string",
                    "format": "binary"
                  },
                  "RegistrationNumber": {
                    "type": "string"
                  },
                  "TaxIdentificationNumber": {
                    "type": "string"
                  },
                  "Industry": {
                    "type": "string"
                  },
                  "ContactEmail": {
                    "type": "string"
                  },
                  "ContactPhone": {
                    "type": "string"
                  },
                  "WebsiteUrl": {
                    "type": "string"
                  },
                  "Address": {
                    "type": "string"
                  },
                  "Country": {
                    "type": "string"
                  },
                  "State": {
                    "type": "string"
                  },
                  "City": {
                    "type": "string"
                  },
                  "NumberOfEmployees": {
                    "type": "integer",
                    "format": "int32"
                  },
                  "PensionContributionRate": {
                    "type": "number",
                    "format": "double"
                  }
                }
              },
              "encoding": {
                "CompanyName": {
                  "style": "form"
                },
                "CompanyProfileImage": {
                  "style": "form"
                },
                "RegistrationNumber": {
                  "style": "form"
                },
                "TaxIdentificationNumber": {
                  "style": "form"
                },
                "Industry": {
                  "style": "form"
                },
                "ContactEmail": {
                  "style": "form"
                },
                "ContactPhone": {
                  "style": "form"
                },
                "WebsiteUrl": {
                  "style": "form"
                },
                "Address": {
                  "style": "form"
                },
                "Country": {
                  "style": "form"
                },
                "State": {
                  "style": "form"
                },
                "City": {
                  "style": "form"
                },
                "NumberOfEmployees": {
                  "style": "form"
                },
                "PensionContributionRate": {
                  "style": "form"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/StringSuccessDataResult"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StringSuccessDataResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/StringSuccessDataResult"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/StringErrorDataResult"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StringErrorDataResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/StringErrorDataResult"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/StringErrorDataResult"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StringErrorDataResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/StringErrorDataResult"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Content",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/StringErrorDataResult"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StringErrorDataResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/StringErrorDataResult"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/StringErrorDataResult"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StringErrorDataResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/StringErrorDataResult"
                }
              }
            }
          },
          "404": {
            "description": "Not Found"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        }
      },
      "get": {
        "tags": [
          "Employer"
        ],
        "summary": "Retrieves details for a specific employer.",
        "description": "**Endpoint:** `GET /api/employers/{employerId}`  \r\n \r\nFetches details of a specific employer by ID.\r\n \r\n**Response Codes:**  \r\n| Status Code | Response Code | Description |  \r\n|------------|--------------|-------------|  \r\n| 200        | 00           | Employer retrieved successfully | \r\n| 200        | 31           | Employer not found |  \r\n| 422        | 14           | Invalid input (e.g., missing fields) |  \r\n| 500        | 09           | Exception occurred, contact developer |",
        "parameters": [
          {
            "name": "employerId",
            "in": "path",
            "description": "Existing employer unique Id.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/EmployerDTOSuccessDataResult"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EmployerDTOSuccessDataResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/EmployerDTOSuccessDataResult"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/StringErrorDataResult"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StringErrorDataResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/StringErrorDataResult"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/StringErrorDataResult"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StringErrorDataResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/StringErrorDataResult"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Content",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/StringErrorDataResult"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StringErrorDataResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/StringErrorDataResult"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/StringErrorDataResult"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StringErrorDataResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/StringErrorDataResult"
                }
              }
            }
          },
          "404": {
            "description": "Not Found"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        }
      },
      "delete": {
        "tags": [
          "Employer"
        ],
        "summary": "Soft-deletes an employer.",
        "description": "**Endpoint:** `DELETE /api/employers/{employerId}`  \r\n \r\nMarks an employer as deleted (soft delete) in the system.\r\n \r\n**Response Codes:**  \r\n| Status Code | Response Code | Description |  \r\n|------------|--------------|-------------|  \r\n| 200        | 00           | Employer deleted successfully |  \r\n| 200        | 31           | Employer not found |  \r\n| 422        | 14           | Invalid input (e.g., missing fields) |  \r\n| 500        | 09           | Exception occurred, contact developer |",
        "parameters": [
          {
            "name": "employerId",
            "in": "path",
            "description": "Existing employer unique Id.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/StringSuccessDataResult"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StringSuccessDataResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/StringSuccessDataResult"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/StringErrorDataResult"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StringErrorDataResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/StringErrorDataResult"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/StringErrorDataResult"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StringErrorDataResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/StringErrorDataResult"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Content",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/StringErrorDataResult"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StringErrorDataResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/StringErrorDataResult"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/StringErrorDataResult"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StringErrorDataResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/StringErrorDataResult"
                }
              }
            }
          },
          "404": {
            "description": "Not Found"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        }
      }
    },
    "/api/employers/by-status": {
      "get": {
        "tags": [
          "Employer"
        ],
        "summary": "Retrieves employers by active status.",
        "description": "**Endpoint:** `GET /api/employers/by-status`  \r\n \r\nFetches details of employers filtered by active status.\r\n \r\n**Response Codes:**  \r\n| Status Code | Response Code | Description |  \r\n|------------|--------------|-------------|  \r\n| 200        | 00           | Employers retrieved successfully | \r\n| 200        | 31           | No employers found |  \r\n| 422        | 14           | Invalid input (e.g., missing fields) |  \r\n| 500        | 09           | Exception occurred, contact developer |",
        "parameters": [
          {
            "name": "isActive",
            "in": "query",
            "description": "Filter by active status (true/false)",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "pageIndex",
            "in": "query",
            "description": "The page index (starting from 1).",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "description": "The number of records per page.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/EmployerDTOPaginatedListSuccessDataResult"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EmployerDTOPaginatedListSuccessDataResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/EmployerDTOPaginatedListSuccessDataResult"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/StringErrorDataResult"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StringErrorDataResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/StringErrorDataResult"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/StringErrorDataResult"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StringErrorDataResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/StringErrorDataResult"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Content",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/StringErrorDataResult"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StringErrorDataResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/StringErrorDataResult"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/StringErrorDataResult"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StringErrorDataResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/StringErrorDataResult"
                }
              }
            }
          },
          "404": {
            "description": "Not Found"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        }
      }
    },
    "/api/member/register": {
      "post": {
        "tags": [
          "Member"
        ],
        "summary": "Registers a new member.",
        "description": "**Endpoint:** `POST /api/members/register`  \r\n \r\nRegisters a new member in the system.\r\n \r\n**Response Codes:**  \r\n| Status Code | Response Code | Description |  \r\n|------------|--------------|-------------|  \r\n| 200        | 00           | Member registered successfully |  \r\n| 200        | 15           | Member role assignment failed |  \r\n| 200        | 16           | Member creation failed |  \r\n| 422        | 14           | Invalid input (e.g., missing fields) |  \r\n| 409        | 16           | Member already exists |  \r\n| 500        | 09           | Exception occurred, contact developer |",
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "FirstName": {
                    "type": "string"
                  },
                  "LastName": {
                    "type": "string"
                  },
                  "NickName": {
                    "type": "string"
                  },
                  "ProfilePicture": {
                    "type": "string",
                    "format": "binary"
                  },
                  "DateOfBirth": {
                    "type": "string",
                    "format": "date-time"
                  },
                  "NationalIdentificationNumber": {
                    "type": "string"
                  },
                  "Address": {
                    "type": "string"
                  },
                  "PhoneNumber": {
                    "type": "string"
                  },
                  "Email": {
                    "type": "string"
                  },
                  "BankAccountNumber": {
                    "type": "string"
                  },
                  "BankName": {
                    "type": "string"
                  },
                  "Password": {
                    "type": "string"
                  },
                  "EmployerId": {
                    "type": "string"
                  },
                  "MembershipType": {
                    "$ref": "#/components/schemas/MembershipType"
                  }
                }
              },
              "encoding": {
                "FirstName": {
                  "style": "form"
                },
                "LastName": {
                  "style": "form"
                },
                "NickName": {
                  "style": "form"
                },
                "ProfilePicture": {
                  "style": "form"
                },
                "DateOfBirth": {
                  "style": "form"
                },
                "NationalIdentificationNumber": {
                  "style": "form"
                },
                "Address": {
                  "style": "form"
                },
                "PhoneNumber": {
                  "style": "form"
                },
                "Email": {
                  "style": "form"
                },
                "BankAccountNumber": {
                  "style": "form"
                },
                "BankName": {
                  "style": "form"
                },
                "Password": {
                  "style": "form"
                },
                "EmployerId": {
                  "style": "form"
                },
                "MembershipType": {
                  "style": "form"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/StringSuccessDataResult"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StringSuccessDataResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/StringSuccessDataResult"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/StringErrorDataResult"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StringErrorDataResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/StringErrorDataResult"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/StringErrorDataResult"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StringErrorDataResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/StringErrorDataResult"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Content",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/StringErrorDataResult"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StringErrorDataResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/StringErrorDataResult"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/StringErrorDataResult"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StringErrorDataResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/StringErrorDataResult"
                }
              }
            }
          },
          "404": {
            "description": "Not Found"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        }
      }
    },
    "/api/member/update": {
      "put": {
        "tags": [
          "Member"
        ],
        "summary": "Updates a member records.",
        "description": "**Endpoint:** `PUT /api/members/update`  \r\n \r\nUpdates the details of an existing member.\r\n \r\n**Response Codes:**  \r\n| Status Code | Response Code | Description |  \r\n|------------|--------------|-------------|  \r\n| 200        | 00           | Member updated successfully |  \r\n| 200        | 15           | Member role assignment failed |  \r\n| 200        | 19           | Member not found |  \r\n| 422        | 14           | Invalid input (e.g., missing fields) |  \r\n| 409        | 16           | Member already exists |  \r\n| 500        | 09           | Exception occurred, contact developer |",
        "parameters": [
          {
            "name": "memberId",
            "in": "query",
            "description": "Existing member unique Id.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "FirstName": {
                    "type": "string"
                  },
                  "LastName": {
                    "type": "string"
                  },
                  "NickName": {
                    "type": "string"
                  },
                  "ProfilePicture": {
                    "type": "string",
                    "format": "binary"
                  },
                  "DateOfBirth": {
                    "type": "string",
                    "format": "date-time"
                  },
                  "NationalIdentificationNumber": {
                    "type": "string"
                  },
                  "Address": {
                    "type": "string"
                  },
                  "PhoneNumber": {
                    "type": "string"
                  },
                  "Email": {
                    "type": "string"
                  },
                  "BankAccountNumber": {
                    "type": "string"
                  },
                  "BankName": {
                    "type": "string"
                  },
                  "Password": {
                    "type": "string"
                  },
                  "EmployerId": {
                    "type": "string"
                  },
                  "MembershipType": {
                    "$ref": "#/components/schemas/MembershipType"
                  }
                }
              },
              "encoding": {
                "FirstName": {
                  "style": "form"
                },
                "LastName": {
                  "style": "form"
                },
                "NickName": {
                  "style": "form"
                },
                "ProfilePicture": {
                  "style": "form"
                },
                "DateOfBirth": {
                  "style": "form"
                },
                "NationalIdentificationNumber": {
                  "style": "form"
                },
                "Address": {
                  "style": "form"
                },
                "PhoneNumber": {
                  "style": "form"
                },
                "Email": {
                  "style": "form"
                },
                "BankAccountNumber": {
                  "style": "form"
                },
                "BankName": {
                  "style": "form"
                },
                "Password": {
                  "style": "form"
                },
                "EmployerId": {
                  "style": "form"
                },
                "MembershipType": {
                  "style": "form"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/StringSuccessDataResult"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StringSuccessDataResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/StringSuccessDataResult"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/StringErrorDataResult"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StringErrorDataResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/StringErrorDataResult"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/StringErrorDataResult"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StringErrorDataResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/StringErrorDataResult"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Content",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/StringErrorDataResult"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StringErrorDataResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/StringErrorDataResult"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/StringErrorDataResult"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StringErrorDataResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/StringErrorDataResult"
                }
              }
            }
          },
          "404": {
            "description": "Not Found"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        }
      }
    },
    "/api/member": {
      "get": {
        "tags": [
          "Member"
        ],
        "summary": "Retrieves details for a specific member.",
        "description": "**Endpoint:** `GET /api/members/memberId`  \r\n \r\nFetches details of a specific member by ID.\r\n \r\n**Response Codes:**  \r\n| Status Code | Response Code | Description |  \r\n|------------|--------------|-------------|  \r\n| 200        | 00           | Member retrieved successfully | \r\n| 200        | 19           | Member not found |  \r\n| 422        | 14           | Invalid input (e.g., missing fields) |  \r\n| 500        | 09           | Exception occurred, contact developer |",
        "parameters": [
          {
            "name": "memberId",
            "in": "query",
            "description": "Existing member unique Id.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/MemberDTOSuccessDataResult"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MemberDTOSuccessDataResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/MemberDTOSuccessDataResult"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/StringErrorDataResult"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StringErrorDataResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/StringErrorDataResult"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/StringErrorDataResult"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StringErrorDataResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/StringErrorDataResult"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Content",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/StringErrorDataResult"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StringErrorDataResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/StringErrorDataResult"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/StringErrorDataResult"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StringErrorDataResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/StringErrorDataResult"
                }
              }
            }
          },
          "404": {
            "description": "Not Found"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        }
      },
      "delete": {
        "tags": [
          "Member"
        ],
        "summary": "Deletes a member records.",
        "description": "**Endpoint:** `DELETE /api/members/delete`  \r\n \r\nRemoves an existing member from the platform.\r\n \r\n**Response Codes:**  \r\n| Status Code | Response Code | Description |  \r\n|------------|--------------|-------------|  \r\n| 200        | 00           | Member updated successfully |  \r\n| 200        | 15           | Member role assignment failed |  \r\n| 200        | 19           | Member not found |  \r\n| 422        | 14           | Invalid input (e.g., missing fields) |  \r\n| 409        | 16           | Member already exists |  \r\n| 500        | 09           | Exception occurred, contact developer |",
        "parameters": [
          {
            "name": "memberId",
            "in": "query",
            "description": "Existing member unique Id.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/StringSuccessDataResult"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StringSuccessDataResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/StringSuccessDataResult"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/StringErrorDataResult"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StringErrorDataResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/StringErrorDataResult"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/StringErrorDataResult"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StringErrorDataResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/StringErrorDataResult"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Content",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/StringErrorDataResult"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StringErrorDataResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/StringErrorDataResult"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/StringErrorDataResult"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StringErrorDataResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/StringErrorDataResult"
                }
              }
            }
          },
          "404": {
            "description": "Not Found"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        }
      }
    },
    "/api/member/all": {
      "get": {
        "tags": [
          "Member"
        ],
        "summary": "Retrieves all members.",
        "description": "**Endpoint:** `GET /api/members/memberId`  \r\n \r\nFetches details of all members with pagination.\r\n \r\n**Response Codes:**  \r\n| Status Code | Response Code | Description |  \r\n|------------|--------------|-------------|  \r\n| 200        | 00           | Members retrieved successfully | \r\n| 200        | 19           | Member not found |  \r\n| 422        | 14           | Invalid input (e.g., missing fields) |  \r\n| 500        | 09           | Exception occurred, contact developer |",
        "parameters": [
          {
            "name": "pageIndex",
            "in": "query",
            "description": "The page index (starting from 1).",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "description": "The number of records per page.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/MemberDTOPaginatedListSuccessDataResult"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MemberDTOPaginatedListSuccessDataResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/MemberDTOPaginatedListSuccessDataResult"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/StringErrorDataResult"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StringErrorDataResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/StringErrorDataResult"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/StringErrorDataResult"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StringErrorDataResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/StringErrorDataResult"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Content",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/StringErrorDataResult"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StringErrorDataResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/StringErrorDataResult"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/StringErrorDataResult"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StringErrorDataResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/StringErrorDataResult"
                }
              }
            }
          },
          "404": {
            "description": "Not Found"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        }
      }
    },
    "/api/member/by-type": {
      "get": {
        "tags": [
          "Member"
        ],
        "summary": "Retrieves members by membership type.",
        "description": "**Endpoint:** `GET /api/members`  \r\n \r\nFetches details of specific member types.\r\n \r\n**Response Codes:**  \r\n| Status Code | Response Code | Description |  \r\n|------------|--------------|-------------|  \r\n| 200        | 00           | Members retrieved successfully | \r\n| 200        | 19           | Member not found |  \r\n| 422        | 14           | Invalid input (e.g., missing fields) |  \r\n| 500        | 09           | Exception occurred, contact developer |",
        "parameters": [
          {
            "name": "memberType",
            "in": "query",
            "description": "The membership type. Value is 1 for Empoyer, 2 for Employee and 3 for Individual",
            "schema": {
              "$ref": "#/components/schemas/MembershipType"
            }
          },
          {
            "name": "pageIndex",
            "in": "query",
            "description": "The page index (starting from 1).",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "description": "The number of records per page.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/MemberDTOPaginatedListSuccessDataResult"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MemberDTOPaginatedListSuccessDataResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/MemberDTOPaginatedListSuccessDataResult"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/StringErrorDataResult"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StringErrorDataResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/StringErrorDataResult"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/StringErrorDataResult"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StringErrorDataResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/StringErrorDataResult"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Content",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/StringErrorDataResult"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StringErrorDataResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/StringErrorDataResult"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/StringErrorDataResult"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StringErrorDataResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/StringErrorDataResult"
                }
              }
            }
          },
          "404": {
            "description": "Not Found"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "Account": {
        "type": "object",
        "properties": {
          "status": {
            "$ref": "#/components/schemas/Status"
          },
          "createdDate": {
            "type": "string",
            "format": "date-time"
          },
          "modifiedDate": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "deletedDate": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "accountId": {
            "type": "string",
            "nullable": true
          },
          "memberId": {
            "type": "string",
            "nullable": true
          },
          "employerId": {
            "type": "string",
            "nullable": true
          },
          "pensionAccountNumber": {
            "type": "string",
            "nullable": true
          },
          "accountType": {
            "$ref": "#/components/schemas/AccountType"
          },
          "totalContributions": {
            "type": "number",
            "format": "double"
          },
          "currentBalance": {
            "type": "number",
            "format": "double"
          },
          "isRestricted": {
            "type": "boolean"
          },
          "isClosed": {
            "type": "boolean"
          },
          "member": {
            "$ref": "#/components/schemas/Member"
          },
          "employer": {
            "$ref": "#/components/schemas/Employer"
          }
        },
        "additionalProperties": false
      },
      "AccountDTO": {
        "type": "object",
        "properties": {
          "pensionAccountId": {
            "type": "string",
            "nullable": true
          },
          "memberId": {
            "type": "string",
            "nullable": true
          },
          "employerId": {
            "type": "string",
            "nullable": true
          },
          "pensionAccountNumber": {
            "type": "string",
            "nullable": true
          },
          "accountType": {
            "$ref": "#/components/schemas/AccountType"
          },
          "balance": {
            "type": "number",
            "format": "double"
          },
          "isRestricted": {
            "type": "boolean"
          },
          "isClosed": {
            "type": "boolean"
          }
        },
        "additionalProperties": false
      },
      "AccountDTOListSuccessDataResult": {
        "type": "object",
        "properties": {
          "responseCode": {
            "type": "string",
            "nullable": true
          },
          "responseDescription": {
            "type": "string",
            "nullable": true
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AccountDTO"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "AccountDTOSuccessDataResult": {
        "type": "object",
        "properties": {
          "responseCode": {
            "type": "string",
            "nullable": true
          },
          "responseDescription": {
            "type": "string",
            "nullable": true
          },
          "data": {
            "$ref": "#/components/schemas/AccountDTO"
          }
        },
        "additionalProperties": false
      },
      "AccountType": {
        "enum": [
          1,
          2
        ],
        "type": "integer",
        "format": "int32"
      },
      "BenefitType": {
        "enum": [
          1,
          2,
          3
        ],
        "type": "integer",
        "format": "int32"
      },
      "ContributionDTO": {
        "type": "object",
        "properties": {
          "contributionId": {
            "type": "string",
            "nullable": true
          },
          "memberId": {
            "type": "string",
            "nullable": true
          },
          "memberName": {
            "type": "string",
            "nullable": true
          },
          "memberProfilePicture": {
            "type": "string",
            "nullable": true
          },
          "pensionAccountNumber": {
            "type": "string",
            "nullable": true
          },
          "amount": {
            "type": "number",
            "format": "double"
          },
          "contributionType": {
            "$ref": "#/components/schemas/ContributionType"
          },
          "contributionDate": {
            "type": "string",
            "format": "date-time"
          },
          "isValidated": {
            "type": "boolean"
          }
        },
        "additionalProperties": false
      },
      "ContributionDTOListSuccessDataResult": {
        "type": "object",
        "properties": {
          "responseCode": {
            "type": "string",
            "nullable": true
          },
          "responseDescription": {
            "type": "string",
            "nullable": true
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ContributionDTO"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ContributionDTOSuccessDataResult": {
        "type": "object",
        "properties": {
          "responseCode": {
            "type": "string",
            "nullable": true
          },
          "responseDescription": {
            "type": "string",
            "nullable": true
          },
          "data": {
            "$ref": "#/components/schemas/ContributionDTO"
          }
        },
        "additionalProperties": false
      },
      "ContributionRequest": {
        "type": "object",
        "properties": {
          "memberId": {
            "type": "string",
            "nullable": true
          },
          "accountType": {
            "$ref": "#/components/schemas/AccountType"
          },
          "amount": {
            "type": "number",
            "format": "double"
          },
          "contributionType": {
            "$ref": "#/components/schemas/ContributionType"
          }
        },
        "additionalProperties": false
      },
      "ContributionType": {
        "enum": [
          1,
          2
        ],
        "type": "integer",
        "format": "int32"
      },
      "EligibilityResultDTO": {
        "type": "object",
        "properties": {
          "memberId": {
            "type": "string",
            "nullable": true
          },
          "benefitType": {
            "$ref": "#/components/schemas/BenefitType"
          },
          "isEligible": {
            "type": "boolean"
          },
          "evaluationDate": {
            "type": "string",
            "format": "date-time"
          },
          "eligibilityDate": {
            "type": "string",
            "format": "date-time"
          },
          "passedRequirements": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          },
          "failedRequirements": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          },
          "summary": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          }
        },
        "additionalProperties": false
      },
      "EligibilityResultDTOSuccessDataResult": {
        "type": "object",
        "properties": {
          "responseCode": {
            "type": "string",
            "nullable": true
          },
          "responseDescription": {
            "type": "string",
            "nullable": true
          },
          "data": {
            "$ref": "#/components/schemas/EligibilityResultDTO"
          }
        },
        "additionalProperties": false
      },
      "Employer": {
        "type": "object",
        "properties": {
          "status": {
            "$ref": "#/components/schemas/Status"
          },
          "createdDate": {
            "type": "string",
            "format": "date-time"
          },
          "modifiedDate": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "deletedDate": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "employerId": {
            "type": "string",
            "nullable": true
          },
          "companyName": {
            "type": "string",
            "nullable": true
          },
          "companyProfileImage": {
            "type": "string",
            "nullable": true
          },
          "registrationNumber": {
            "type": "string",
            "nullable": true
          },
          "taxIdentificationNumber": {
            "type": "string",
            "nullable": true
          },
          "industry": {
            "type": "string",
            "nullable": true
          },
          "contactEmail": {
            "type": "string",
            "nullable": true
          },
          "contactPhone": {
            "type": "string",
            "nullable": true
          },
          "websiteUrl": {
            "type": "string",
            "nullable": true
          },
          "address": {
            "type": "string",
            "nullable": true
          },
          "country": {
            "type": "string",
            "nullable": true
          },
          "state": {
            "type": "string",
            "nullable": true
          },
          "city": {
            "type": "string",
            "nullable": true
          },
          "bankAccountNumber": {
            "type": "string",
            "nullable": true
          },
          "bankName": {
            "type": "string",
            "nullable": true
          },
          "numberOfEmployees": {
            "type": "integer",
            "format": "int32"
          },
          "pensionContributionRate": {
            "type": "number",
            "format": "double"
          },
          "isActive": {
            "type": "boolean"
          },
          "employees": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Member"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "EmployerDTO": {
        "type": "object",
        "properties": {
          "employerId": {
            "type": "string",
            "nullable": true
          },
          "companyName": {
            "type": "string",
            "nullable": true
          },
          "companyProfileImage": {
            "type": "string",
            "nullable": true
          },
          "registrationNumber": {
            "type": "string",
            "nullable": true
          },
          "taxIdentificationNumber": {
            "type": "string",
            "nullable": true
          },
          "industry": {
            "type": "string",
            "nullable": true
          },
          "contactEmail": {
            "type": "string",
            "nullable": true
          },
          "contactPhone": {
            "type": "string",
            "nullable": true
          },
          "websiteUrl": {
            "type": "string",
            "nullable": true
          },
          "address": {
            "type": "string",
            "nullable": true
          },
          "country": {
            "type": "string",
            "nullable": true
          },
          "state": {
            "type": "string",
            "nullable": true
          },
          "city": {
            "type": "string",
            "nullable": true
          },
          "bankAccountNumber": {
            "type": "string",
            "nullable": true
          },
          "bankName": {
            "type": "string",
            "nullable": true
          },
          "numberOfEmployees": {
            "type": "integer",
            "format": "int32"
          },
          "pensionContributionRate": {
            "type": "number",
            "format": "double"
          }
        },
        "additionalProperties": false
      },
      "EmployerDTOPaginatedList": {
        "type": "object",
        "properties": {
          "pageIndex": {
            "type": "integer",
            "format": "int32"
          },
          "totalPages": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "totalCount": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "_items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EmployerDTO"
            },
            "nullable": true
          },
          "hasPreviousPage": {
            "type": "boolean",
            "readOnly": true
          },
          "hasNextPage": {
            "type": "boolean",
            "readOnly": true
          }
        },
        "additionalProperties": false
      },
      "EmployerDTOPaginatedListSuccessDataResult": {
        "type": "object",
        "properties": {
          "responseCode": {
            "type": "string",
            "nullable": true
          },
          "responseDescription": {
            "type": "string",
            "nullable": true
          },
          "data": {
            "$ref": "#/components/schemas/EmployerDTOPaginatedList"
          }
        },
        "additionalProperties": false
      },
      "EmployerDTOSuccessDataResult": {
        "type": "object",
        "properties": {
          "responseCode": {
            "type": "string",
            "nullable": true
          },
          "responseDescription": {
            "type": "string",
            "nullable": true
          },
          "data": {
            "$ref": "#/components/schemas/EmployerDTO"
          }
        },
        "additionalProperties": false
      },
      "Member": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "nullable": true
          },
          "userName": {
            "type": "string",
            "nullable": true
          },
          "normalizedUserName": {
            "type": "string",
            "nullable": true
          },
          "email": {
            "type": "string",
            "nullable": true
          },
          "normalizedEmail": {
            "type": "string",
            "nullable": true
          },
          "emailConfirmed": {
            "type": "boolean"
          },
          "passwordHash": {
            "type": "string",
            "nullable": true
          },
          "securityStamp": {
            "type": "string",
            "nullable": true
          },
          "concurrencyStamp": {
            "type": "string",
            "nullable": true
          },
          "phoneNumber": {
            "type": "string",
            "nullable": true
          },
          "phoneNumberConfirmed": {
            "type": "boolean"
          },
          "twoFactorEnabled": {
            "type": "boolean"
          },
          "lockoutEnd": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "lockoutEnabled": {
            "type": "boolean"
          },
          "accessFailedCount": {
            "type": "integer",
            "format": "int32"
          },
          "firstName": {
            "type": "string",
            "nullable": true
          },
          "lastName": {
            "type": "string",
            "nullable": true
          },
          "nickName": {
            "type": "string",
            "nullable": true
          },
          "profilePicture": {
            "type": "string",
            "nullable": true
          },
          "dateOfBirth": {
            "type": "string",
            "format": "date-time"
          },
          "nationalIdentificationNumber": {
            "type": "string",
            "nullable": true
          },
          "address": {
            "type": "string",
            "nullable": true
          },
          "bankAccountNumber": {
            "type": "string",
            "nullable": true
          },
          "bankName": {
            "type": "string",
            "nullable": true
          },
          "refreshToken": {
            "type": "string",
            "nullable": true
          },
          "refreshTokenEndDate": {
            "type": "string",
            "format": "date-time"
          },
          "employerId": {
            "type": "string",
            "nullable": true
          },
          "employer": {
            "$ref": "#/components/schemas/Employer"
          },
          "isActive": {
            "type": "boolean"
          },
          "status": {
            "$ref": "#/components/schemas/Status"
          },
          "createdDate": {
            "type": "string",
            "format": "date-time"
          },
          "modifiedDate": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "deletedDate": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "membershipType": {
            "$ref": "#/components/schemas/MembershipType"
          },
          "isEligibleForBenefits": {
            "type": "boolean"
          },
          "accounts": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Account"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "MemberDTO": {
        "type": "object",
        "properties": {
          "memberId": {
            "type": "string",
            "nullable": true
          },
          "firstName": {
            "type": "string",
            "nullable": true
          },
          "lastName": {
            "type": "string",
            "nullable": true
          },
          "profilePicture": {
            "type": "string",
            "nullable": true
          },
          "role": {
            "type": "string",
            "nullable": true
          },
          "dateOfBirth": {
            "type": "string",
            "format": "date-time"
          },
          "nationalIdentificationNumber": {
            "type": "string",
            "nullable": true
          },
          "address": {
            "type": "string",
            "nullable": true
          },
          "bankAccountNumber": {
            "type": "string",
            "nullable": true
          },
          "bankName": {
            "type": "string",
            "nullable": true
          },
          "employerId": {
            "type": "string",
            "nullable": true
          },
          "employer": {
            "$ref": "#/components/schemas/Employer"
          },
          "isActive": {
            "type": "boolean"
          },
          "createdDate": {
            "type": "string",
            "format": "date-time"
          },
          "modifiedDate": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "deletedDate": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "membershipType": {
            "$ref": "#/components/schemas/MembershipType"
          },
          "totalContributions": {
            "type": "number",
            "format": "double"
          },
          "isEligibleForBenefits": {
            "type": "boolean"
          },
          "accounts": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Account"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "MemberDTOPaginatedList": {
        "type": "object",
        "properties": {
          "pageIndex": {
            "type": "integer",
            "format": "int32"
          },
          "totalPages": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "totalCount": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "_items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MemberDTO"
            },
            "nullable": true
          },
          "hasPreviousPage": {
            "type": "boolean",
            "readOnly": true
          },
          "hasNextPage": {
            "type": "boolean",
            "readOnly": true
          }
        },
        "additionalProperties": false
      },
      "MemberDTOPaginatedListSuccessDataResult": {
        "type": "object",
        "properties": {
          "responseCode": {
            "type": "string",
            "nullable": true
          },
          "responseDescription": {
            "type": "string",
            "nullable": true
          },
          "data": {
            "$ref": "#/components/schemas/MemberDTOPaginatedList"
          }
        },
        "additionalProperties": false
      },
      "MemberDTOSuccessDataResult": {
        "type": "object",
        "properties": {
          "responseCode": {
            "type": "string",
            "nullable": true
          },
          "responseDescription": {
            "type": "string",
            "nullable": true
          },
          "data": {
            "$ref": "#/components/schemas/MemberDTO"
          }
        },
        "additionalProperties": false
      },
      "MembershipType": {
        "enum": [
          1,
          2,
          3
        ],
        "type": "integer",
        "format": "int32"
      },
      "NewAccountRequest": {
        "type": "object",
        "properties": {
          "memberId": {
            "type": "string",
            "nullable": true
          },
          "accountType": {
            "$ref": "#/components/schemas/AccountType"
          }
        },
        "additionalProperties": false
      },
      "StatementFormat": {
        "enum": [
          1,
          2
        ],
        "type": "integer",
        "format": "int32"
      },
      "Status": {
        "enum": [
          1,
          2,
          3
        ],
        "type": "integer",
        "format": "int32"
      },
      "StringErrorDataResult": {
        "type": "object",
        "properties": {
          "responseCode": {
            "type": "string",
            "nullable": true
          },
          "responseDescription": {
            "type": "string",
            "nullable": true
          },
          "data": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "StringSuccessDataResult": {
        "type": "object",
        "properties": {
          "responseCode": {
            "type": "string",
            "nullable": true
          },
          "responseDescription": {
            "type": "string",
            "nullable": true
          },
          "data": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "WithdrawalRequest": {
        "required": [
          "accountType",
          "amount",
          "memberId"
        ],
        "type": "object",
        "properties": {
          "memberId": {
            "minLength": 1,
            "type": "string"
          },
          "amount": {
            "minimum": 0.01,
            "type": "number",
            "format": "double"
          },
          "accountType": {
            "$ref": "#/components/schemas/AccountType"
          },
          "notes": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "WithdrawalResult": {
        "type": "object",
        "properties": {
          "transactionId": {
            "type": "string",
            "nullable": true
          },
          "memberId": {
            "type": "string",
            "nullable": true
          },
          "amount": {
            "type": "number",
            "format": "double"
          },
          "newBalance": {
            "type": "number",
            "format": "double"
          },
          "processedDate": {
            "type": "string",
            "format": "date-time"
          }
        },
        "additionalProperties": false
      },
      "WithdrawalResultSuccessDataResult": {
        "type": "object",
        "properties": {
          "responseCode": {
            "type": "string",
            "nullable": true
          },
          "responseDescription": {
            "type": "string",
            "nullable": true
          },
          "data": {
            "$ref": "#/components/schemas/WithdrawalResult"
          }
        },
        "additionalProperties": false
      }
    },
    "securitySchemes": {
      "Bearer": {
        "type": "apiKey",
        "description": "JWT Authorization header using the Bearer scheme (Example: 'Bearer 12345abcdef')",
        "name": "Authorization",
        "in": "header"
      }
    }
  },
  "security": [
    {
      "Bearer": [ ]
    }
  ]
}' (Nullable = false) (Size = -1), @p12='{"Content-Type":["application/json;charset=utf-8"],"Date":["Fri, 28 Mar 2025 22:22:09 GMT"],"Server":["Kestrel"]}' (Nullable = false) (Size = 4000), @p13='2025-03-28T22:22:09.1646707Z', @p14='200', @p15='2025-03-28T22:22:09.1773362Z'], CommandType='"Text"', CommandTimeout='30']
SET IMPLICIT_TRANSACTIONS OFF;
SET NOCOUNT ON;
INSERT INTO [RequestResponseLogs] ([RequestResponseLogId], [ClientIp], [ExecutionTime], [HttpMethod], [MemberAgent], [MemberId], [QueryString], [RequestBody], [RequestHeaders], [RequestInitiatedAt], [RequestPath], [ResponseBody], [ResponseHeaders], [ResponseReceivedAt], [StatusCode], [Timestamp])
VALUES (@p0, @p1, @p2, @p3, @p4, @p5, @p6, @p7, @p8, @p9, @p10, @p11, @p12, @p13, @p14, @p15);
2025-03-28 15:22:09.318 -07:00 [INF] Request finished HTTP/2 GET https://localhost:7055/swagger/v1/swagger.json - 200 null application/json;charset=utf-8 395.9135ms
2025-03-28 15:22:45.087 -07:00 [INF] Request starting HTTP/2 GET https://localhost:7055/v1/swagger.json - null null
2025-03-28 15:22:47.897 -07:00 [INF] Executed DbCommand (8ms) [Parameters=[@p0='01JQFDKGJDVFSN8BQ02N6MTD3D' (Nullable = false) (Size = 50), @p1='::1' (Nullable = false) (Size = 4000), @p2='00:00:02.7703005', @p3='GET' (Nullable = false) (Size = 4000), @p4='' (Nullable = false) (Size = 4000), @p5='' (Nullable = false) (Size = 4000), @p6='' (Nullable = false) (Size = 4000), @p7='' (Nullable = false) (Size = 4000), @p8='{"Accept":["text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7"],"Host":["localhost:7055"],"User-Agent":["Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/134.0.0.0 Safari/537.36"],"Accept-Encoding":["gzip, deflate, br, zstd"],"Accept-Language":["en-US,en;q=0.9"],"Upgrade-Insecure-Requests":["1"],"sec-ch-ua":["\"Chromium\";v=\"134\", \"Not:A-Brand\";v=\"24\", \"Google Chrome\";v=\"134\""],"sec-ch-ua-mobile":["?0"],"sec-ch-ua-platform":["\"Windows\""],"sec-fetch-site":["none"],"sec-fetch-mode":["navigate"],"sec-fetch-user":["?1"],"sec-fetch-dest":["document"],"priority":["u=0, i"]}' (Nullable = false) (Size = 4000), @p9='2025-03-28T22:22:45.1124585Z', @p10='/v1/swagger.json' (Nullable = false) (Size = 4000), @p11='' (Nullable = false) (Size = 4000), @p12='{}' (Nullable = false) (Size = 4000), @p13='2025-03-28T22:22:47.8827612Z', @p14='404', @p15='2025-03-28T22:22:47.8852893Z'], CommandType='"Text"', CommandTimeout='30']
SET IMPLICIT_TRANSACTIONS OFF;
SET NOCOUNT ON;
INSERT INTO [RequestResponseLogs] ([RequestResponseLogId], [ClientIp], [ExecutionTime], [HttpMethod], [MemberAgent], [MemberId], [QueryString], [RequestBody], [RequestHeaders], [RequestInitiatedAt], [RequestPath], [ResponseBody], [ResponseHeaders], [ResponseReceivedAt], [StatusCode], [Timestamp])
VALUES (@p0, @p1, @p2, @p3, @p4, @p5, @p6, @p7, @p8, @p9, @p10, @p11, @p12, @p13, @p14, @p15);
2025-03-28 15:22:47.914 -07:00 [INF] Request finished HTTP/2 GET https://localhost:7055/v1/swagger.json - 404 0 null 2827.3151ms
2025-03-28 15:22:47.930 -07:00 [INF] Request reached the end of the middleware pipeline without being handled by application code. Request path: GET https://localhost:7055/v1/swagger.json, Response status code: 404
2025-03-28 15:23:19.427 -07:00 [INF] Request starting HTTP/2 GET https://localhost:7055/v1/swagger.json - null null
2025-03-28 15:23:19.466 -07:00 [INF] Executed DbCommand (4ms) [Parameters=[@p0='01JQFDMFD11AX5AGDAAT785E5W' (Nullable = false) (Size = 50), @p1='::1' (Nullable = false) (Size = 4000), @p2='00:00:00.0018147', @p3='GET' (Nullable = false) (Size = 4000), @p4='' (Nullable = false) (Size = 4000), @p5='' (Nullable = false) (Size = 4000), @p6='' (Nullable = false) (Size = 4000), @p7='' (Nullable = false) (Size = 4000), @p8='{"Accept":["text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7"],"Host":["localhost:7055"],"User-Agent":["Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/134.0.0.0 Safari/537.36"],"Accept-Encoding":["gzip, deflate, br, zstd"],"Accept-Language":["en-US,en;q=0.9"],"Cache-Control":["max-age=0"],"Upgrade-Insecure-Requests":["1"],"sec-ch-ua":["\"Chromium\";v=\"134\", \"Not:A-Brand\";v=\"24\", \"Google Chrome\";v=\"134\""],"sec-ch-ua-mobile":["?0"],"sec-ch-ua-platform":["\"Windows\""],"sec-fetch-site":["none"],"sec-fetch-mode":["navigate"],"sec-fetch-user":["?1"],"sec-fetch-dest":["document"],"priority":["u=0, i"]}' (Nullable = false) (Size = 4000), @p9='2025-03-28T22:23:19.4526142Z', @p10='/v1/swagger.json' (Nullable = false) (Size = 4000), @p11='' (Nullable = false) (Size = 4000), @p12='{}' (Nullable = false) (Size = 4000), @p13='2025-03-28T22:23:19.4544305Z', @p14='404', @p15='2025-03-28T22:23:19.4572452Z'], CommandType='"Text"', CommandTimeout='30']
SET IMPLICIT_TRANSACTIONS OFF;
SET NOCOUNT ON;
INSERT INTO [RequestResponseLogs] ([RequestResponseLogId], [ClientIp], [ExecutionTime], [HttpMethod], [MemberAgent], [MemberId], [QueryString], [RequestBody], [RequestHeaders], [RequestInitiatedAt], [RequestPath], [ResponseBody], [ResponseHeaders], [ResponseReceivedAt], [StatusCode], [Timestamp])
VALUES (@p0, @p1, @p2, @p3, @p4, @p5, @p6, @p7, @p8, @p9, @p10, @p11, @p12, @p13, @p14, @p15);
2025-03-28 15:23:19.478 -07:00 [INF] Request finished HTTP/2 GET https://localhost:7055/v1/swagger.json - 404 0 null 56.1897ms
2025-03-28 15:23:19.497 -07:00 [INF] Request reached the end of the middleware pipeline without being handled by application code. Request path: GET https://localhost:7055/v1/swagger.json, Response status code: 404
2025-03-28 15:23:20.725 -07:00 [INF] Request starting HTTP/2 GET https://localhost:7055/v1/swagger.json - null null
2025-03-28 15:23:20.755 -07:00 [INF] Executed DbCommand (5ms) [Parameters=[@p0='01JQFDMGND4H4MKZEG1K60BJ5E' (Nullable = false) (Size = 50), @p1='::1' (Nullable = false) (Size = 4000), @p2='00:00:00.0031774', @p3='GET' (Nullable = false) (Size = 4000), @p4='' (Nullable = false) (Size = 4000), @p5='' (Nullable = false) (Size = 4000), @p6='' (Nullable = false) (Size = 4000), @p7='' (Nullable = false) (Size = 4000), @p8='{"Accept":["text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7"],"Host":["localhost:7055"],"User-Agent":["Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/134.0.0.0 Safari/537.36"],"Accept-Encoding":["gzip, deflate, br, zstd"],"Accept-Language":["en-US,en;q=0.9"],"Cache-Control":["max-age=0"],"Upgrade-Insecure-Requests":["1"],"sec-ch-ua":["\"Chromium\";v=\"134\", \"Not:A-Brand\";v=\"24\", \"Google Chrome\";v=\"134\""],"sec-ch-ua-mobile":["?0"],"sec-ch-ua-platform":["\"Windows\""],"sec-fetch-site":["none"],"sec-fetch-mode":["navigate"],"sec-fetch-user":["?1"],"sec-fetch-dest":["document"],"priority":["u=0, i"]}' (Nullable = false) (Size = 4000), @p9='2025-03-28T22:23:20.7441091Z', @p10='/v1/swagger.json' (Nullable = false) (Size = 4000), @p11='' (Nullable = false) (Size = 4000), @p12='{}' (Nullable = false) (Size = 4000), @p13='2025-03-28T22:23:20.7472879Z', @p14='404', @p15='2025-03-28T22:23:20.7490547Z'], CommandType='"Text"', CommandTimeout='30']
SET IMPLICIT_TRANSACTIONS OFF;
SET NOCOUNT ON;
INSERT INTO [RequestResponseLogs] ([RequestResponseLogId], [ClientIp], [ExecutionTime], [HttpMethod], [MemberAgent], [MemberId], [QueryString], [RequestBody], [RequestHeaders], [RequestInitiatedAt], [RequestPath], [ResponseBody], [ResponseHeaders], [ResponseReceivedAt], [StatusCode], [Timestamp])
VALUES (@p0, @p1, @p2, @p3, @p4, @p5, @p6, @p7, @p8, @p9, @p10, @p11, @p12, @p13, @p14, @p15);
2025-03-28 15:23:20.766 -07:00 [INF] Request finished HTTP/2 GET https://localhost:7055/v1/swagger.json - 404 0 null 41.3648ms
2025-03-28 15:23:20.780 -07:00 [INF] Request reached the end of the middleware pipeline without being handled by application code. Request path: GET https://localhost:7055/v1/swagger.json, Response status code: 404
2025-03-28 15:23:44.295 -07:00 [INF] Request starting HTTP/2 GET https://localhost:7055/swagger.json - null null
2025-03-28 15:23:44.325 -07:00 [INF] Executed DbCommand (5ms) [Parameters=[@p0='01JQFDN7NVWM7DQC9WY8B6T8MX' (Nullable = false) (Size = 50), @p1='::1' (Nullable = false) (Size = 4000), @p2='00:00:00.0004181', @p3='GET' (Nullable = false) (Size = 4000), @p4='' (Nullable = false) (Size = 4000), @p5='' (Nullable = false) (Size = 4000), @p6='' (Nullable = false) (Size = 4000), @p7='' (Nullable = false) (Size = 4000), @p8='{"Accept":["text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7"],"Host":["localhost:7055"],"User-Agent":["Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/134.0.0.0 Safari/537.36"],"Accept-Encoding":["gzip, deflate, br, zstd"],"Accept-Language":["en-US,en;q=0.9"],"Upgrade-Insecure-Requests":["1"],"sec-ch-ua":["\"Chromium\";v=\"134\", \"Not:A-Brand\";v=\"24\", \"Google Chrome\";v=\"134\""],"sec-ch-ua-mobile":["?0"],"sec-ch-ua-platform":["\"Windows\""],"sec-fetch-site":["none"],"sec-fetch-mode":["navigate"],"sec-fetch-user":["?1"],"sec-fetch-dest":["document"],"priority":["u=0, i"]}' (Nullable = false) (Size = 4000), @p9='2025-03-28T22:23:44.3125926Z', @p10='/swagger.json' (Nullable = false) (Size = 4000), @p11='' (Nullable = false) (Size = 4000), @p12='{}' (Nullable = false) (Size = 4000), @p13='2025-03-28T22:23:44.3130124Z', @p14='404', @p15='2025-03-28T22:23:44.3158068Z'], CommandType='"Text"', CommandTimeout='30']
SET IMPLICIT_TRANSACTIONS OFF;
SET NOCOUNT ON;
INSERT INTO [RequestResponseLogs] ([RequestResponseLogId], [ClientIp], [ExecutionTime], [HttpMethod], [MemberAgent], [MemberId], [QueryString], [RequestBody], [RequestHeaders], [RequestInitiatedAt], [RequestPath], [ResponseBody], [ResponseHeaders], [ResponseReceivedAt], [StatusCode], [Timestamp])
VALUES (@p0, @p1, @p2, @p3, @p4, @p5, @p6, @p7, @p8, @p9, @p10, @p11, @p12, @p13, @p14, @p15);
2025-03-28 15:23:44.340 -07:00 [INF] Request finished HTTP/2 GET https://localhost:7055/swagger.json - 404 0 null 44.6379ms
2025-03-28 15:23:44.355 -07:00 [INF] Request reached the end of the middleware pipeline without being handled by application code. Request path: GET https://localhost:7055/swagger.json, Response status code: 404
2025-03-28 15:23:47.072 -07:00 [INF] Request starting HTTP/2 GET https://localhost:7055/swagger.json - null null
2025-03-28 15:23:47.106 -07:00 [INF] Executed DbCommand (4ms) [Parameters=[@p0='01JQFDNACV8JEXPSBNC87NKRZN' (Nullable = false) (Size = 50), @p1='::1' (Nullable = false) (Size = 4000), @p2='00:00:00.0002146', @p3='GET' (Nullable = false) (Size = 4000), @p4='' (Nullable = false) (Size = 4000), @p5='' (Nullable = false) (Size = 4000), @p6='' (Nullable = false) (Size = 4000), @p7='' (Nullable = false) (Size = 4000), @p8='{"Accept":["text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7"],"Host":["localhost:7055"],"User-Agent":["Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/134.0.0.0 Safari/537.36"],"Accept-Encoding":["gzip, deflate, br, zstd"],"Accept-Language":["en-US,en;q=0.9"],"Cache-Control":["max-age=0"],"Upgrade-Insecure-Requests":["1"],"sec-ch-ua":["\"Chromium\";v=\"134\", \"Not:A-Brand\";v=\"24\", \"Google Chrome\";v=\"134\""],"sec-ch-ua-mobile":["?0"],"sec-ch-ua-platform":["\"Windows\""],"sec-fetch-site":["none"],"sec-fetch-mode":["navigate"],"sec-fetch-user":["?1"],"sec-fetch-dest":["document"],"priority":["u=0, i"]}' (Nullable = false) (Size = 4000), @p9='2025-03-28T22:23:47.0966667Z', @p10='/swagger.json' (Nullable = false) (Size = 4000), @p11='' (Nullable = false) (Size = 4000), @p12='{}' (Nullable = false) (Size = 4000), @p13='2025-03-28T22:23:47.0968824Z', @p14='404', @p15='2025-03-28T22:23:47.0995962Z'], CommandType='"Text"', CommandTimeout='30']
SET IMPLICIT_TRANSACTIONS OFF;
SET NOCOUNT ON;
INSERT INTO [RequestResponseLogs] ([RequestResponseLogId], [ClientIp], [ExecutionTime], [HttpMethod], [MemberAgent], [MemberId], [QueryString], [RequestBody], [RequestHeaders], [RequestInitiatedAt], [RequestPath], [ResponseBody], [ResponseHeaders], [ResponseReceivedAt], [StatusCode], [Timestamp])
VALUES (@p0, @p1, @p2, @p3, @p4, @p5, @p6, @p7, @p8, @p9, @p10, @p11, @p12, @p13, @p14, @p15);
2025-03-28 15:23:47.117 -07:00 [INF] Request finished HTTP/2 GET https://localhost:7055/swagger.json - 404 0 null 45.1865ms
2025-03-28 15:23:47.136 -07:00 [INF] Request reached the end of the middleware pipeline without being handled by application code. Request path: GET https://localhost:7055/swagger.json, Response status code: 404
2025-03-28 15:25:25.565 -07:00 [INF] Starting failed transaction processing job
2025-03-28 15:25:25.565 -07:00 [INF] Starting interest calculation job
2025-03-28 15:25:25.572 -07:00 [INF] Retrieving failed transactions with less than 3 attempts
2025-03-28 15:25:25.575 -07:00 [INF] GetAccountsForInterestCalculationAsync called
2025-03-28 15:25:25.703 -07:00 [INF] Executed DbCommand (7ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT [t].[TransactionId], [t].[Amount], [t].[Attempts], [t].[ContributionId], [t].[CreatedDate], [t].[CreditAccountBankCode], [t].[CreditAccountId], [t].[DebitAccountBankCode], [t].[DebitAccountId], [t].[DeletedDate], [t].[Description], [t].[IsReversed], [t].[MemberId], [t].[ModifiedDate], [t].[ProcessedDate], [t].[ReferenceNumber], [t].[Status], [t].[TransactionDate], [t].[TransactionStatus], [t].[TransactionType]
FROM [Transactions] AS [t]
WHERE [t].[Status] <> 3 AND [t].[TransactionStatus] = 3 AND [t].[Attempts] < 3
2025-03-28 15:25:25.732 -07:00 [INF] Processed 0 failed transactions
2025-03-28 15:25:25.794 -07:00 [INF] Executed DbCommand (10ms) [Parameters=[@__p_0='5000' (Precision = 18) (Scale = 2)], CommandType='"Text"', CommandTimeout='30']
SELECT COUNT(*)
FROM [Accounts] AS [a]
WHERE [a].[Status] <> 3 AND [a].[CurrentBalance] >= @__p_0 AND [a].[Status] = 2
2025-03-28 15:25:25.823 -07:00 [WRN] The query uses a row limiting operator ('Skip'/'Take') without an 'OrderBy' operator. This may lead to unpredictable results. If the 'Distinct' operator is used after 'OrderBy', then make sure to use the 'OrderBy' operator after 'Distinct' as the ordering would otherwise get erased.
2025-03-28 15:25:25.829 -07:00 [WRN] The query uses a row limiting operator ('Skip'/'Take') without an 'OrderBy' operator. This may lead to unpredictable results. If the 'Distinct' operator is used after 'OrderBy', then make sure to use the 'OrderBy' operator after 'Distinct' as the ordering would otherwise get erased.
2025-03-28 15:25:25.871 -07:00 [INF] Executed DbCommand (4ms) [Parameters=[@__p_0='5000' (Precision = 18) (Scale = 2), @__p_1='0', @__p_2='1'], CommandType='"Text"', CommandTimeout='30']
SELECT [a].[AccountId], [a].[AccountType], [a].[CreatedDate], [a].[CurrentBalance], [a].[DeletedDate], [a].[EmployerId], [a].[IsClosed], [a].[IsRestricted], [a].[MemberId], [a].[ModifiedDate], [a].[PensionAccountNumber], [a].[Status], [a].[TotalContributions]
FROM [Accounts] AS [a]
WHERE [a].[Status] <> 3 AND [a].[CurrentBalance] >= @__p_0 AND [a].[Status] = 2
ORDER BY (SELECT 1)
OFFSET @__p_1 ROWS FETCH NEXT @__p_2 ROWS ONLY
2025-03-28 15:25:25.887 -07:00 [INF] Accounts for interest calculation retrieved successfully
2025-03-28 15:25:25.894 -07:00 [INF] Processed 0 accounts
2025-03-28 15:26:53.892 -07:00 [INF] Request starting HTTP/2 GET https://localhost:7055/swagger/v1/swagger.json - null null
2025-03-28 15:26:54.156 -07:00 [INF] Executed DbCommand (19ms) [Parameters=[@p0='01JQFDV11MGNWNGJ2CH1GA0J6E' (Nullable = false) (Size = 50), @p1='::1' (Nullable = false) (Size = 4000), @p2='00:00:00.1864387', @p3='GET' (Nullable = false) (Size = 4000), @p4='' (Nullable = false) (Size = 4000), @p5='' (Nullable = false) (Size = 4000), @p6='' (Nullable = false) (Size = 4000), @p7='' (Nullable = false) (Size = 4000), @p8='{"Accept":["text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7"],"Host":["localhost:7055"],"User-Agent":["Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/134.0.0.0 Safari/537.36"],"Accept-Encoding":["gzip, deflate, br, zstd"],"Accept-Language":["en-US,en;q=0.9,fr;q=0.8"],"Upgrade-Insecure-Requests":["1"],"sec-ch-ua":["\"Chromium\";v=\"134\", \"Not:A-Brand\";v=\"24\", \"Google Chrome\";v=\"134\""],"sec-ch-ua-mobile":["?0"],"sec-ch-ua-platform":["\"Windows\""],"sec-fetch-site":["none"],"sec-fetch-mode":["navigate"],"sec-fetch-user":["?1"],"sec-fetch-dest":["document"],"priority":["u=0, i"]}' (Nullable = false) (Size = 4000), @p9='2025-03-28T22:26:53.9354519Z', @p10='/swagger/v1/swagger.json' (Nullable = false) (Size = 4000), @p11='{
  "openapi": "3.0.4",
  "info": {
    "title": "NLPC PCMS",
    "description": "API documentation for NLPC PCMS system.",
    "termsOfService": "https://terms-of-service-url.com",
    "contact": {
      "name": "Pension Team",
      "url": "https://healthtriagen.com/contact",
      "email": "support@pcms.com"
    },
    "license": {
      "name": "MIT License",
      "url": "https://opensource.org/licenses/MIT"
    },
    "version": "v1"
  },
  "paths": {
    "/api/accounts": {
      "post": {
        "tags": [
          "Account"
        ],
        "summary": "Creates a new pension account.",
        "description": "**Endpoint:** `POST /api/accounts`  \r\n \r\nRegisters a new pension account for a member.\r\n \r\n**Validation Requirements:**  \r\n- Member ID is required and must be valid  \r\n- Account type 1 is for individual contribution account, while 2 is for employer sponsored contribution account  \r\n \r\n**Response Codes:**  \r\n| Status Code | Response Code | Description |  \r\n|------------|--------------|-------------|  \r\n| 200        | 00           | Account created successfully |  \r\n| 200        | 31           | Member not found |  \r\n| 422        | 14           | Invalid input (e.g., missing fields) |  \r\n| 500        | 09           | Exception occurred, contact developer |",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NewAccountRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/NewAccountRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/NewAccountRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/StringSuccessDataResult"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StringSuccessDataResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/StringSuccessDataResult"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Content",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/StringErrorDataResult"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StringErrorDataResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/StringErrorDataResult"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/StringErrorDataResult"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StringErrorDataResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/StringErrorDataResult"
                }
              }
            }
          },
          "404": {
            "description": "Not Found"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "ResponseCode": {
                      "type": "string",
                      "example": "00"
                    },
                    "ResponseDescription": {
                      "type": "string",
                      "example": "Request Successful."
                    },
                    "data": {
                      "type": "object",
                      "nullable": true
                    }
                  }
                }
              }
            }
          }
        }
      },
      "get": {
        "tags": [
          "Account"
        ],
        "summary": "Retrieves all accounts.",
        "description": "**Endpoint:** `GET /api/accounts`  \r\n \r\nFetches a list of all accounts.\r\n \r\n**Response Codes:**  \r\n| Status Code | Response Code | Description |  \r\n|------------|--------------|-------------|  \r\n| 200        | 00           | Accounts retrieved successfully |  \r\n| 200        | 31           | No accounts found |  \r\n| 500        | 09           | Exception occurred, contact developer |",
        "parameters": [
          {
            "name": "pageIndex",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/AccountDTOListSuccessDataResult"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AccountDTOListSuccessDataResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/AccountDTOListSuccessDataResult"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/StringErrorDataResult"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StringErrorDataResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/StringErrorDataResult"
                }
              }
            }
          },
          "404": {
            "description": "Not Found"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "ResponseCode": {
                      "type": "string",
                      "example": "00"
                    },
                    "ResponseDescription": {
                      "type": "string",
                      "example": "Request Successful."
                    },
                    "data": {
                      "type": "object",
                      "nullable": true
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/accounts/{accountId}": {
      "get": {
        "tags": [
          "Account"
        ],
        "summary": "Retrieves details of a specific account.",
        "description": "**Endpoint:** `GET /api/accounts/{accountId}`  \r\n \r\nFetches account details using the unique account ID.\r\n \r\n**Response Codes:**  \r\n| Status Code | Response Code | Description |  \r\n|------------|--------------|-------------|  \r\n| 200        | 00           | Account retrieved successfully |  \r\n| 200        | 31           | Account not found |  \r\n| 422        | 14           | Invalid input (e.g., missing fields) |  \r\n| 500        | 09           | Exception occurred, contact developer |",
        "parameters": [
          {
            "name": "accountId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/AccountDTOSuccessDataResult"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AccountDTOSuccessDataResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/AccountDTOSuccessDataResult"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Content",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/StringErrorDataResult"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StringErrorDataResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/StringErrorDataResult"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/StringErrorDataResult"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StringErrorDataResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/StringErrorDataResult"
                }
              }
            }
          },
          "404": {
            "description": "Not Found"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "ResponseCode": {
                      "type": "string",
                      "example": "00"
                    },
                    "ResponseDescription": {
                      "type": "string",
                      "example": "Request Successful."
                    },
                    "data": {
                      "type": "object",
                      "nullable": true
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/accounts/member/{memberId}": {
      "get": {
        "tags": [
          "Account"
        ],
        "summary": "Retrieves accounts for a specific member.",
        "description": "**Endpoint:** `GET /api/accounts/member/{memberId}`  \r\n \r\nFetches all accounts associated with a specific member by their unique identifier.  \r\n \r\n**Response Codes:**  \r\n| Status Code | Response Code | Description |  \r\n|------------|--------------|-------------|  \r\n| 200        | 00           | Accounts retrieved successfully | \r\n| 200        | 31           | No accounts found for the member |  \r\n| 422        | 14           | Invalid input (e.g., missing or incorrect memberId) |  \r\n| 500        | 09           | Exception occurred, contact developer |",
        "parameters": [
          {
            "name": "memberId",
            "in": "path",
            "description": "Unique identifier for the member.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/AccountDTOListSuccessDataResult"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AccountDTOListSuccessDataResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/AccountDTOListSuccessDataResult"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/StringErrorDataResult"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StringErrorDataResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/StringErrorDataResult"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Content",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/StringErrorDataResult"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StringErrorDataResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/StringErrorDataResult"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/StringErrorDataResult"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StringErrorDataResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/StringErrorDataResult"
                }
              }
            }
          },
          "404": {
            "description": "Not Found"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        }
      }
    },
    "/api/contributions": {
      "post": {
        "tags": [
          "Contribution"
        ],
        "summary": "Adds a new contribution (Monthly/Voluntary).",
        "description": "**Endpoint:** `POST /api/contributions`  \r\n \r\nAdds a new contribution for a member.  \r\n \r\n**Validation Requirements:**  \r\n- Contribution type must be valid  \r\n- Amount must be greater than zero  \r\n \r\n**Response Codes:**  \r\n| Status Code | Response Code | Description |  \r\n|------------|--------------|-------------|  \r\n| 200        | 00           | Contribution added successfully |  \r\n| 422        | 14           | Invalid input (e.g., missing or invalid fields) |  \r\n| 500        | 09           | Exception occurred, contact developer |",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ContributionRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/ContributionRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/ContributionRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ContributionDTOSuccessDataResult"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ContributionDTOSuccessDataResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ContributionDTOSuccessDataResult"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/StringErrorDataResult"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StringErrorDataResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/StringErrorDataResult"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Content",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/StringErrorDataResult"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StringErrorDataResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/StringErrorDataResult"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/StringErrorDataResult"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StringErrorDataResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/StringErrorDataResult"
                }
              }
            }
          },
          "404": {
            "description": "Not Found"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        }
      }
    },
    "/api/contributions/{id}": {
      "get": {
        "tags": [
          "Contribution"
        ],
        "summary": "Retrieves details of a specific contribution by ID.",
        "description": "**Endpoint:** `GET /api/contributions/{id}`  \r\n \r\nFetches details of a contribution by its unique identifier.  \r\n \r\n**Response Codes:**  \r\n| Status Code | Response Code | Description |  \r\n|------------|--------------|-------------|  \r\n| 200        | 00           | Contribution retrieved successfully |  \r\n| 404        | 31           | Contribution not found |  \r\n| 500        | 09           | Exception occurred, contact developer |",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ContributionDTOSuccessDataResult"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ContributionDTOSuccessDataResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ContributionDTOSuccessDataResult"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/StringErrorDataResult"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StringErrorDataResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/StringErrorDataResult"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/StringErrorDataResult"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StringErrorDataResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/StringErrorDataResult"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "ResponseCode": {
                      "type": "string",
                      "example": "00"
                    },
                    "ResponseDescription": {
                      "type": "string",
                      "example": "Request Successful."
                    },
                    "data": {
                      "type": "object",
                      "nullable": true
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/contributions/member/{memberId}": {
      "get": {
        "tags": [
          "Contribution"
        ],
        "summary": "Retrieves all contributions for a member.",
        "description": "**Endpoint:** `GET /api/contributions/member/{memberId}`  \r\n \r\nFetches all contributions made by a specific member.  \r\n \r\n**Response Codes:**  \r\n| Status Code | Response Code | Description |  \r\n|------------|--------------|-------------|  \r\n| 200        | 00           | Contributions retrieved successfully |  \r\n| 404        | 31           | Member contributions not found |  \r\n| 500        | 09           | Exception occurred, contact developer |",
        "parameters": [
          {
            "name": "memberId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ContributionDTOListSuccessDataResult"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ContributionDTOListSuccessDataResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ContributionDTOListSuccessDataResult"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/StringErrorDataResult"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StringErrorDataResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/StringErrorDataResult"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/StringErrorDataResult"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StringErrorDataResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/StringErrorDataResult"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "ResponseCode": {
                      "type": "string",
                      "example": "00"
                    },
                    "ResponseDescription": {
                      "type": "string",
                      "example": "Request Successful."
                    },
                    "data": {
                      "type": "object",
                      "nullable": true
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/contributions/summary/{memberId}": {
      "get": {
        "tags": [
          "Contribution"
        ],
        "summary": "Retrieves contribution summary for a member.",
        "description": "**Endpoint:** `GET /api/contributions/summary/{memberId}`  \r\n \r\nProvides a summary of contributions made by a specific member.  \r\n \r\n**Response Codes:**  \r\n| Status Code | Response Code | Description |  \r\n|------------|--------------|-------------|  \r\n| 200        | 00           | Contribution summary retrieved successfully |  \r\n| 404        | 31           | Contribution summary not found |  \r\n| 500        | 09           | Exception occurred, contact developer |",
        "parameters": [
          {
            "name": "memberId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ContributionDTOSuccessDataResult"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ContributionDTOSuccessDataResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ContributionDTOSuccessDataResult"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/StringErrorDataResult"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StringErrorDataResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/StringErrorDataResult"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/StringErrorDataResult"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StringErrorDataResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/StringErrorDataResult"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "ResponseCode": {
                      "type": "string",
                      "example": "00"
                    },
                    "ResponseDescription": {
                      "type": "string",
                      "example": "Request Successful."
                    },
                    "data": {
                      "type": "object",
                      "nullable": true
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/contributions/statements": {
      "get": {
        "tags": [
          "Contribution"
        ],
        "summary": "Generates contribution statements for members.",
        "description": "**Endpoint:** `GET /api/contributions/statements`  \r\n \r\nCreates and retrieves detailed contribution statements based on query parameters.  \r\n \r\n**Response Codes:**  \r\n| Status Code | Response Code | Description |  \r\n|------------|--------------|-------------|  \r\n| 200        | 00           | Statements generated successfully |  \r\n| 400        | 14           | Invalid input parameters |  \r\n| 500        | 09           | Exception occurred, contact developer |",
        "parameters": [
          {
            "name": "MemberId",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "StartDate",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "EndDate",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "Format",
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/StatementFormat"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              },
              "application/json": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              },
              "text/json": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/StringErrorDataResult"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StringErrorDataResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/StringErrorDataResult"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/StringErrorDataResult"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StringErrorDataResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/StringErrorDataResult"
                }
              }
            }
          },
          "404": {
            "description": "Not Found"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        }
      }
    },
    "/api/contributions/withdraw": {
      "post": {
        "tags": [
          "Contribution"
        ],
        "summary": "Processes a pension withdrawal for an eligible member.",
        "description": "**Endpoint:** `POST /api/contributions/withdraw`\r\n\r\nProcesses a withdrawal from a member's pension account after verifying:\r\n- Member eligibility (IsEligibleForBenefits flag)\r\n- Sufficient account balance\r\n- Valid withdrawal amount\r\n\r\n**Business Rules:**\r\n- Member must be marked as eligible for benefits\r\n- Withdrawal amount must be positive\r\n- Account must have sufficient balance\r\n- Updates account balance and creates transaction record\r\n\r\n**Response Codes:**\r\n| Status Code | Response Code | Description |\r\n|------------|--------------|-------------|\r\n| 200        | 00           | Withdrawal processed successfully |\r\n| 400        | 31           | Insufficient funds for withdrawal |\r\n| 403        | 30           | Member not eligible for benefits |\r\n| 404        | 19/20        | Member or account not found |\r\n| 422        | 14           | Invalid input (e.g., amount ≤ 0) |\r\n| 500        | 09           | System error, contact developer |",
        "requestBody": {
          "description": "Withdrawal request details",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/WithdrawalRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/WithdrawalRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/WithdrawalRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/WithdrawalResultSuccessDataResult"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WithdrawalResultSuccessDataResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/WithdrawalResultSuccessDataResult"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/StringErrorDataResult"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StringErrorDataResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/StringErrorDataResult"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/StringErrorDataResult"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StringErrorDataResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/StringErrorDataResult"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/StringErrorDataResult"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StringErrorDataResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/StringErrorDataResult"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Content",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/StringErrorDataResult"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StringErrorDataResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/StringErrorDataResult"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/StringErrorDataResult"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StringErrorDataResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/StringErrorDataResult"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/contributions/eligibility/{memberId}": {
      "get": {
        "tags": [
          "Contribution"
        ],
        "summary": "Checks if a member is eligible for pension benefits",
        "description": "**Endpoint:** `GET /api/contributions/eligibility/{memberId}`\r\n\r\nVerifies if a member meets all requirements to receive pension benefits.\r\n\r\n**Validation Rules:**\r\n- Minimum contribution period (configurable)\r\n- Minimum age requirement (configurable)\r\n- Account in good standing\r\n\r\n**Response Codes:**\r\n| Status Code | Response Code | Description |\r\n|------------|--------------|-------------|\r\n| 200        | 00           | Eligibility check completed |\r\n| 404        | 19           | Member not found |\r\n| 500        | 09           | System error |",
        "parameters": [
          {
            "name": "memberId",
            "in": "path",
            "description": "Member unique identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/EligibilityResultDTOSuccessDataResult"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EligibilityResultDTOSuccessDataResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/EligibilityResultDTOSuccessDataResult"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/StringErrorDataResult"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StringErrorDataResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/StringErrorDataResult"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/StringErrorDataResult"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StringErrorDataResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/StringErrorDataResult"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "ResponseCode": {
                      "type": "string",
                      "example": "00"
                    },
                    "ResponseDescription": {
                      "type": "string",
                      "example": "Request Successful."
                    },
                    "data": {
                      "type": "object",
                      "nullable": true
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/employers": {
      "post": {
        "tags": [
          "Employer"
        ],
        "summary": "Registers a new employer.",
        "description": "**Endpoint:** `POST /api/employers`  \r\n \r\nRegisters a new employer in the system.\r\n \r\n**Validation Requirements:**  \r\n- Company name is required (minimum 2 characters)  \r\n- Registration number is required and must be valid  \r\n- Active status must be specified  \r\n \r\n**Response Codes:**  \r\n| Status Code | Response Code | Description |  \r\n|------------|--------------|-------------|  \r\n| 200        | 00           | Employer registered successfully |  \r\n| 200        | 15           | Employer role assignment failed |  \r\n| 200        | 32           | Employer already exists |  \r\n| 200        | 16           | Employer creation failed |  \r\n| 422        | 14           | Invalid input (e.g., missing fields) |  \r\n| 500        | 09           | Exception occurred, contact developer |",
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "CompanyName": {
                    "type": "string"
                  },
                  "CompanyProfileImage": {
                    "type": "string",
                    "format": "binary"
                  },
                  "RegistrationNumber": {
                    "type": "string"
                  },
                  "TaxIdentificationNumber": {
                    "type": "string"
                  },
                  "Industry": {
                    "type": "string"
                  },
                  "ContactEmail": {
                    "type": "string"
                  },
                  "MemberId": {
                    "type": "string"
                  },
                  "ContactPhone": {
                    "type": "string"
                  },
                  "WebsiteUrl": {
                    "type": "string"
                  },
                  "Address": {
                    "type": "string"
                  },
                  "Country": {
                    "type": "string"
                  },
                  "State": {
                    "type": "string"
                  },
                  "City": {
                    "type": "string"
                  },
                  "NumberOfEmployees": {
                    "type": "integer",
                    "format": "int32"
                  },
                  "PensionContributionRate": {
                    "type": "number",
                    "format": "double"
                  },
                  "IsActive": {
                    "type": "boolean"
                  }
                }
              },
              "encoding": {
                "CompanyName": {
                  "style": "form"
                },
                "CompanyProfileImage": {
                  "style": "form"
                },
                "RegistrationNumber": {
                  "style": "form"
                },
                "TaxIdentificationNumber": {
                  "style": "form"
                },
                "Industry": {
                  "style": "form"
                },
                "ContactEmail": {
                  "style": "form"
                },
                "MemberId": {
                  "style": "form"
                },
                "ContactPhone": {
                  "style": "form"
                },
                "WebsiteUrl": {
                  "style": "form"
                },
                "Address": {
                  "style": "form"
                },
                "Country": {
                  "style": "form"
                },
                "State": {
                  "style": "form"
                },
                "City": {
                  "style": "form"
                },
                "NumberOfEmployees": {
                  "style": "form"
                },
                "PensionContributionRate": {
                  "style": "form"
                },
                "IsActive": {
                  "style": "form"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/StringSuccessDataResult"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StringSuccessDataResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/StringSuccessDataResult"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/StringErrorDataResult"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StringErrorDataResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/StringErrorDataResult"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/StringErrorDataResult"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StringErrorDataResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/StringErrorDataResult"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Content",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/StringErrorDataResult"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StringErrorDataResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/StringErrorDataResult"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/StringErrorDataResult"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StringErrorDataResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/StringErrorDataResult"
                }
              }
            }
          },
          "404": {
            "description": "Not Found"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        }
      },
      "get": {
        "tags": [
          "Employer"
        ],
        "summary": "Retrieves all employers.",
        "description": "**Endpoint:** `GET /api/employers`  \r\n \r\nFetches details of all employers with pagination.\r\n \r\n**Response Codes:**  \r\n| Status Code | Response Code | Description |  \r\n|------------|--------------|-------------|  \r\n| 200        | 00           | Employers retrieved successfully | \r\n| 200        | 31           | No employers found |  \r\n| 422        | 14           | Invalid input (e.g., missing fields) |  \r\n| 500        | 09           | Exception occurred, contact developer |",
        "parameters": [
          {
            "name": "pageIndex",
            "in": "query",
            "description": "The page index (starting from 1).",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "description": "The number of records per page.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/EmployerDTOPaginatedListSuccessDataResult"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EmployerDTOPaginatedListSuccessDataResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/EmployerDTOPaginatedListSuccessDataResult"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/StringErrorDataResult"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StringErrorDataResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/StringErrorDataResult"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/StringErrorDataResult"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StringErrorDataResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/StringErrorDataResult"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Content",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/StringErrorDataResult"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StringErrorDataResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/StringErrorDataResult"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/StringErrorDataResult"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StringErrorDataResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/StringErrorDataResult"
                }
              }
            }
          },
          "404": {
            "description": "Not Found"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        }
      }
    },
    "/api/employers/{employerId}": {
      "put": {
        "tags": [
          "Employer"
        ],
        "summary": "Updates an employer's records.",
        "description": "**Endpoint:** `PUT /api/employers/{employerId}`  \r\n \r\nUpdates the details of an existing employer.\r\n \r\n**Validation Requirements:**  \r\n- Company name is required (minimum 2 characters)  \r\n- Registration number is required and must be valid  \r\n- Active status must be specified  \r\n \r\n**Response Codes:**  \r\n| Status Code | Response Code | Description |  \r\n|------------|--------------|-------------|  \r\n| 200        | 00           | Employer updated successfully |  \r\n| 200        | 15           | Employer role assignment failed |  \r\n| 200        | 31           | Employer not found |  \r\n| 422        | 14           | Invalid input (e.g., missing fields) |  \r\n| 409        | 16           | Employer already exists |  \r\n| 500        | 09           | Exception occurred, contact developer |",
        "parameters": [
          {
            "name": "employerId",
            "in": "path",
            "description": "Existing employer unique Id.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "CompanyName": {
                    "type": "string"
                  },
                  "CompanyProfileImage": {
                    "type": "string",
                    "format": "binary"
                  },
                  "RegistrationNumber": {
                    "type": "string"
                  },
                  "TaxIdentificationNumber": {
                    "type": "string"
                  },
                  "Industry": {
                    "type": "string"
                  },
                  "ContactEmail": {
                    "type": "string"
                  },
                  "ContactPhone": {
                    "type": "string"
                  },
                  "WebsiteUrl": {
                    "type": "string"
                  },
                  "Address": {
                    "type": "string"
                  },
                  "Country": {
                    "type": "string"
                  },
                  "State": {
                    "type": "string"
                  },
                  "City": {
                    "type": "string"
                  },
                  "NumberOfEmployees": {
                    "type": "integer",
                    "format": "int32"
                  },
                  "PensionContributionRate": {
                    "type": "number",
                    "format": "double"
                  }
                }
              },
              "encoding": {
                "CompanyName": {
                  "style": "form"
                },
                "CompanyProfileImage": {
                  "style": "form"
                },
                "RegistrationNumber": {
                  "style": "form"
                },
                "TaxIdentificationNumber": {
                  "style": "form"
                },
                "Industry": {
                  "style": "form"
                },
                "ContactEmail": {
                  "style": "form"
                },
                "ContactPhone": {
                  "style": "form"
                },
                "WebsiteUrl": {
                  "style": "form"
                },
                "Address": {
                  "style": "form"
                },
                "Country": {
                  "style": "form"
                },
                "State": {
                  "style": "form"
                },
                "City": {
                  "style": "form"
                },
                "NumberOfEmployees": {
                  "style": "form"
                },
                "PensionContributionRate": {
                  "style": "form"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/StringSuccessDataResult"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StringSuccessDataResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/StringSuccessDataResult"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/StringErrorDataResult"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StringErrorDataResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/StringErrorDataResult"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/StringErrorDataResult"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StringErrorDataResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/StringErrorDataResult"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Content",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/StringErrorDataResult"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StringErrorDataResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/StringErrorDataResult"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/StringErrorDataResult"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StringErrorDataResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/StringErrorDataResult"
                }
              }
            }
          },
          "404": {
            "description": "Not Found"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        }
      },
      "get": {
        "tags": [
          "Employer"
        ],
        "summary": "Retrieves details for a specific employer.",
        "description": "**Endpoint:** `GET /api/employers/{employerId}`  \r\n \r\nFetches details of a specific employer by ID.\r\n \r\n**Response Codes:**  \r\n| Status Code | Response Code | Description |  \r\n|------------|--------------|-------------|  \r\n| 200        | 00           | Employer retrieved successfully | \r\n| 200        | 31           | Employer not found |  \r\n| 422        | 14           | Invalid input (e.g., missing fields) |  \r\n| 500        | 09           | Exception occurred, contact developer |",
        "parameters": [
          {
            "name": "employerId",
            "in": "path",
            "description": "Existing employer unique Id.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/EmployerDTOSuccessDataResult"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EmployerDTOSuccessDataResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/EmployerDTOSuccessDataResult"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/StringErrorDataResult"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StringErrorDataResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/StringErrorDataResult"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/StringErrorDataResult"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StringErrorDataResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/StringErrorDataResult"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Content",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/StringErrorDataResult"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StringErrorDataResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/StringErrorDataResult"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/StringErrorDataResult"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StringErrorDataResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/StringErrorDataResult"
                }
              }
            }
          },
          "404": {
            "description": "Not Found"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        }
      },
      "delete": {
        "tags": [
          "Employer"
        ],
        "summary": "Soft-deletes an employer.",
        "description": "**Endpoint:** `DELETE /api/employers/{employerId}`  \r\n \r\nMarks an employer as deleted (soft delete) in the system.\r\n \r\n**Response Codes:**  \r\n| Status Code | Response Code | Description |  \r\n|------------|--------------|-------------|  \r\n| 200        | 00           | Employer deleted successfully |  \r\n| 200        | 31           | Employer not found |  \r\n| 422        | 14           | Invalid input (e.g., missing fields) |  \r\n| 500        | 09           | Exception occurred, contact developer |",
        "parameters": [
          {
            "name": "employerId",
            "in": "path",
            "description": "Existing employer unique Id.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/StringSuccessDataResult"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StringSuccessDataResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/StringSuccessDataResult"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/StringErrorDataResult"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StringErrorDataResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/StringErrorDataResult"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/StringErrorDataResult"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StringErrorDataResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/StringErrorDataResult"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Content",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/StringErrorDataResult"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StringErrorDataResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/StringErrorDataResult"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/StringErrorDataResult"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StringErrorDataResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/StringErrorDataResult"
                }
              }
            }
          },
          "404": {
            "description": "Not Found"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        }
      }
    },
    "/api/employers/by-status": {
      "get": {
        "tags": [
          "Employer"
        ],
        "summary": "Retrieves employers by active status.",
        "description": "**Endpoint:** `GET /api/employers/by-status`  \r\n \r\nFetches details of employers filtered by active status.\r\n \r\n**Response Codes:**  \r\n| Status Code | Response Code | Description |  \r\n|------------|--------------|-------------|  \r\n| 200        | 00           | Employers retrieved successfully | \r\n| 200        | 31           | No employers found |  \r\n| 422        | 14           | Invalid input (e.g., missing fields) |  \r\n| 500        | 09           | Exception occurred, contact developer |",
        "parameters": [
          {
            "name": "isActive",
            "in": "query",
            "description": "Filter by active status (true/false)",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "pageIndex",
            "in": "query",
            "description": "The page index (starting from 1).",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "description": "The number of records per page.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/EmployerDTOPaginatedListSuccessDataResult"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EmployerDTOPaginatedListSuccessDataResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/EmployerDTOPaginatedListSuccessDataResult"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/StringErrorDataResult"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StringErrorDataResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/StringErrorDataResult"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/StringErrorDataResult"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StringErrorDataResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/StringErrorDataResult"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Content",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/StringErrorDataResult"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StringErrorDataResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/StringErrorDataResult"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/StringErrorDataResult"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StringErrorDataResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/StringErrorDataResult"
                }
              }
            }
          },
          "404": {
            "description": "Not Found"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        }
      }
    },
    "/api/member/register": {
      "post": {
        "tags": [
          "Member"
        ],
        "summary": "Registers a new member.",
        "description": "**Endpoint:** `POST /api/members/register`  \r\n \r\nRegisters a new member in the system.\r\n \r\n**Response Codes:**  \r\n| Status Code | Response Code | Description |  \r\n|------------|--------------|-------------|  \r\n| 200        | 00           | Member registered successfully |  \r\n| 200        | 15           | Member role assignment failed |  \r\n| 200        | 16           | Member creation failed |  \r\n| 422        | 14           | Invalid input (e.g., missing fields) |  \r\n| 409        | 16           | Member already exists |  \r\n| 500        | 09           | Exception occurred, contact developer |",
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "FirstName": {
                    "type": "string"
                  },
                  "LastName": {
                    "type": "string"
                  },
                  "NickName": {
                    "type": "string"
                  },
                  "ProfilePicture": {
                    "type": "string",
                    "format": "binary"
                  },
                  "DateOfBirth": {
                    "type": "string",
                    "format": "date-time"
                  },
                  "NationalIdentificationNumber": {
                    "type": "string"
                  },
                  "Address": {
                    "type": "string"
                  },
                  "PhoneNumber": {
                    "type": "string"
                  },
                  "Email": {
                    "type": "string"
                  },
                  "BankAccountNumber": {
                    "type": "string"
                  },
                  "BankName": {
                    "type": "string"
                  },
                  "Password": {
                    "type": "string"
                  },
                  "EmployerId": {
                    "type": "string"
                  },
                  "MembershipType": {
                    "$ref": "#/components/schemas/MembershipType"
                  }
                }
              },
              "encoding": {
                "FirstName": {
                  "style": "form"
                },
                "LastName": {
                  "style": "form"
                },
                "NickName": {
                  "style": "form"
                },
                "ProfilePicture": {
                  "style": "form"
                },
                "DateOfBirth": {
                  "style": "form"
                },
                "NationalIdentificationNumber": {
                  "style": "form"
                },
                "Address": {
                  "style": "form"
                },
                "PhoneNumber": {
                  "style": "form"
                },
                "Email": {
                  "style": "form"
                },
                "BankAccountNumber": {
                  "style": "form"
                },
                "BankName": {
                  "style": "form"
                },
                "Password": {
                  "style": "form"
                },
                "EmployerId": {
                  "style": "form"
                },
                "MembershipType": {
                  "style": "form"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/StringSuccessDataResult"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StringSuccessDataResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/StringSuccessDataResult"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/StringErrorDataResult"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StringErrorDataResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/StringErrorDataResult"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/StringErrorDataResult"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StringErrorDataResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/StringErrorDataResult"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Content",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/StringErrorDataResult"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StringErrorDataResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/StringErrorDataResult"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/StringErrorDataResult"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StringErrorDataResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/StringErrorDataResult"
                }
              }
            }
          },
          "404": {
            "description": "Not Found"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        }
      }
    },
    "/api/member/update": {
      "put": {
        "tags": [
          "Member"
        ],
        "summary": "Updates a member records.",
        "description": "**Endpoint:** `PUT /api/members/update`  \r\n \r\nUpdates the details of an existing member.\r\n \r\n**Response Codes:**  \r\n| Status Code | Response Code | Description |  \r\n|------------|--------------|-------------|  \r\n| 200        | 00           | Member updated successfully |  \r\n| 200        | 15           | Member role assignment failed |  \r\n| 200        | 19           | Member not found |  \r\n| 422        | 14           | Invalid input (e.g., missing fields) |  \r\n| 409        | 16           | Member already exists |  \r\n| 500        | 09           | Exception occurred, contact developer |",
        "parameters": [
          {
            "name": "memberId",
            "in": "query",
            "description": "Existing member unique Id.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "FirstName": {
                    "type": "string"
                  },
                  "LastName": {
                    "type": "string"
                  },
                  "NickName": {
                    "type": "string"
                  },
                  "ProfilePicture": {
                    "type": "string",
                    "format": "binary"
                  },
                  "DateOfBirth": {
                    "type": "string",
                    "format": "date-time"
                  },
                  "NationalIdentificationNumber": {
                    "type": "string"
                  },
                  "Address": {
                    "type": "string"
                  },
                  "PhoneNumber": {
                    "type": "string"
                  },
                  "Email": {
                    "type": "string"
                  },
                  "BankAccountNumber": {
                    "type": "string"
                  },
                  "BankName": {
                    "type": "string"
                  },
                  "Password": {
                    "type": "string"
                  },
                  "EmployerId": {
                    "type": "string"
                  },
                  "MembershipType": {
                    "$ref": "#/components/schemas/MembershipType"
                  }
                }
              },
              "encoding": {
                "FirstName": {
                  "style": "form"
                },
                "LastName": {
                  "style": "form"
                },
                "NickName": {
                  "style": "form"
                },
                "ProfilePicture": {
                  "style": "form"
                },
                "DateOfBirth": {
                  "style": "form"
                },
                "NationalIdentificationNumber": {
                  "style": "form"
                },
                "Address": {
                  "style": "form"
                },
                "PhoneNumber": {
                  "style": "form"
                },
                "Email": {
                  "style": "form"
                },
                "BankAccountNumber": {
                  "style": "form"
                },
                "BankName": {
                  "style": "form"
                },
                "Password": {
                  "style": "form"
                },
                "EmployerId": {
                  "style": "form"
                },
                "MembershipType": {
                  "style": "form"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/StringSuccessDataResult"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StringSuccessDataResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/StringSuccessDataResult"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/StringErrorDataResult"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StringErrorDataResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/StringErrorDataResult"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/StringErrorDataResult"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StringErrorDataResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/StringErrorDataResult"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Content",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/StringErrorDataResult"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StringErrorDataResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/StringErrorDataResult"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/StringErrorDataResult"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StringErrorDataResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/StringErrorDataResult"
                }
              }
            }
          },
          "404": {
            "description": "Not Found"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        }
      }
    },
    "/api/member": {
      "get": {
        "tags": [
          "Member"
        ],
        "summary": "Retrieves details for a specific member.",
        "description": "**Endpoint:** `GET /api/members/memberId`  \r\n \r\nFetches details of a specific member by ID.\r\n \r\n**Response Codes:**  \r\n| Status Code | Response Code | Description |  \r\n|------------|--------------|-------------|  \r\n| 200        | 00           | Member retrieved successfully | \r\n| 200        | 19           | Member not found |  \r\n| 422        | 14           | Invalid input (e.g., missing fields) |  \r\n| 500        | 09           | Exception occurred, contact developer |",
        "parameters": [
          {
            "name": "memberId",
            "in": "query",
            "description": "Existing member unique Id.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/MemberDTOSuccessDataResult"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MemberDTOSuccessDataResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/MemberDTOSuccessDataResult"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/StringErrorDataResult"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StringErrorDataResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/StringErrorDataResult"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/StringErrorDataResult"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StringErrorDataResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/StringErrorDataResult"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Content",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/StringErrorDataResult"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StringErrorDataResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/StringErrorDataResult"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/StringErrorDataResult"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StringErrorDataResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/StringErrorDataResult"
                }
              }
            }
          },
          "404": {
            "description": "Not Found"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        }
      },
      "delete": {
        "tags": [
          "Member"
        ],
        "summary": "Deletes a member records.",
        "description": "**Endpoint:** `DELETE /api/members/delete`  \r\n \r\nRemoves an existing member from the platform.\r\n \r\n**Response Codes:**  \r\n| Status Code | Response Code | Description |  \r\n|------------|--------------|-------------|  \r\n| 200        | 00           | Member updated successfully |  \r\n| 200        | 15           | Member role assignment failed |  \r\n| 200        | 19           | Member not found |  \r\n| 422        | 14           | Invalid input (e.g., missing fields) |  \r\n| 409        | 16           | Member already exists |  \r\n| 500        | 09           | Exception occurred, contact developer |",
        "parameters": [
          {
            "name": "memberId",
            "in": "query",
            "description": "Existing member unique Id.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/StringSuccessDataResult"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StringSuccessDataResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/StringSuccessDataResult"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/StringErrorDataResult"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StringErrorDataResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/StringErrorDataResult"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/StringErrorDataResult"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StringErrorDataResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/StringErrorDataResult"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Content",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/StringErrorDataResult"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StringErrorDataResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/StringErrorDataResult"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/StringErrorDataResult"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StringErrorDataResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/StringErrorDataResult"
                }
              }
            }
          },
          "404": {
            "description": "Not Found"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        }
      }
    },
    "/api/member/all": {
      "get": {
        "tags": [
          "Member"
        ],
        "summary": "Retrieves all members.",
        "description": "**Endpoint:** `GET /api/members/memberId`  \r\n \r\nFetches details of all members with pagination.\r\n \r\n**Response Codes:**  \r\n| Status Code | Response Code | Description |  \r\n|------------|--------------|-------------|  \r\n| 200        | 00           | Members retrieved successfully | \r\n| 200        | 19           | Member not found |  \r\n| 422        | 14           | Invalid input (e.g., missing fields) |  \r\n| 500        | 09           | Exception occurred, contact developer |",
        "parameters": [
          {
            "name": "pageIndex",
            "in": "query",
            "description": "The page index (starting from 1).",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "description": "The number of records per page.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/MemberDTOPaginatedListSuccessDataResult"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MemberDTOPaginatedListSuccessDataResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/MemberDTOPaginatedListSuccessDataResult"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/StringErrorDataResult"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StringErrorDataResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/StringErrorDataResult"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/StringErrorDataResult"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StringErrorDataResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/StringErrorDataResult"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Content",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/StringErrorDataResult"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StringErrorDataResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/StringErrorDataResult"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/StringErrorDataResult"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StringErrorDataResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/StringErrorDataResult"
                }
              }
            }
          },
          "404": {
            "description": "Not Found"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        }
      }
    },
    "/api/member/by-type": {
      "get": {
        "tags": [
          "Member"
        ],
        "summary": "Retrieves members by membership type.",
        "description": "**Endpoint:** `GET /api/members`  \r\n \r\nFetches details of specific member types.\r\n \r\n**Response Codes:**  \r\n| Status Code | Response Code | Description |  \r\n|------------|--------------|-------------|  \r\n| 200        | 00           | Members retrieved successfully | \r\n| 200        | 19           | Member not found |  \r\n| 422        | 14           | Invalid input (e.g., missing fields) |  \r\n| 500        | 09           | Exception occurred, contact developer |",
        "parameters": [
          {
            "name": "memberType",
            "in": "query",
            "description": "The membership type. Value is 1 for Empoyer, 2 for Employee and 3 for Individual",
            "schema": {
              "$ref": "#/components/schemas/MembershipType"
            }
          },
          {
            "name": "pageIndex",
            "in": "query",
            "description": "The page index (starting from 1).",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "description": "The number of records per page.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/MemberDTOPaginatedListSuccessDataResult"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MemberDTOPaginatedListSuccessDataResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/MemberDTOPaginatedListSuccessDataResult"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/StringErrorDataResult"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StringErrorDataResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/StringErrorDataResult"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/StringErrorDataResult"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StringErrorDataResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/StringErrorDataResult"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Content",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/StringErrorDataResult"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StringErrorDataResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/StringErrorDataResult"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/StringErrorDataResult"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StringErrorDataResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/StringErrorDataResult"
                }
              }
            }
          },
          "404": {
            "description": "Not Found"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "Account": {
        "type": "object",
        "properties": {
          "status": {
            "$ref": "#/components/schemas/Status"
          },
          "createdDate": {
            "type": "string",
            "format": "date-time"
          },
          "modifiedDate": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "deletedDate": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "accountId": {
            "type": "string",
            "nullable": true
          },
          "memberId": {
            "type": "string",
            "nullable": true
          },
          "employerId": {
            "type": "string",
            "nullable": true
          },
          "pensionAccountNumber": {
            "type": "string",
            "nullable": true
          },
          "accountType": {
            "$ref": "#/components/schemas/AccountType"
          },
          "totalContributions": {
            "type": "number",
            "format": "double"
          },
          "currentBalance": {
            "type": "number",
            "format": "double"
          },
          "isRestricted": {
            "type": "boolean"
          },
          "isClosed": {
            "type": "boolean"
          },
          "member": {
            "$ref": "#/components/schemas/Member"
          },
          "employer": {
            "$ref": "#/components/schemas/Employer"
          }
        },
        "additionalProperties": false
      },
      "AccountDTO": {
        "type": "object",
        "properties": {
          "pensionAccountId": {
            "type": "string",
            "nullable": true
          },
          "memberId": {
            "type": "string",
            "nullable": true
          },
          "employerId": {
            "type": "string",
            "nullable": true
          },
          "pensionAccountNumber": {
            "type": "string",
            "nullable": true
          },
          "accountType": {
            "$ref": "#/components/schemas/AccountType"
          },
          "balance": {
            "type": "number",
            "format": "double"
          },
          "isRestricted": {
            "type": "boolean"
          },
          "isClosed": {
            "type": "boolean"
          }
        },
        "additionalProperties": false
      },
      "AccountDTOListSuccessDataResult": {
        "type": "object",
        "properties": {
          "responseCode": {
            "type": "string",
            "nullable": true
          },
          "responseDescription": {
            "type": "string",
            "nullable": true
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AccountDTO"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "AccountDTOSuccessDataResult": {
        "type": "object",
        "properties": {
          "responseCode": {
            "type": "string",
            "nullable": true
          },
          "responseDescription": {
            "type": "string",
            "nullable": true
          },
          "data": {
            "$ref": "#/components/schemas/AccountDTO"
          }
        },
        "additionalProperties": false
      },
      "AccountType": {
        "enum": [
          1,
          2
        ],
        "type": "integer",
        "format": "int32"
      },
      "BenefitType": {
        "enum": [
          1,
          2,
          3
        ],
        "type": "integer",
        "format": "int32"
      },
      "ContributionDTO": {
        "type": "object",
        "properties": {
          "contributionId": {
            "type": "string",
            "nullable": true
          },
          "memberId": {
            "type": "string",
            "nullable": true
          },
          "memberName": {
            "type": "string",
            "nullable": true
          },
          "memberProfilePicture": {
            "type": "string",
            "nullable": true
          },
          "pensionAccountNumber": {
            "type": "string",
            "nullable": true
          },
          "amount": {
            "type": "number",
            "format": "double"
          },
          "contributionType": {
            "$ref": "#/components/schemas/ContributionType"
          },
          "contributionDate": {
            "type": "string",
            "format": "date-time"
          },
          "isValidated": {
            "type": "boolean"
          }
        },
        "additionalProperties": false
      },
      "ContributionDTOListSuccessDataResult": {
        "type": "object",
        "properties": {
          "responseCode": {
            "type": "string",
            "nullable": true
          },
          "responseDescription": {
            "type": "string",
            "nullable": true
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ContributionDTO"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ContributionDTOSuccessDataResult": {
        "type": "object",
        "properties": {
          "responseCode": {
            "type": "string",
            "nullable": true
          },
          "responseDescription": {
            "type": "string",
            "nullable": true
          },
          "data": {
            "$ref": "#/components/schemas/ContributionDTO"
          }
        },
        "additionalProperties": false
      },
      "ContributionRequest": {
        "type": "object",
        "properties": {
          "memberId": {
            "type": "string",
            "nullable": true
          },
          "accountType": {
            "$ref": "#/components/schemas/AccountType"
          },
          "amount": {
            "type": "number",
            "format": "double"
          },
          "contributionType": {
            "$ref": "#/components/schemas/ContributionType"
          }
        },
        "additionalProperties": false
      },
      "ContributionType": {
        "enum": [
          1,
          2
        ],
        "type": "integer",
        "format": "int32"
      },
      "EligibilityResultDTO": {
        "type": "object",
        "properties": {
          "memberId": {
            "type": "string",
            "nullable": true
          },
          "benefitType": {
            "$ref": "#/components/schemas/BenefitType"
          },
          "isEligible": {
            "type": "boolean"
          },
          "evaluationDate": {
            "type": "string",
            "format": "date-time"
          },
          "eligibilityDate": {
            "type": "string",
            "format": "date-time"
          },
          "passedRequirements": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          },
          "failedRequirements": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          },
          "summary": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          }
        },
        "additionalProperties": false
      },
      "EligibilityResultDTOSuccessDataResult": {
        "type": "object",
        "properties": {
          "responseCode": {
            "type": "string",
            "nullable": true
          },
          "responseDescription": {
            "type": "string",
            "nullable": true
          },
          "data": {
            "$ref": "#/components/schemas/EligibilityResultDTO"
          }
        },
        "additionalProperties": false
      },
      "Employer": {
        "type": "object",
        "properties": {
          "status": {
            "$ref": "#/components/schemas/Status"
          },
          "createdDate": {
            "type": "string",
            "format": "date-time"
          },
          "modifiedDate": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "deletedDate": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "employerId": {
            "type": "string",
            "nullable": true
          },
          "companyName": {
            "type": "string",
            "nullable": true
          },
          "companyProfileImage": {
            "type": "string",
            "nullable": true
          },
          "registrationNumber": {
            "type": "string",
            "nullable": true
          },
          "taxIdentificationNumber": {
            "type": "string",
            "nullable": true
          },
          "industry": {
            "type": "string",
            "nullable": true
          },
          "contactEmail": {
            "type": "string",
            "nullable": true
          },
          "contactPhone": {
            "type": "string",
            "nullable": true
          },
          "websiteUrl": {
            "type": "string",
            "nullable": true
          },
          "address": {
            "type": "string",
            "nullable": true
          },
          "country": {
            "type": "string",
            "nullable": true
          },
          "state": {
            "type": "string",
            "nullable": true
          },
          "city": {
            "type": "string",
            "nullable": true
          },
          "bankAccountNumber": {
            "type": "string",
            "nullable": true
          },
          "bankName": {
            "type": "string",
            "nullable": true
          },
          "numberOfEmployees": {
            "type": "integer",
            "format": "int32"
          },
          "pensionContributionRate": {
            "type": "number",
            "format": "double"
          },
          "isActive": {
            "type": "boolean"
          },
          "employees": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Member"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "EmployerDTO": {
        "type": "object",
        "properties": {
          "employerId": {
            "type": "string",
            "nullable": true
          },
          "companyName": {
            "type": "string",
            "nullable": true
          },
          "companyProfileImage": {
            "type": "string",
            "nullable": true
          },
          "registrationNumber": {
            "type": "string",
            "nullable": true
          },
          "taxIdentificationNumber": {
            "type": "string",
            "nullable": true
          },
          "industry": {
            "type": "string",
            "nullable": true
          },
          "contactEmail": {
            "type": "string",
            "nullable": true
          },
          "contactPhone": {
            "type": "string",
            "nullable": true
          },
          "websiteUrl": {
            "type": "string",
            "nullable": true
          },
          "address": {
            "type": "string",
            "nullable": true
          },
          "country": {
            "type": "string",
            "nullable": true
          },
          "state": {
            "type": "string",
            "nullable": true
          },
          "city": {
            "type": "string",
            "nullable": true
          },
          "bankAccountNumber": {
            "type": "string",
            "nullable": true
          },
          "bankName": {
            "type": "string",
            "nullable": true
          },
          "numberOfEmployees": {
            "type": "integer",
            "format": "int32"
          },
          "pensionContributionRate": {
            "type": "number",
            "format": "double"
          }
        },
        "additionalProperties": false
      },
      "EmployerDTOPaginatedList": {
        "type": "object",
        "properties": {
          "pageIndex": {
            "type": "integer",
            "format": "int32"
          },
          "totalPages": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "totalCount": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "_items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EmployerDTO"
            },
            "nullable": true
          },
          "hasPreviousPage": {
            "type": "boolean",
            "readOnly": true
          },
          "hasNextPage": {
            "type": "boolean",
            "readOnly": true
          }
        },
        "additionalProperties": false
      },
      "EmployerDTOPaginatedListSuccessDataResult": {
        "type": "object",
        "properties": {
          "responseCode": {
            "type": "string",
            "nullable": true
          },
          "responseDescription": {
            "type": "string",
            "nullable": true
          },
          "data": {
            "$ref": "#/components/schemas/EmployerDTOPaginatedList"
          }
        },
        "additionalProperties": false
      },
      "EmployerDTOSuccessDataResult": {
        "type": "object",
        "properties": {
          "responseCode": {
            "type": "string",
            "nullable": true
          },
          "responseDescription": {
            "type": "string",
            "nullable": true
          },
          "data": {
            "$ref": "#/components/schemas/EmployerDTO"
          }
        },
        "additionalProperties": false
      },
      "Member": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "nullable": true
          },
          "userName": {
            "type": "string",
            "nullable": true
          },
          "normalizedUserName": {
            "type": "string",
            "nullable": true
          },
          "email": {
            "type": "string",
            "nullable": true
          },
          "normalizedEmail": {
            "type": "string",
            "nullable": true
          },
          "emailConfirmed": {
            "type": "boolean"
          },
          "passwordHash": {
            "type": "string",
            "nullable": true
          },
          "securityStamp": {
            "type": "string",
            "nullable": true
          },
          "concurrencyStamp": {
            "type": "string",
            "nullable": true
          },
          "phoneNumber": {
            "type": "string",
            "nullable": true
          },
          "phoneNumberConfirmed": {
            "type": "boolean"
          },
          "twoFactorEnabled": {
            "type": "boolean"
          },
          "lockoutEnd": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "lockoutEnabled": {
            "type": "boolean"
          },
          "accessFailedCount": {
            "type": "integer",
            "format": "int32"
          },
          "firstName": {
            "type": "string",
            "nullable": true
          },
          "lastName": {
            "type": "string",
            "nullable": true
          },
          "nickName": {
            "type": "string",
            "nullable": true
          },
          "profilePicture": {
            "type": "string",
            "nullable": true
          },
          "dateOfBirth": {
            "type": "string",
            "format": "date-time"
          },
          "nationalIdentificationNumber": {
            "type": "string",
            "nullable": true
          },
          "address": {
            "type": "string",
            "nullable": true
          },
          "bankAccountNumber": {
            "type": "string",
            "nullable": true
          },
          "bankName": {
            "type": "string",
            "nullable": true
          },
          "refreshToken": {
            "type": "string",
            "nullable": true
          },
          "refreshTokenEndDate": {
            "type": "string",
            "format": "date-time"
          },
          "employerId": {
            "type": "string",
            "nullable": true
          },
          "employer": {
            "$ref": "#/components/schemas/Employer"
          },
          "isActive": {
            "type": "boolean"
          },
          "status": {
            "$ref": "#/components/schemas/Status"
          },
          "createdDate": {
            "type": "string",
            "format": "date-time"
          },
          "modifiedDate": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "deletedDate": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "membershipType": {
            "$ref": "#/components/schemas/MembershipType"
          },
          "isEligibleForBenefits": {
            "type": "boolean"
          },
          "accounts": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Account"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "MemberDTO": {
        "type": "object",
        "properties": {
          "memberId": {
            "type": "string",
            "nullable": true
          },
          "firstName": {
            "type": "string",
            "nullable": true
          },
          "lastName": {
            "type": "string",
            "nullable": true
          },
          "profilePicture": {
            "type": "string",
            "nullable": true
          },
          "role": {
            "type": "string",
            "nullable": true
          },
          "dateOfBirth": {
            "type": "string",
            "format": "date-time"
          },
          "nationalIdentificationNumber": {
            "type": "string",
            "nullable": true
          },
          "address": {
            "type": "string",
            "nullable": true
          },
          "bankAccountNumber": {
            "type": "string",
            "nullable": true
          },
          "bankName": {
            "type": "string",
            "nullable": true
          },
          "employerId": {
            "type": "string",
            "nullable": true
          },
          "employer": {
            "$ref": "#/components/schemas/Employer"
          },
          "isActive": {
            "type": "boolean"
          },
          "createdDate": {
            "type": "string",
            "format": "date-time"
          },
          "modifiedDate": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "deletedDate": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "membershipType": {
            "$ref": "#/components/schemas/MembershipType"
          },
          "totalContributions": {
            "type": "number",
            "format": "double"
          },
          "isEligibleForBenefits": {
            "type": "boolean"
          },
          "accounts": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Account"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "MemberDTOPaginatedList": {
        "type": "object",
        "properties": {
          "pageIndex": {
            "type": "integer",
            "format": "int32"
          },
          "totalPages": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "totalCount": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "_items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MemberDTO"
            },
            "nullable": true
          },
          "hasPreviousPage": {
            "type": "boolean",
            "readOnly": true
          },
          "hasNextPage": {
            "type": "boolean",
            "readOnly": true
          }
        },
        "additionalProperties": false
      },
      "MemberDTOPaginatedListSuccessDataResult": {
        "type": "object",
        "properties": {
          "responseCode": {
            "type": "string",
            "nullable": true
          },
          "responseDescription": {
            "type": "string",
            "nullable": true
          },
          "data": {
            "$ref": "#/components/schemas/MemberDTOPaginatedList"
          }
        },
        "additionalProperties": false
      },
      "MemberDTOSuccessDataResult": {
        "type": "object",
        "properties": {
          "responseCode": {
            "type": "string",
            "nullable": true
          },
          "responseDescription": {
            "type": "string",
            "nullable": true
          },
          "data": {
            "$ref": "#/components/schemas/MemberDTO"
          }
        },
        "additionalProperties": false
      },
      "MembershipType": {
        "enum": [
          1,
          2,
          3
        ],
        "type": "integer",
        "format": "int32"
      },
      "NewAccountRequest": {
        "type": "object",
        "properties": {
          "memberId": {
            "type": "string",
            "nullable": true
          },
          "accountType": {
            "$ref": "#/components/schemas/AccountType"
          }
        },
        "additionalProperties": false
      },
      "StatementFormat": {
        "enum": [
          1,
          2
        ],
        "type": "integer",
        "format": "int32"
      },
      "Status": {
        "enum": [
          1,
          2,
          3
        ],
        "type": "integer",
        "format": "int32"
      },
      "StringErrorDataResult": {
        "type": "object",
        "properties": {
          "responseCode": {
            "type": "string",
            "nullable": true
          },
          "responseDescription": {
            "type": "string",
            "nullable": true
          },
          "data": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "StringSuccessDataResult": {
        "type": "object",
        "properties": {
          "responseCode": {
            "type": "string",
            "nullable": true
          },
          "responseDescription": {
            "type": "string",
            "nullable": true
          },
          "data": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "WithdrawalRequest": {
        "required": [
          "accountType",
          "amount",
          "memberId"
        ],
        "type": "object",
        "properties": {
          "memberId": {
            "minLength": 1,
            "type": "string"
          },
          "amount": {
            "minimum": 0.01,
            "type": "number",
            "format": "double"
          },
          "accountType": {
            "$ref": "#/components/schemas/AccountType"
          },
          "notes": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "WithdrawalResult": {
        "type": "object",
        "properties": {
          "transactionId": {
            "type": "string",
            "nullable": true
          },
          "memberId": {
            "type": "string",
            "nullable": true
          },
          "amount": {
            "type": "number",
            "format": "double"
          },
          "newBalance": {
            "type": "number",
            "format": "double"
          },
          "processedDate": {
            "type": "string",
            "format": "date-time"
          }
        },
        "additionalProperties": false
      },
      "WithdrawalResultSuccessDataResult": {
        "type": "object",
        "properties": {
          "responseCode": {
            "type": "string",
            "nullable": true
          },
          "responseDescription": {
            "type": "string",
            "nullable": true
          },
          "data": {
            "$ref": "#/components/schemas/WithdrawalResult"
          }
        },
        "additionalProperties": false
      }
    },
    "securitySchemes": {
      "Bearer": {
        "type": "apiKey",
        "description": "JWT Authorization header using the Bearer scheme (Example: 'Bearer 12345abcdef')",
        "name": "Authorization",
        "in": "header"
      }
    }
  },
  "security": [
    {
      "Bearer": [ ]
    }
  ]
}' (Nullable = false) (Size = -1), @p12='{"Content-Type":["application/json;charset=utf-8"],"Date":["Fri, 28 Mar 2025 22:26:53 GMT"],"Server":["Kestrel"]}' (Nullable = false) (Size = 4000), @p13='2025-03-28T22:26:54.1218939Z', @p14='200', @p15='2025-03-28T22:26:54.1325169Z'], CommandType='"Text"', CommandTimeout='30']
SET IMPLICIT_TRANSACTIONS OFF;
SET NOCOUNT ON;
INSERT INTO [RequestResponseLogs] ([RequestResponseLogId], [ClientIp], [ExecutionTime], [HttpMethod], [MemberAgent], [MemberId], [QueryString], [RequestBody], [RequestHeaders], [RequestInitiatedAt], [RequestPath], [ResponseBody], [ResponseHeaders], [ResponseReceivedAt], [StatusCode], [Timestamp])
VALUES (@p0, @p1, @p2, @p3, @p4, @p5, @p6, @p7, @p8, @p9, @p10, @p11, @p12, @p13, @p14, @p15);
2025-03-28 15:26:54.253 -07:00 [INF] Request finished HTTP/2 GET https://localhost:7055/swagger/v1/swagger.json - 200 null application/json;charset=utf-8 360.7021ms
2025-03-28 15:26:55.521 -07:00 [INF] Request starting HTTP/2 GET https://localhost:7055/favicon.ico - null null
2025-03-28 15:26:55.545 -07:00 [INF] Executed DbCommand (6ms) [Parameters=[@p0='01JQFDV2DGY5N7GRZWH19E0EH1' (Nullable = false) (Size = 50), @p1='::1' (Nullable = false) (Size = 4000), @p2='00:00:00.0003829', @p3='GET' (Nullable = false) (Size = 4000), @p4='' (Nullable = false) (Size = 4000), @p5='' (Nullable = false) (Size = 4000), @p6='' (Nullable = false) (Size = 4000), @p7='' (Nullable = false) (Size = 4000), @p8='{"Accept":["image/avif,image/webp,image/apng,image/svg+xml,image/*,*/*;q=0.8"],"Host":["localhost:7055"],"User-Agent":["Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/134.0.0.0 Safari/537.36"],"Accept-Encoding":["gzip, deflate, br, zstd"],"Accept-Language":["en-US,en;q=0.9,fr;q=0.8"],"Referer":["https://localhost:7055/swagger/v1/swagger.json"],"sec-ch-ua-platform":["\"Windows\""],"sec-ch-ua":["\"Chromium\";v=\"134\", \"Not:A-Brand\";v=\"24\", \"Google Chrome\";v=\"134\""],"sec-ch-ua-mobile":["?0"],"sec-fetch-site":["same-origin"],"sec-fetch-mode":["no-cors"],"sec-fetch-dest":["image"],"priority":["u=1, i"]}' (Nullable = false) (Size = 4000), @p9='2025-03-28T22:26:55.5334289Z', @p10='/favicon.ico' (Nullable = false) (Size = 4000), @p11='' (Nullable = false) (Size = 4000), @p12='{}' (Nullable = false) (Size = 4000), @p13='2025-03-28T22:26:55.5338137Z', @p14='404', @p15='2025-03-28T22:26:55.5368774Z'], CommandType='"Text"', CommandTimeout='30']
SET IMPLICIT_TRANSACTIONS OFF;
SET NOCOUNT ON;
INSERT INTO [RequestResponseLogs] ([RequestResponseLogId], [ClientIp], [ExecutionTime], [HttpMethod], [MemberAgent], [MemberId], [QueryString], [RequestBody], [RequestHeaders], [RequestInitiatedAt], [RequestPath], [ResponseBody], [ResponseHeaders], [ResponseReceivedAt], [StatusCode], [Timestamp])
VALUES (@p0, @p1, @p2, @p3, @p4, @p5, @p6, @p7, @p8, @p9, @p10, @p11, @p12, @p13, @p14, @p15);
2025-03-28 15:26:55.556 -07:00 [INF] Request finished HTTP/2 GET https://localhost:7055/favicon.ico - 404 0 null 35.7935ms
2025-03-28 15:26:55.568 -07:00 [INF] Request reached the end of the middleware pipeline without being handled by application code. Request path: GET https://localhost:7055/favicon.ico, Response status code: 404
2025-03-28 15:27:05.506 -07:00 [INF] 1 servers were removed due to timeout
2025-03-28 15:56:17.105 -07:00 [INF] Start installing Hangfire SQL objects...
2025-03-28 15:56:18.479 -07:00 [INF] Hangfire SQL objects installed.
2025-03-28 15:56:18.937 -07:00 [INF] User profile is available. Using 'C:\Users\HP\AppData\Local\ASP.NET\DataProtection-Keys' as key repository and Windows DPAPI to encrypt keys at rest.
2025-03-28 15:56:19.761 -07:00 [WRN] Sensitive data logging is enabled. Log entries and exception messages may include sensitive application data; this mode should only be enabled during development.
2025-03-28 15:56:19.857 -07:00 [WRN] No store type was specified for the decimal property 'CurrentBalance' on entity type 'Account'. This will cause values to be silently truncated if they do not fit in the default precision and scale. Explicitly specify the SQL server column type that can accommodate all the values in 'OnModelCreating' using 'HasColumnType', specify precision and scale using 'HasPrecision', or configure a value converter using 'HasConversion'.
2025-03-28 15:56:19.874 -07:00 [WRN] No store type was specified for the decimal property 'TotalContributions' on entity type 'Account'. This will cause values to be silently truncated if they do not fit in the default precision and scale. Explicitly specify the SQL server column type that can accommodate all the values in 'OnModelCreating' using 'HasColumnType', specify precision and scale using 'HasPrecision', or configure a value converter using 'HasConversion'.
2025-03-28 15:56:19.882 -07:00 [WRN] No store type was specified for the decimal property 'Amount' on entity type 'Contribution'. This will cause values to be silently truncated if they do not fit in the default precision and scale. Explicitly specify the SQL server column type that can accommodate all the values in 'OnModelCreating' using 'HasColumnType', specify precision and scale using 'HasPrecision', or configure a value converter using 'HasConversion'.
2025-03-28 15:56:19.891 -07:00 [WRN] No store type was specified for the decimal property 'ThresholdValue' on entity type 'EligibilityRule'. This will cause values to be silently truncated if they do not fit in the default precision and scale. Explicitly specify the SQL server column type that can accommodate all the values in 'OnModelCreating' using 'HasColumnType', specify precision and scale using 'HasPrecision', or configure a value converter using 'HasConversion'.
2025-03-28 15:56:19.909 -07:00 [WRN] No store type was specified for the decimal property 'PensionContributionRate' on entity type 'Employer'. This will cause values to be silently truncated if they do not fit in the default precision and scale. Explicitly specify the SQL server column type that can accommodate all the values in 'OnModelCreating' using 'HasColumnType', specify precision and scale using 'HasPrecision', or configure a value converter using 'HasConversion'.
2025-03-28 15:56:19.916 -07:00 [WRN] No store type was specified for the decimal property 'Amount' on entity type 'Transaction'. This will cause values to be silently truncated if they do not fit in the default precision and scale. Explicitly specify the SQL server column type that can accommodate all the values in 'OnModelCreating' using 'HasColumnType', specify precision and scale using 'HasPrecision', or configure a value converter using 'HasConversion'.
2025-03-28 15:56:20.406 -07:00 [INF] Executed DbCommand (22ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT 1
2025-03-28 15:56:20.439 -07:00 [INF] Acquiring an exclusive lock for migration application. See https://aka.ms/efcore-docs-migrations-lock for more information if this takes too long.
2025-03-28 15:56:20.470 -07:00 [INF] Executed DbCommand (19ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
DECLARE @result int;
EXEC @result = sp_getapplock @Resource = '__EFMigrationsLock', @LockOwner = 'Session', @LockMode = 'Exclusive';
SELECT @result
2025-03-28 15:56:20.586 -07:00 [INF] Executed DbCommand (10ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
IF OBJECT_ID(N'[__EFMigrationsHistory]') IS NULL
BEGIN
    CREATE TABLE [__EFMigrationsHistory] (
        [MigrationId] nvarchar(150) NOT NULL,
        [ProductVersion] nvarchar(32) NOT NULL,
        CONSTRAINT [PK___EFMigrationsHistory] PRIMARY KEY ([MigrationId])
    );
END;
2025-03-28 15:56:20.634 -07:00 [INF] Executed DbCommand (1ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT 1
2025-03-28 15:56:20.650 -07:00 [INF] Executed DbCommand (1ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT OBJECT_ID(N'[__EFMigrationsHistory]');
2025-03-28 15:56:20.670 -07:00 [INF] Executed DbCommand (4ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT [MigrationId], [ProductVersion]
FROM [__EFMigrationsHistory]
ORDER BY [MigrationId];
2025-03-28 15:56:20.701 -07:00 [INF] No migrations were applied. The database is already up to date.
2025-03-28 15:56:20.712 -07:00 [INF] Executed DbCommand (1ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
DECLARE @result int;
EXEC @result = sp_releaseapplock @Resource = '__EFMigrationsLock', @LockOwner = 'Session';
SELECT @result
2025-03-28 15:56:21.144 -07:00 [INF] Executed DbCommand (4ms) [Parameters=[@__normalizedName_0='ADMIN' (Size = 256)], CommandType='"Text"', CommandTimeout='30']
SELECT TOP(1) [a].[Id], [a].[ConcurrencyStamp], [a].[Name], [a].[NormalizedName]
FROM [AspNetRoles] AS [a]
WHERE [a].[NormalizedName] = @__normalizedName_0
2025-03-28 15:56:21.299 -07:00 [INF] Executed DbCommand (3ms) [Parameters=[@__normalizedName_0='EMPLOYER' (Size = 256)], CommandType='"Text"', CommandTimeout='30']
SELECT TOP(1) [a].[Id], [a].[ConcurrencyStamp], [a].[Name], [a].[NormalizedName]
FROM [AspNetRoles] AS [a]
WHERE [a].[NormalizedName] = @__normalizedName_0
2025-03-28 15:56:21.317 -07:00 [INF] Executed DbCommand (2ms) [Parameters=[@__normalizedName_0='MEMBER' (Size = 256)], CommandType='"Text"', CommandTimeout='30']
SELECT TOP(1) [a].[Id], [a].[ConcurrencyStamp], [a].[Name], [a].[NormalizedName]
FROM [AspNetRoles] AS [a]
WHERE [a].[NormalizedName] = @__normalizedName_0
2025-03-28 15:56:21.378 -07:00 [INF] Executed DbCommand (8ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT CASE
    WHEN EXISTS (
        SELECT 1
        FROM [EligibilityRules] AS [e]
        WHERE [e].[Status] <> 3) THEN CAST(1 AS bit)
    ELSE CAST(0 AS bit)
END
2025-03-28 15:56:21.463 -07:00 [INF] Executed DbCommand (6ms) [Parameters=[@__normalizedEmail_0='ADMIN@NLPC.COM' (Size = 256)], CommandType='"Text"', CommandTimeout='30']
SELECT TOP(2) [a].[Id], [a].[AccessFailedCount], [a].[Address], [a].[BankAccountNumber], [a].[BankName], [a].[ConcurrencyStamp], [a].[CreatedDate], [a].[DateOfBirth], [a].[DeletedDate], [a].[Email], [a].[EmailConfirmed], [a].[EmployerId], [a].[FirstName], [a].[IsActive], [a].[IsEligibleForBenefits], [a].[LastName], [a].[LockoutEnabled], [a].[LockoutEnd], [a].[MembershipType], [a].[ModifiedDate], [a].[NationalIdentificationNumber], [a].[NickName], [a].[NormalizedEmail], [a].[NormalizedUserName], [a].[PasswordHash], [a].[PhoneNumber], [a].[PhoneNumberConfirmed], [a].[ProfilePicture], [a].[RefreshToken], [a].[RefreshTokenEndDate], [a].[SecurityStamp], [a].[Status], [a].[TwoFactorEnabled], [a].[UserName]
FROM [AspNetUsers] AS [a]
WHERE [a].[NormalizedEmail] = @__normalizedEmail_0
2025-03-28 15:56:22.450 -07:00 [INF] Now listening on: https://localhost:7055
2025-03-28 15:56:22.459 -07:00 [INF] Now listening on: http://localhost:5226
2025-03-28 15:56:22.674 -07:00 [INF] Starting Hangfire Server using job storage: 'SQL Server: localhost@NLPCDb'
2025-03-28 15:56:22.677 -07:00 [INF] Using the following options for SQL Server job storage: Queue poll interval: 00:00:00.
2025-03-28 15:56:22.681 -07:00 [INF] Using the following options for Hangfire Server:
    Worker count: 16
    Listening queues: 'default', 'contributions', 'eligibility', 'transactions'
    Shutdown timeout: 00:00:15
    Schedule polling interval: 00:00:15
2025-03-28 15:56:22.732 -07:00 [INF] Application started. Press Ctrl+C to shut down.
2025-03-28 15:56:22.736 -07:00 [INF] Hosting environment: Development
2025-03-28 15:56:22.740 -07:00 [INF] Content root path: C:\Users\HP\OneDrive\Desktop\PCMS\PCMSAPI
2025-03-28 15:56:22.766 -07:00 [INF] Server desktop-79ihet5:14584:e1101b68 successfully announced in 33.5047 ms
2025-03-28 15:56:22.781 -07:00 [INF] Server desktop-79ihet5:14584:e1101b68 is starting the registered dispatchers: ServerWatchdog, ServerJobCancellationWatcher, ExpirationManager, CountersAggregator, SqlServerHeartbeatProcess, Worker, DelayedJobScheduler, RecurringJobScheduler...
2025-03-28 15:56:22.826 -07:00 [INF] 1 servers were removed due to timeout
2025-03-28 15:56:23.121 -07:00 [INF] Server desktop-79ihet5:14584:e1101b68 all the dispatchers started
2025-03-28 15:56:23.354 -07:00 [INF] Request starting HTTP/2 GET https://localhost:7055/swagger/index.html - null null
2025-03-28 15:56:24.305 -07:00 [INF] Starting failed transaction processing job
2025-03-28 15:56:24.310 -07:00 [INF] Retrieving failed transactions with less than 3 attempts
2025-03-28 15:56:24.418 -07:00 [INF] Executed DbCommand (5ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT [t].[TransactionId], [t].[Amount], [t].[Attempts], [t].[ContributionId], [t].[CreatedDate], [t].[CreditAccountBankCode], [t].[CreditAccountId], [t].[DebitAccountBankCode], [t].[DebitAccountId], [t].[DeletedDate], [t].[Description], [t].[IsReversed], [t].[MemberId], [t].[ModifiedDate], [t].[ProcessedDate], [t].[ReferenceNumber], [t].[Status], [t].[TransactionDate], [t].[TransactionStatus], [t].[TransactionType]
FROM [Transactions] AS [t]
WHERE [t].[Status] <> 3 AND [t].[TransactionStatus] = 3 AND [t].[Attempts] < 3
2025-03-28 15:56:24.430 -07:00 [INF] Processed 0 failed transactions
2025-03-28 15:56:24.736 -07:00 [INF] Request starting HTTP/2 GET https://localhost:7055/_vs/browserLink - null null
2025-03-28 15:56:24.735 -07:00 [INF] Request starting HTTP/2 GET https://localhost:7055/swagger/index.js - null null
2025-03-28 15:56:24.736 -07:00 [INF] Request starting HTTP/2 GET https://localhost:7055/_framework/aspnetcore-browser-refresh.js - null null
2025-03-28 15:56:24.825 -07:00 [INF] Request finished HTTP/2 GET https://localhost:7055/_framework/aspnetcore-browser-refresh.js - 200 16491 application/javascript; charset=utf-8 86.884ms
2025-03-28 15:56:24.862 -07:00 [INF] Request finished HTTP/2 GET https://localhost:7055/_vs/browserLink - 200 null text/javascript; charset=UTF-8 126.1533ms
2025-03-28 15:56:25.106 -07:00 [INF] Executed DbCommand (9ms) [Parameters=[@p0='01JQFFH26AZ6584XHBA7714PYD' (Nullable = false) (Size = 50), @p1='::1' (Nullable = false) (Size = 4000), @p2='00:00:00.0021615', @p3='GET' (Nullable = false) (Size = 4000), @p4='' (Nullable = false) (Size = 4000), @p5='' (Nullable = false) (Size = 4000), @p6='' (Nullable = false) (Size = 4000), @p7='' (Nullable = false) (Size = 4000), @p8='{"Accept":["*/*"],"Host":["localhost:7055"],"User-Agent":["Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/134.0.0.0 Safari/537.36"],"Accept-Encoding":["gzip, deflate, br, zstd"],"Accept-Language":["en-US,en;q=0.9,fr;q=0.8"],"Referer":["https://localhost:7055/swagger/index.html"],"sec-ch-ua-platform":["\"Windows\""],"sec-ch-ua":["\"Chromium\";v=\"134\", \"Not:A-Brand\";v=\"24\", \"Google Chrome\";v=\"134\""],"sec-ch-ua-mobile":["?0"],"sec-fetch-site":["same-origin"],"sec-fetch-mode":["no-cors"],"sec-fetch-dest":["script"],"priority":["u=1"]}' (Nullable = false) (Size = 4000), @p9='2025-03-28T22:56:24.7602779Z', @p10='/swagger/index.js' (Nullable = false) (Size = 4000), @p11='/* Source: https://gist.github.com/lamberta/3768814
 * Parse a string function definition and return a function object. Does not use eval.
 * @param {string} str
 * @return {function}
 *
 * Example:
 *  var f = function (x, y) { return x * y; };
 *  var g = parseFunction(f.toString());
 *  g(33, 3); //=> 99
 */
function parseFunction(str) {
    if (!str) return void (0);

    var fn_body_idx = str.indexOf('{'),
        fn_body = str.substring(fn_body_idx + 1, str.lastIndexOf('}')),
        fn_declare = str.substring(0, fn_body_idx),
        fn_params = fn_declare.substring(fn_declare.indexOf('(') + 1, fn_declare.lastIndexOf(')')),
        args = fn_params.split(',');

    args.push(fn_body);

    function Fn() {
        return Function.apply(this, args);
    }
    Fn.prototype = Function.prototype;

    return new Fn();
}

window.onload = function () {
    var configObject = JSON.parse('{"urls":[{"url":"./v1/swagger.json","name":"NLPC PCMS V1"}],"deepLinking":false,"persistAuthorization":false,"displayOperationId":false,"defaultModelsExpandDepth":1,"defaultModelExpandDepth":1,"defaultModelRendering":"example","displayRequestDuration":false,"docExpansion":"list","showExtensions":false,"showCommonExtensions":false,"supportedSubmitMethods":["get","put","post","delete","options","head","patch","trace"],"tryItOutEnabled":false}');
    var oauthConfigObject = JSON.parse('{"scopeSeparator":" ","scopes":[],"useBasicAuthenticationWithAccessCodeGrant":false,"usePkceWithAuthorizationCodeGrant":false}');

    // Workaround for https://github.com/swagger-api/swagger-ui/issues/5945
    configObject.urls.forEach(function (item) {
        if (item.url.startsWith("http") || item.url.startsWith("/")) return;
        item.url = window.location.href.replace("index.html", item.url).split('#')[0];
    });

    // If validatorUrl is not explicitly provided, disable the feature by setting to null
    if (!configObject.hasOwnProperty("validatorUrl"))
        configObject.validatorUrl = null

    // If oauth2RedirectUrl isn't specified, use the built-in default
    if (!configObject.hasOwnProperty("oauth2RedirectUrl"))
        configObject.oauth2RedirectUrl = (new URL("oauth2-redirect.html", window.location.href)).href;

    // Apply mandatory parameters
    configObject.dom_id = "#swagger-ui";
    configObject.presets = [SwaggerUIBundle.presets.apis, SwaggerUIStandalonePreset];
    configObject.layout = "StandaloneLayout";

    // Parse and add interceptor functions
    var interceptors = JSON.parse('{}');
    if (interceptors.RequestInterceptorFunction)
        configObject.requestInterceptor = parseFunction(interceptors.RequestInterceptorFunction);
    if (interceptors.ResponseInterceptorFunction)
        configObject.responseInterceptor = parseFunction(interceptors.ResponseInterceptorFunction);

    if (configObject.plugins) {
        configObject.plugins = configObject.plugins.map(eval);
    }
    
    // Begin Swagger UI call region

    const ui = SwaggerUIBundle(configObject);

    ui.initOAuth(oauthConfigObject);

    // End Swagger UI call region

    window.ui = ui
}
' (Nullable = false) (Size = 4000), @p12='{"Content-Type":["application/javascript;charset=utf-8"],"Date":["Fri, 28 Mar 2025 22:56:24 GMT"],"Server":["Kestrel"]}' (Nullable = false) (Size = 4000), @p13='2025-03-28T22:56:24.7624413Z', @p14='200', @p15='2025-03-28T22:56:24.7783724Z'], CommandType='"Text"', CommandTimeout='30']
SET IMPLICIT_TRANSACTIONS OFF;
SET NOCOUNT ON;
INSERT INTO [RequestResponseLogs] ([RequestResponseLogId], [ClientIp], [ExecutionTime], [HttpMethod], [MemberAgent], [MemberId], [QueryString], [RequestBody], [RequestHeaders], [RequestInitiatedAt], [RequestPath], [ResponseBody], [ResponseHeaders], [ResponseReceivedAt], [StatusCode], [Timestamp])
VALUES (@p0, @p1, @p2, @p3, @p4, @p5, @p6, @p7, @p8, @p9, @p10, @p11, @p12, @p13, @p14, @p15);
2025-03-28 15:56:25.106 -07:00 [INF] Executed DbCommand (8ms) [Parameters=[@p0='01JQFFH23CD1KC3BDG1FFVB5A0' (Nullable = false) (Size = 50), @p1='::1' (Nullable = false) (Size = 4000), @p2='00:00:00.1042257', @p3='GET' (Nullable = false) (Size = 4000), @p4='' (Nullable = false) (Size = 4000), @p5='' (Nullable = false) (Size = 4000), @p6='' (Nullable = false) (Size = 4000), @p7='' (Nullable = false) (Size = 4000), @p8='{"Accept":["text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7"],"Host":["localhost:7055"],"User-Agent":["Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/134.0.0.0 Safari/537.36"],"Accept-Encoding":["gzip, deflate, br, zstd"],"Accept-Language":["en-US,en;q=0.9,fr;q=0.8"],"Upgrade-Insecure-Requests":["1"],"sec-fetch-site":["none"],"sec-fetch-mode":["navigate"],"sec-fetch-user":["?1"],"sec-fetch-dest":["document"],"sec-ch-ua":["\"Chromium\";v=\"134\", \"Not:A-Brand\";v=\"24\", \"Google Chrome\";v=\"134\""],"sec-ch-ua-mobile":["?0"],"sec-ch-ua-platform":["\"Windows\""],"priority":["u=0, i"]}' (Nullable = false) (Size = 4000), @p9='2025-03-28T22:56:24.5572399Z', @p10='/swagger/index.html' (Nullable = false) (Size = 4000), @p11='<!-- HTML for static distribution bundle build -->
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>Swagger UI</title>
    <link rel="stylesheet" type="text/css" href="./swagger-ui.css">
    <link rel="stylesheet" type="text/css" href="./index.css">
    <link rel="icon" type="image/png" href="./favicon-32x32.png" sizes="32x32" />
    <link rel="icon" type="image/png" href="./favicon-16x16.png" sizes="16x16" />
       
</head>

<body>
    <div id="swagger-ui"></div>

    <script src="./swagger-ui-bundle.js" charset="utf-8"></script>
    <script src="./swagger-ui-standalone-preset.js" charset="utf-8"></script>
    <script src="index.js" charset="utf-8"></script>
</body>
</html>
' (Nullable = false) (Size = 4000), @p12='{"Content-Type":["text/html;charset=utf-8"],"Date":["Fri, 28 Mar 2025 22:56:24 GMT"],"Server":["Kestrel"]}' (Nullable = false) (Size = 4000), @p13='2025-03-28T22:56:24.6614676Z', @p14='200', @p15='2025-03-28T22:56:24.6844844Z'], CommandType='"Text"', CommandTimeout='30']
SET IMPLICIT_TRANSACTIONS OFF;
SET NOCOUNT ON;
INSERT INTO [RequestResponseLogs] ([RequestResponseLogId], [ClientIp], [ExecutionTime], [HttpMethod], [MemberAgent], [MemberId], [QueryString], [RequestBody], [RequestHeaders], [RequestInitiatedAt], [RequestPath], [ResponseBody], [ResponseHeaders], [ResponseReceivedAt], [StatusCode], [Timestamp])
VALUES (@p0, @p1, @p2, @p3, @p4, @p5, @p6, @p7, @p8, @p9, @p10, @p11, @p12, @p13, @p14, @p15);
2025-03-28 15:56:25.157 -07:00 [INF] Request finished HTTP/2 GET https://localhost:7055/swagger/index.html - 200 null text/html;charset=utf-8 1821.7318ms
2025-03-28 15:56:25.157 -07:00 [INF] Request finished HTTP/2 GET https://localhost:7055/swagger/index.js - 200 null application/javascript;charset=utf-8 422.4739ms
2025-03-28 15:56:26.337 -07:00 [INF] Request starting HTTP/2 GET https://localhost:7055/swagger/v1/swagger.json - null null
2025-03-28 15:56:26.589 -07:00 [INF] Executed DbCommand (17ms) [Parameters=[@p0='01JQFFH3Y6MEPHV3KFJ9MFR7PG' (Nullable = false) (Size = 50), @p1='::1' (Nullable = false) (Size = 4000), @p2='00:00:00.2122316', @p3='GET' (Nullable = false) (Size = 4000), @p4='' (Nullable = false) (Size = 4000), @p5='' (Nullable = false) (Size = 4000), @p6='' (Nullable = false) (Size = 4000), @p7='' (Nullable = false) (Size = 4000), @p8='{"Accept":["application/json,*/*"],"Host":["localhost:7055"],"User-Agent":["Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/134.0.0.0 Safari/537.36"],"Accept-Encoding":["gzip, deflate, br, zstd"],"Accept-Language":["en-US,en;q=0.9,fr;q=0.8"],"Referer":["https://localhost:7055/swagger/index.html"],"sec-ch-ua-platform":["\"Windows\""],"sec-ch-ua":["\"Chromium\";v=\"134\", \"Not:A-Brand\";v=\"24\", \"Google Chrome\";v=\"134\""],"sec-ch-ua-mobile":["?0"],"sec-fetch-site":["same-origin"],"sec-fetch-mode":["cors"],"sec-fetch-dest":["empty"],"priority":["u=1, i"]}' (Nullable = false) (Size = 4000), @p9='2025-03-28T22:56:26.3467155Z', @p10='/swagger/v1/swagger.json' (Nullable = false) (Size = 4000), @p11='{
  "openapi": "3.0.4",
  "info": {
    "title": "NLPC PCMS",
    "description": "API documentation for NLPC PCMS system.",
    "termsOfService": "https://terms-of-service-url.com",
    "contact": {
      "name": "Pension Team",
      "url": "https://healthtriagen.com/contact",
      "email": "support@pcms.com"
    },
    "license": {
      "name": "MIT License",
      "url": "https://opensource.org/licenses/MIT"
    },
    "version": "v1"
  },
  "paths": {
    "/api/accounts": {
      "post": {
        "tags": [
          "Account"
        ],
        "summary": "Creates a new pension account.",
        "description": "**Endpoint:** `POST /api/accounts`  \r\n \r\nRegisters a new pension account for a member.\r\n \r\n**Validation Requirements:**  \r\n- Member ID is required and must be valid  \r\n- Account type 1 is for individual contribution account, while 2 is for employer sponsored contribution account  \r\n \r\n**Response Codes:**  \r\n| Status Code | Response Code | Description |  \r\n|------------|--------------|-------------|  \r\n| 200        | 00           | Account created successfully |  \r\n| 200        | 31           | Member not found |  \r\n| 422        | 14           | Invalid input (e.g., missing fields) |  \r\n| 500        | 09           | Exception occurred, contact developer |",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NewAccountRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/NewAccountRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/NewAccountRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/StringSuccessDataResult"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StringSuccessDataResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/StringSuccessDataResult"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Content",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/StringErrorDataResult"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StringErrorDataResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/StringErrorDataResult"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/StringErrorDataResult"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StringErrorDataResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/StringErrorDataResult"
                }
              }
            }
          },
          "404": {
            "description": "Not Found"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "ResponseCode": {
                      "type": "string",
                      "example": "00"
                    },
                    "ResponseDescription": {
                      "type": "string",
                      "example": "Request Successful."
                    },
                    "data": {
                      "type": "object",
                      "nullable": true
                    }
                  }
                }
              }
            }
          }
        }
      },
      "get": {
        "tags": [
          "Account"
        ],
        "summary": "Retrieves all accounts.",
        "description": "**Endpoint:** `GET /api/accounts`  \r\n \r\nFetches a list of all accounts.\r\n \r\n**Response Codes:**  \r\n| Status Code | Response Code | Description |  \r\n|------------|--------------|-------------|  \r\n| 200        | 00           | Accounts retrieved successfully |  \r\n| 200        | 31           | No accounts found |  \r\n| 500        | 09           | Exception occurred, contact developer |",
        "parameters": [
          {
            "name": "pageIndex",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/AccountDTOListSuccessDataResult"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AccountDTOListSuccessDataResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/AccountDTOListSuccessDataResult"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/StringErrorDataResult"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StringErrorDataResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/StringErrorDataResult"
                }
              }
            }
          },
          "404": {
            "description": "Not Found"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "ResponseCode": {
                      "type": "string",
                      "example": "00"
                    },
                    "ResponseDescription": {
                      "type": "string",
                      "example": "Request Successful."
                    },
                    "data": {
                      "type": "object",
                      "nullable": true
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/accounts/{accountId}": {
      "get": {
        "tags": [
          "Account"
        ],
        "summary": "Retrieves details of a specific account.",
        "description": "**Endpoint:** `GET /api/accounts/{accountId}`  \r\n \r\nFetches account details using the unique account ID.\r\n \r\n**Response Codes:**  \r\n| Status Code | Response Code | Description |  \r\n|------------|--------------|-------------|  \r\n| 200        | 00           | Account retrieved successfully |  \r\n| 200        | 31           | Account not found |  \r\n| 422        | 14           | Invalid input (e.g., missing fields) |  \r\n| 500        | 09           | Exception occurred, contact developer |",
        "parameters": [
          {
            "name": "accountId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/AccountDTOSuccessDataResult"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AccountDTOSuccessDataResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/AccountDTOSuccessDataResult"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Content",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/StringErrorDataResult"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StringErrorDataResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/StringErrorDataResult"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/StringErrorDataResult"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StringErrorDataResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/StringErrorDataResult"
                }
              }
            }
          },
          "404": {
            "description": "Not Found"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "ResponseCode": {
                      "type": "string",
                      "example": "00"
                    },
                    "ResponseDescription": {
                      "type": "string",
                      "example": "Request Successful."
                    },
                    "data": {
                      "type": "object",
                      "nullable": true
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/accounts/member/{memberId}": {
      "get": {
        "tags": [
          "Account"
        ],
        "summary": "Retrieves accounts for a specific member.",
        "description": "**Endpoint:** `GET /api/accounts/member/{memberId}`  \r\n \r\nFetches all accounts associated with a specific member by their unique identifier.  \r\n \r\n**Response Codes:**  \r\n| Status Code | Response Code | Description |  \r\n|------------|--------------|-------------|  \r\n| 200        | 00           | Accounts retrieved successfully | \r\n| 200        | 31           | No accounts found for the member |  \r\n| 422        | 14           | Invalid input (e.g., missing or incorrect memberId) |  \r\n| 500        | 09           | Exception occurred, contact developer |",
        "parameters": [
          {
            "name": "memberId",
            "in": "path",
            "description": "Unique identifier for the member.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/AccountDTOListSuccessDataResult"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AccountDTOListSuccessDataResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/AccountDTOListSuccessDataResult"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/StringErrorDataResult"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StringErrorDataResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/StringErrorDataResult"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Content",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/StringErrorDataResult"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StringErrorDataResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/StringErrorDataResult"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/StringErrorDataResult"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StringErrorDataResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/StringErrorDataResult"
                }
              }
            }
          },
          "404": {
            "description": "Not Found"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        }
      }
    },
    "/api/contributions": {
      "post": {
        "tags": [
          "Contribution"
        ],
        "summary": "Adds a new contribution (Monthly/Voluntary).",
        "description": "**Endpoint:** `POST /api/contributions`  \r\n \r\nAdds a new contribution for a member.  \r\n \r\n**Validation Requirements:**  \r\n- Contribution type must be valid  \r\n- Amount must be greater than zero  \r\n \r\n**Response Codes:**  \r\n| Status Code | Response Code | Description |  \r\n|------------|--------------|-------------|  \r\n| 200        | 00           | Contribution added successfully |  \r\n| 422        | 14           | Invalid input (e.g., missing or invalid fields) |  \r\n| 500        | 09           | Exception occurred, contact developer |",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ContributionRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/ContributionRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/ContributionRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ContributionDTOSuccessDataResult"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ContributionDTOSuccessDataResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ContributionDTOSuccessDataResult"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/StringErrorDataResult"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StringErrorDataResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/StringErrorDataResult"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Content",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/StringErrorDataResult"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StringErrorDataResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/StringErrorDataResult"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/StringErrorDataResult"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StringErrorDataResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/StringErrorDataResult"
                }
              }
            }
          },
          "404": {
            "description": "Not Found"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        }
      }
    },
    "/api/contributions/{id}": {
      "get": {
        "tags": [
          "Contribution"
        ],
        "summary": "Retrieves details of a specific contribution by ID.",
        "description": "**Endpoint:** `GET /api/contributions/{id}`  \r\n \r\nFetches details of a contribution by its unique identifier.  \r\n \r\n**Response Codes:**  \r\n| Status Code | Response Code | Description |  \r\n|------------|--------------|-------------|  \r\n| 200        | 00           | Contribution retrieved successfully |  \r\n| 404        | 31           | Contribution not found |  \r\n| 500        | 09           | Exception occurred, contact developer |",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ContributionDTOSuccessDataResult"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ContributionDTOSuccessDataResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ContributionDTOSuccessDataResult"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/StringErrorDataResult"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StringErrorDataResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/StringErrorDataResult"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/StringErrorDataResult"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StringErrorDataResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/StringErrorDataResult"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "ResponseCode": {
                      "type": "string",
                      "example": "00"
                    },
                    "ResponseDescription": {
                      "type": "string",
                      "example": "Request Successful."
                    },
                    "data": {
                      "type": "object",
                      "nullable": true
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/contributions/member/{memberId}": {
      "get": {
        "tags": [
          "Contribution"
        ],
        "summary": "Retrieves all contributions for a member.",
        "description": "**Endpoint:** `GET /api/contributions/member/{memberId}`  \r\n \r\nFetches all contributions made by a specific member.  \r\n \r\n**Response Codes:**  \r\n| Status Code | Response Code | Description |  \r\n|------------|--------------|-------------|  \r\n| 200        | 00           | Contributions retrieved successfully |  \r\n| 404        | 31           | Member contributions not found |  \r\n| 500        | 09           | Exception occurred, contact developer |",
        "parameters": [
          {
            "name": "memberId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ContributionDTOListSuccessDataResult"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ContributionDTOListSuccessDataResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ContributionDTOListSuccessDataResult"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/StringErrorDataResult"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StringErrorDataResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/StringErrorDataResult"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/StringErrorDataResult"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StringErrorDataResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/StringErrorDataResult"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "ResponseCode": {
                      "type": "string",
                      "example": "00"
                    },
                    "ResponseDescription": {
                      "type": "string",
                      "example": "Request Successful."
                    },
                    "data": {
                      "type": "object",
                      "nullable": true
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/contributions/summary/{memberId}": {
      "get": {
        "tags": [
          "Contribution"
        ],
        "summary": "Retrieves contribution summary for a member.",
        "description": "**Endpoint:** `GET /api/contributions/summary/{memberId}`  \r\n \r\nProvides a summary of contributions made by a specific member.  \r\n \r\n**Response Codes:**  \r\n| Status Code | Response Code | Description |  \r\n|------------|--------------|-------------|  \r\n| 200        | 00           | Contribution summary retrieved successfully |  \r\n| 404        | 31           | Contribution summary not found |  \r\n| 500        | 09           | Exception occurred, contact developer |",
        "parameters": [
          {
            "name": "memberId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ContributionDTOSuccessDataResult"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ContributionDTOSuccessDataResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ContributionDTOSuccessDataResult"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/StringErrorDataResult"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StringErrorDataResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/StringErrorDataResult"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/StringErrorDataResult"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StringErrorDataResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/StringErrorDataResult"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "ResponseCode": {
                      "type": "string",
                      "example": "00"
                    },
                    "ResponseDescription": {
                      "type": "string",
                      "example": "Request Successful."
                    },
                    "data": {
                      "type": "object",
                      "nullable": true
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/contributions/statements": {
      "get": {
        "tags": [
          "Contribution"
        ],
        "summary": "Generates contribution statements for members.",
        "description": "**Endpoint:** `GET /api/contributions/statements`  \r\n \r\nCreates and retrieves detailed contribution statements based on query parameters.  \r\n \r\n**Response Codes:**  \r\n| Status Code | Response Code | Description |  \r\n|------------|--------------|-------------|  \r\n| 200        | 00           | Statements generated successfully |  \r\n| 400        | 14           | Invalid input parameters |  \r\n| 500        | 09           | Exception occurred, contact developer |",
        "parameters": [
          {
            "name": "MemberId",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "StartDate",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "EndDate",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "Format",
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/StatementFormat"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              },
              "application/json": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              },
              "text/json": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/StringErrorDataResult"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StringErrorDataResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/StringErrorDataResult"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/StringErrorDataResult"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StringErrorDataResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/StringErrorDataResult"
                }
              }
            }
          },
          "404": {
            "description": "Not Found"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        }
      }
    },
    "/api/contributions/withdraw": {
      "post": {
        "tags": [
          "Contribution"
        ],
        "summary": "Processes a pension withdrawal for an eligible member.",
        "description": "**Endpoint:** `POST /api/contributions/withdraw`\r\n\r\nProcesses a withdrawal from a member's pension account after verifying:\r\n- Member eligibility (IsEligibleForBenefits flag)\r\n- Sufficient account balance\r\n- Valid withdrawal amount\r\n\r\n**Business Rules:**\r\n- Member must be marked as eligible for benefits\r\n- Withdrawal amount must be positive\r\n- Account must have sufficient balance\r\n- Updates account balance and creates transaction record\r\n\r\n**Response Codes:**\r\n| Status Code | Response Code | Description |\r\n|------------|--------------|-------------|\r\n| 200        | 00           | Withdrawal processed successfully |\r\n| 400        | 31           | Insufficient funds for withdrawal |\r\n| 403        | 30           | Member not eligible for benefits |\r\n| 404        | 19/20        | Member or account not found |\r\n| 422        | 14           | Invalid input (e.g., amount ≤ 0) |\r\n| 500        | 09           | System error, contact developer |",
        "requestBody": {
          "description": "Withdrawal request details",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/WithdrawalRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/WithdrawalRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/WithdrawalRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/WithdrawalResultSuccessDataResult"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WithdrawalResultSuccessDataResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/WithdrawalResultSuccessDataResult"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/StringErrorDataResult"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StringErrorDataResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/StringErrorDataResult"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/StringErrorDataResult"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StringErrorDataResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/StringErrorDataResult"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/StringErrorDataResult"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StringErrorDataResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/StringErrorDataResult"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Content",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/StringErrorDataResult"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StringErrorDataResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/StringErrorDataResult"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/StringErrorDataResult"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StringErrorDataResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/StringErrorDataResult"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/contributions/eligibility/{memberId}": {
      "get": {
        "tags": [
          "Contribution"
        ],
        "summary": "Checks if a member is eligible for pension benefits",
        "description": "**Endpoint:** `GET /api/contributions/eligibility/{memberId}`\r\n\r\nVerifies if a member meets all requirements to receive pension benefits.\r\n\r\n**Validation Rules:**\r\n- Minimum contribution period (configurable)\r\n- Minimum age requirement (configurable)\r\n- Account in good standing\r\n\r\n**Response Codes:**\r\n| Status Code | Response Code | Description |\r\n|------------|--------------|-------------|\r\n| 200        | 00           | Eligibility check completed |\r\n| 404        | 19           | Member not found |\r\n| 500        | 09           | System error |",
        "parameters": [
          {
            "name": "memberId",
            "in": "path",
            "description": "Member unique identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/EligibilityResultDTOSuccessDataResult"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EligibilityResultDTOSuccessDataResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/EligibilityResultDTOSuccessDataResult"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/StringErrorDataResult"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StringErrorDataResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/StringErrorDataResult"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/StringErrorDataResult"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StringErrorDataResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/StringErrorDataResult"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "ResponseCode": {
                      "type": "string",
                      "example": "00"
                    },
                    "ResponseDescription": {
                      "type": "string",
                      "example": "Request Successful."
                    },
                    "data": {
                      "type": "object",
                      "nullable": true
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/employers": {
      "post": {
        "tags": [
          "Employer"
        ],
        "summary": "Registers a new employer.",
        "description": "**Endpoint:** `POST /api/employers`  \r\n \r\nRegisters a new employer in the system.\r\n \r\n**Validation Requirements:**  \r\n- Company name is required (minimum 2 characters)  \r\n- Registration number is required and must be valid  \r\n- Active status must be specified  \r\n \r\n**Response Codes:**  \r\n| Status Code | Response Code | Description |  \r\n|------------|--------------|-------------|  \r\n| 200        | 00           | Employer registered successfully |  \r\n| 200        | 15           | Employer role assignment failed |  \r\n| 200        | 32           | Employer already exists |  \r\n| 200        | 16           | Employer creation failed |  \r\n| 422        | 14           | Invalid input (e.g., missing fields) |  \r\n| 500        | 09           | Exception occurred, contact developer |",
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "CompanyName": {
                    "type": "string"
                  },
                  "CompanyProfileImage": {
                    "type": "string",
                    "format": "binary"
                  },
                  "RegistrationNumber": {
                    "type": "string"
                  },
                  "TaxIdentificationNumber": {
                    "type": "string"
                  },
                  "Industry": {
                    "type": "string"
                  },
                  "ContactEmail": {
                    "type": "string"
                  },
                  "MemberId": {
                    "type": "string"
                  },
                  "ContactPhone": {
                    "type": "string"
                  },
                  "WebsiteUrl": {
                    "type": "string"
                  },
                  "Address": {
                    "type": "string"
                  },
                  "Country": {
                    "type": "string"
                  },
                  "State": {
                    "type": "string"
                  },
                  "City": {
                    "type": "string"
                  },
                  "NumberOfEmployees": {
                    "type": "integer",
                    "format": "int32"
                  },
                  "PensionContributionRate": {
                    "type": "number",
                    "format": "double"
                  },
                  "IsActive": {
                    "type": "boolean"
                  }
                }
              },
              "encoding": {
                "CompanyName": {
                  "style": "form"
                },
                "CompanyProfileImage": {
                  "style": "form"
                },
                "RegistrationNumber": {
                  "style": "form"
                },
                "TaxIdentificationNumber": {
                  "style": "form"
                },
                "Industry": {
                  "style": "form"
                },
                "ContactEmail": {
                  "style": "form"
                },
                "MemberId": {
                  "style": "form"
                },
                "ContactPhone": {
                  "style": "form"
                },
                "WebsiteUrl": {
                  "style": "form"
                },
                "Address": {
                  "style": "form"
                },
                "Country": {
                  "style": "form"
                },
                "State": {
                  "style": "form"
                },
                "City": {
                  "style": "form"
                },
                "NumberOfEmployees": {
                  "style": "form"
                },
                "PensionContributionRate": {
                  "style": "form"
                },
                "IsActive": {
                  "style": "form"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/StringSuccessDataResult"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StringSuccessDataResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/StringSuccessDataResult"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/StringErrorDataResult"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StringErrorDataResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/StringErrorDataResult"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/StringErrorDataResult"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StringErrorDataResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/StringErrorDataResult"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Content",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/StringErrorDataResult"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StringErrorDataResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/StringErrorDataResult"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/StringErrorDataResult"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StringErrorDataResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/StringErrorDataResult"
                }
              }
            }
          },
          "404": {
            "description": "Not Found"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        }
      },
      "get": {
        "tags": [
          "Employer"
        ],
        "summary": "Retrieves all employers.",
        "description": "**Endpoint:** `GET /api/employers`  \r\n \r\nFetches details of all employers with pagination.\r\n \r\n**Response Codes:**  \r\n| Status Code | Response Code | Description |  \r\n|------------|--------------|-------------|  \r\n| 200        | 00           | Employers retrieved successfully | \r\n| 200        | 31           | No employers found |  \r\n| 422        | 14           | Invalid input (e.g., missing fields) |  \r\n| 500        | 09           | Exception occurred, contact developer |",
        "parameters": [
          {
            "name": "pageIndex",
            "in": "query",
            "description": "The page index (starting from 1).",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "description": "The number of records per page.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/EmployerDTOPaginatedListSuccessDataResult"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EmployerDTOPaginatedListSuccessDataResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/EmployerDTOPaginatedListSuccessDataResult"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/StringErrorDataResult"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StringErrorDataResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/StringErrorDataResult"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/StringErrorDataResult"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StringErrorDataResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/StringErrorDataResult"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Content",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/StringErrorDataResult"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StringErrorDataResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/StringErrorDataResult"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/StringErrorDataResult"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StringErrorDataResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/StringErrorDataResult"
                }
              }
            }
          },
          "404": {
            "description": "Not Found"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        }
      }
    },
    "/api/employers/{employerId}": {
      "put": {
        "tags": [
          "Employer"
        ],
        "summary": "Updates an employer's records.",
        "description": "**Endpoint:** `PUT /api/employers/{employerId}`  \r\n \r\nUpdates the details of an existing employer.\r\n \r\n**Validation Requirements:**  \r\n- Company name is required (minimum 2 characters)  \r\n- Registration number is required and must be valid  \r\n- Active status must be specified  \r\n \r\n**Response Codes:**  \r\n| Status Code | Response Code | Description |  \r\n|------------|--------------|-------------|  \r\n| 200        | 00           | Employer updated successfully |  \r\n| 200        | 15           | Employer role assignment failed |  \r\n| 200        | 31           | Employer not found |  \r\n| 422        | 14           | Invalid input (e.g., missing fields) |  \r\n| 409        | 16           | Employer already exists |  \r\n| 500        | 09           | Exception occurred, contact developer |",
        "parameters": [
          {
            "name": "employerId",
            "in": "path",
            "description": "Existing employer unique Id.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "CompanyName": {
                    "type": "string"
                  },
                  "CompanyProfileImage": {
                    "type": "string",
                    "format": "binary"
                  },
                  "RegistrationNumber": {
                    "type": "string"
                  },
                  "TaxIdentificationNumber": {
                    "type": "string"
                  },
                  "Industry": {
                    "type": "string"
                  },
                  "ContactEmail": {
                    "type": "string"
                  },
                  "ContactPhone": {
                    "type": "string"
                  },
                  "WebsiteUrl": {
                    "type": "string"
                  },
                  "Address": {
                    "type": "string"
                  },
                  "Country": {
                    "type": "string"
                  },
                  "State": {
                    "type": "string"
                  },
                  "City": {
                    "type": "string"
                  },
                  "NumberOfEmployees": {
                    "type": "integer",
                    "format": "int32"
                  },
                  "PensionContributionRate": {
                    "type": "number",
                    "format": "double"
                  }
                }
              },
              "encoding": {
                "CompanyName": {
                  "style": "form"
                },
                "CompanyProfileImage": {
                  "style": "form"
                },
                "RegistrationNumber": {
                  "style": "form"
                },
                "TaxIdentificationNumber": {
                  "style": "form"
                },
                "Industry": {
                  "style": "form"
                },
                "ContactEmail": {
                  "style": "form"
                },
                "ContactPhone": {
                  "style": "form"
                },
                "WebsiteUrl": {
                  "style": "form"
                },
                "Address": {
                  "style": "form"
                },
                "Country": {
                  "style": "form"
                },
                "State": {
                  "style": "form"
                },
                "City": {
                  "style": "form"
                },
                "NumberOfEmployees": {
                  "style": "form"
                },
                "PensionContributionRate": {
                  "style": "form"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/StringSuccessDataResult"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StringSuccessDataResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/StringSuccessDataResult"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/StringErrorDataResult"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StringErrorDataResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/StringErrorDataResult"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/StringErrorDataResult"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StringErrorDataResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/StringErrorDataResult"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Content",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/StringErrorDataResult"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StringErrorDataResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/StringErrorDataResult"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/StringErrorDataResult"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StringErrorDataResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/StringErrorDataResult"
                }
              }
            }
          },
          "404": {
            "description": "Not Found"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        }
      },
      "get": {
        "tags": [
          "Employer"
        ],
        "summary": "Retrieves details for a specific employer.",
        "description": "**Endpoint:** `GET /api/employers/{employerId}`  \r\n \r\nFetches details of a specific employer by ID.\r\n \r\n**Response Codes:**  \r\n| Status Code | Response Code | Description |  \r\n|------------|--------------|-------------|  \r\n| 200        | 00           | Employer retrieved successfully | \r\n| 200        | 31           | Employer not found |  \r\n| 422        | 14           | Invalid input (e.g., missing fields) |  \r\n| 500        | 09           | Exception occurred, contact developer |",
        "parameters": [
          {
            "name": "employerId",
            "in": "path",
            "description": "Existing employer unique Id.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/EmployerDTOSuccessDataResult"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EmployerDTOSuccessDataResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/EmployerDTOSuccessDataResult"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/StringErrorDataResult"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StringErrorDataResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/StringErrorDataResult"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/StringErrorDataResult"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StringErrorDataResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/StringErrorDataResult"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Content",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/StringErrorDataResult"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StringErrorDataResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/StringErrorDataResult"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/StringErrorDataResult"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StringErrorDataResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/StringErrorDataResult"
                }
              }
            }
          },
          "404": {
            "description": "Not Found"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        }
      },
      "delete": {
        "tags": [
          "Employer"
        ],
        "summary": "Soft-deletes an employer.",
        "description": "**Endpoint:** `DELETE /api/employers/{employerId}`  \r\n \r\nMarks an employer as deleted (soft delete) in the system.\r\n \r\n**Response Codes:**  \r\n| Status Code | Response Code | Description |  \r\n|------------|--------------|-------------|  \r\n| 200        | 00           | Employer deleted successfully |  \r\n| 200        | 31           | Employer not found |  \r\n| 422        | 14           | Invalid input (e.g., missing fields) |  \r\n| 500        | 09           | Exception occurred, contact developer |",
        "parameters": [
          {
            "name": "employerId",
            "in": "path",
            "description": "Existing employer unique Id.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/StringSuccessDataResult"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StringSuccessDataResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/StringSuccessDataResult"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/StringErrorDataResult"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StringErrorDataResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/StringErrorDataResult"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/StringErrorDataResult"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StringErrorDataResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/StringErrorDataResult"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Content",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/StringErrorDataResult"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StringErrorDataResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/StringErrorDataResult"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/StringErrorDataResult"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StringErrorDataResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/StringErrorDataResult"
                }
              }
            }
          },
          "404": {
            "description": "Not Found"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        }
      }
    },
    "/api/employers/by-status": {
      "get": {
        "tags": [
          "Employer"
        ],
        "summary": "Retrieves employers by active status.",
        "description": "**Endpoint:** `GET /api/employers/by-status`  \r\n \r\nFetches details of employers filtered by active status.\r\n \r\n**Response Codes:**  \r\n| Status Code | Response Code | Description |  \r\n|------------|--------------|-------------|  \r\n| 200        | 00           | Employers retrieved successfully | \r\n| 200        | 31           | No employers found |  \r\n| 422        | 14           | Invalid input (e.g., missing fields) |  \r\n| 500        | 09           | Exception occurred, contact developer |",
        "parameters": [
          {
            "name": "isActive",
            "in": "query",
            "description": "Filter by active status (true/false)",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "pageIndex",
            "in": "query",
            "description": "The page index (starting from 1).",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "description": "The number of records per page.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/EmployerDTOPaginatedListSuccessDataResult"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EmployerDTOPaginatedListSuccessDataResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/EmployerDTOPaginatedListSuccessDataResult"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/StringErrorDataResult"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StringErrorDataResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/StringErrorDataResult"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/StringErrorDataResult"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StringErrorDataResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/StringErrorDataResult"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Content",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/StringErrorDataResult"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StringErrorDataResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/StringErrorDataResult"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/StringErrorDataResult"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StringErrorDataResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/StringErrorDataResult"
                }
              }
            }
          },
          "404": {
            "description": "Not Found"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        }
      }
    },
    "/api/member/register": {
      "post": {
        "tags": [
          "Member"
        ],
        "summary": "Registers a new member.",
        "description": "**Endpoint:** `POST /api/members/register`  \r\n \r\nRegisters a new member in the system.\r\n \r\n**Response Codes:**  \r\n| Status Code | Response Code | Description |  \r\n|------------|--------------|-------------|  \r\n| 200        | 00           | Member registered successfully |  \r\n| 200        | 15           | Member role assignment failed |  \r\n| 200        | 16           | Member creation failed |  \r\n| 422        | 14           | Invalid input (e.g., missing fields) |  \r\n| 409        | 16           | Member already exists |  \r\n| 500        | 09           | Exception occurred, contact developer |",
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "FirstName": {
                    "type": "string"
                  },
                  "LastName": {
                    "type": "string"
                  },
                  "NickName": {
                    "type": "string"
                  },
                  "ProfilePicture": {
                    "type": "string",
                    "format": "binary"
                  },
                  "DateOfBirth": {
                    "type": "string",
                    "format": "date-time"
                  },
                  "NationalIdentificationNumber": {
                    "type": "string"
                  },
                  "Address": {
                    "type": "string"
                  },
                  "PhoneNumber": {
                    "type": "string"
                  },
                  "Email": {
                    "type": "string"
                  },
                  "BankAccountNumber": {
                    "type": "string"
                  },
                  "BankName": {
                    "type": "string"
                  },
                  "Password": {
                    "type": "string"
                  },
                  "EmployerId": {
                    "type": "string"
                  },
                  "MembershipType": {
                    "$ref": "#/components/schemas/MembershipType"
                  }
                }
              },
              "encoding": {
                "FirstName": {
                  "style": "form"
                },
                "LastName": {
                  "style": "form"
                },
                "NickName": {
                  "style": "form"
                },
                "ProfilePicture": {
                  "style": "form"
                },
                "DateOfBirth": {
                  "style": "form"
                },
                "NationalIdentificationNumber": {
                  "style": "form"
                },
                "Address": {
                  "style": "form"
                },
                "PhoneNumber": {
                  "style": "form"
                },
                "Email": {
                  "style": "form"
                },
                "BankAccountNumber": {
                  "style": "form"
                },
                "BankName": {
                  "style": "form"
                },
                "Password": {
                  "style": "form"
                },
                "EmployerId": {
                  "style": "form"
                },
                "MembershipType": {
                  "style": "form"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/StringSuccessDataResult"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StringSuccessDataResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/StringSuccessDataResult"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/StringErrorDataResult"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StringErrorDataResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/StringErrorDataResult"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/StringErrorDataResult"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StringErrorDataResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/StringErrorDataResult"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Content",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/StringErrorDataResult"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StringErrorDataResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/StringErrorDataResult"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/StringErrorDataResult"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StringErrorDataResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/StringErrorDataResult"
                }
              }
            }
          },
          "404": {
            "description": "Not Found"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        }
      }
    },
    "/api/member/update": {
      "put": {
        "tags": [
          "Member"
        ],
        "summary": "Updates a member records.",
        "description": "**Endpoint:** `PUT /api/members/update`  \r\n \r\nUpdates the details of an existing member.\r\n \r\n**Response Codes:**  \r\n| Status Code | Response Code | Description |  \r\n|------------|--------------|-------------|  \r\n| 200        | 00           | Member updated successfully |  \r\n| 200        | 15           | Member role assignment failed |  \r\n| 200        | 19           | Member not found |  \r\n| 422        | 14           | Invalid input (e.g., missing fields) |  \r\n| 409        | 16           | Member already exists |  \r\n| 500        | 09           | Exception occurred, contact developer |",
        "parameters": [
          {
            "name": "memberId",
            "in": "query",
            "description": "Existing member unique Id.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "FirstName": {
                    "type": "string"
                  },
                  "LastName": {
                    "type": "string"
                  },
                  "NickName": {
                    "type": "string"
                  },
                  "ProfilePicture": {
                    "type": "string",
                    "format": "binary"
                  },
                  "DateOfBirth": {
                    "type": "string",
                    "format": "date-time"
                  },
                  "NationalIdentificationNumber": {
                    "type": "string"
                  },
                  "Address": {
                    "type": "string"
                  },
                  "PhoneNumber": {
                    "type": "string"
                  },
                  "Email": {
                    "type": "string"
                  },
                  "BankAccountNumber": {
                    "type": "string"
                  },
                  "BankName": {
                    "type": "string"
                  },
                  "Password": {
                    "type": "string"
                  },
                  "EmployerId": {
                    "type": "string"
                  },
                  "MembershipType": {
                    "$ref": "#/components/schemas/MembershipType"
                  }
                }
              },
              "encoding": {
                "FirstName": {
                  "style": "form"
                },
                "LastName": {
                  "style": "form"
                },
                "NickName": {
                  "style": "form"
                },
                "ProfilePicture": {
                  "style": "form"
                },
                "DateOfBirth": {
                  "style": "form"
                },
                "NationalIdentificationNumber": {
                  "style": "form"
                },
                "Address": {
                  "style": "form"
                },
                "PhoneNumber": {
                  "style": "form"
                },
                "Email": {
                  "style": "form"
                },
                "BankAccountNumber": {
                  "style": "form"
                },
                "BankName": {
                  "style": "form"
                },
                "Password": {
                  "style": "form"
                },
                "EmployerId": {
                  "style": "form"
                },
                "MembershipType": {
                  "style": "form"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/StringSuccessDataResult"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StringSuccessDataResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/StringSuccessDataResult"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/StringErrorDataResult"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StringErrorDataResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/StringErrorDataResult"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/StringErrorDataResult"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StringErrorDataResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/StringErrorDataResult"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Content",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/StringErrorDataResult"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StringErrorDataResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/StringErrorDataResult"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/StringErrorDataResult"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StringErrorDataResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/StringErrorDataResult"
                }
              }
            }
          },
          "404": {
            "description": "Not Found"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        }
      }
    },
    "/api/member": {
      "get": {
        "tags": [
          "Member"
        ],
        "summary": "Retrieves details for a specific member.",
        "description": "**Endpoint:** `GET /api/members/memberId`  \r\n \r\nFetches details of a specific member by ID.\r\n \r\n**Response Codes:**  \r\n| Status Code | Response Code | Description |  \r\n|------------|--------------|-------------|  \r\n| 200        | 00           | Member retrieved successfully | \r\n| 200        | 19           | Member not found |  \r\n| 422        | 14           | Invalid input (e.g., missing fields) |  \r\n| 500        | 09           | Exception occurred, contact developer |",
        "parameters": [
          {
            "name": "memberId",
            "in": "query",
            "description": "Existing member unique Id.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/MemberDTOSuccessDataResult"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MemberDTOSuccessDataResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/MemberDTOSuccessDataResult"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/StringErrorDataResult"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StringErrorDataResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/StringErrorDataResult"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/StringErrorDataResult"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StringErrorDataResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/StringErrorDataResult"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Content",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/StringErrorDataResult"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StringErrorDataResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/StringErrorDataResult"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/StringErrorDataResult"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StringErrorDataResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/StringErrorDataResult"
                }
              }
            }
          },
          "404": {
            "description": "Not Found"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        }
      },
      "delete": {
        "tags": [
          "Member"
        ],
        "summary": "Deletes a member records.",
        "description": "**Endpoint:** `DELETE /api/members/delete`  \r\n \r\nRemoves an existing member from the platform.\r\n \r\n**Response Codes:**  \r\n| Status Code | Response Code | Description |  \r\n|------------|--------------|-------------|  \r\n| 200        | 00           | Member updated successfully |  \r\n| 200        | 15           | Member role assignment failed |  \r\n| 200        | 19           | Member not found |  \r\n| 422        | 14           | Invalid input (e.g., missing fields) |  \r\n| 409        | 16           | Member already exists |  \r\n| 500        | 09           | Exception occurred, contact developer |",
        "parameters": [
          {
            "name": "memberId",
            "in": "query",
            "description": "Existing member unique Id.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/StringSuccessDataResult"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StringSuccessDataResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/StringSuccessDataResult"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/StringErrorDataResult"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StringErrorDataResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/StringErrorDataResult"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/StringErrorDataResult"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StringErrorDataResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/StringErrorDataResult"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Content",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/StringErrorDataResult"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StringErrorDataResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/StringErrorDataResult"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/StringErrorDataResult"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StringErrorDataResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/StringErrorDataResult"
                }
              }
            }
          },
          "404": {
            "description": "Not Found"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        }
      }
    },
    "/api/member/all": {
      "get": {
        "tags": [
          "Member"
        ],
        "summary": "Retrieves all members.",
        "description": "**Endpoint:** `GET /api/members/memberId`  \r\n \r\nFetches details of all members with pagination.\r\n \r\n**Response Codes:**  \r\n| Status Code | Response Code | Description |  \r\n|------------|--------------|-------------|  \r\n| 200        | 00           | Members retrieved successfully | \r\n| 200        | 19           | Member not found |  \r\n| 422        | 14           | Invalid input (e.g., missing fields) |  \r\n| 500        | 09           | Exception occurred, contact developer |",
        "parameters": [
          {
            "name": "pageIndex",
            "in": "query",
            "description": "The page index (starting from 1).",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "description": "The number of records per page.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/MemberDTOPaginatedListSuccessDataResult"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MemberDTOPaginatedListSuccessDataResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/MemberDTOPaginatedListSuccessDataResult"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/StringErrorDataResult"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StringErrorDataResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/StringErrorDataResult"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/StringErrorDataResult"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StringErrorDataResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/StringErrorDataResult"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Content",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/StringErrorDataResult"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StringErrorDataResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/StringErrorDataResult"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/StringErrorDataResult"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StringErrorDataResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/StringErrorDataResult"
                }
              }
            }
          },
          "404": {
            "description": "Not Found"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        }
      }
    },
    "/api/member/by-type": {
      "get": {
        "tags": [
          "Member"
        ],
        "summary": "Retrieves members by membership type.",
        "description": "**Endpoint:** `GET /api/members`  \r\n \r\nFetches details of specific member types.\r\n \r\n**Response Codes:**  \r\n| Status Code | Response Code | Description |  \r\n|------------|--------------|-------------|  \r\n| 200        | 00           | Members retrieved successfully | \r\n| 200        | 19           | Member not found |  \r\n| 422        | 14           | Invalid input (e.g., missing fields) |  \r\n| 500        | 09           | Exception occurred, contact developer |",
        "parameters": [
          {
            "name": "memberType",
            "in": "query",
            "description": "The membership type. Value is 1 for Empoyer, 2 for Employee and 3 for Individual",
            "schema": {
              "$ref": "#/components/schemas/MembershipType"
            }
          },
          {
            "name": "pageIndex",
            "in": "query",
            "description": "The page index (starting from 1).",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "description": "The number of records per page.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/MemberDTOPaginatedListSuccessDataResult"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MemberDTOPaginatedListSuccessDataResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/MemberDTOPaginatedListSuccessDataResult"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/StringErrorDataResult"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StringErrorDataResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/StringErrorDataResult"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/StringErrorDataResult"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StringErrorDataResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/StringErrorDataResult"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Content",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/StringErrorDataResult"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StringErrorDataResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/StringErrorDataResult"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/StringErrorDataResult"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StringErrorDataResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/StringErrorDataResult"
                }
              }
            }
          },
          "404": {
            "description": "Not Found"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "Account": {
        "type": "object",
        "properties": {
          "status": {
            "$ref": "#/components/schemas/Status"
          },
          "createdDate": {
            "type": "string",
            "format": "date-time"
          },
          "modifiedDate": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "deletedDate": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "accountId": {
            "type": "string",
            "nullable": true
          },
          "memberId": {
            "type": "string",
            "nullable": true
          },
          "employerId": {
            "type": "string",
            "nullable": true
          },
          "pensionAccountNumber": {
            "type": "string",
            "nullable": true
          },
          "accountType": {
            "$ref": "#/components/schemas/AccountType"
          },
          "totalContributions": {
            "type": "number",
            "format": "double"
          },
          "currentBalance": {
            "type": "number",
            "format": "double"
          },
          "isRestricted": {
            "type": "boolean"
          },
          "isClosed": {
            "type": "boolean"
          },
          "member": {
            "$ref": "#/components/schemas/Member"
          },
          "employer": {
            "$ref": "#/components/schemas/Employer"
          }
        },
        "additionalProperties": false
      },
      "AccountDTO": {
        "type": "object",
        "properties": {
          "pensionAccountId": {
            "type": "string",
            "nullable": true
          },
          "memberId": {
            "type": "string",
            "nullable": true
          },
          "employerId": {
            "type": "string",
            "nullable": true
          },
          "pensionAccountNumber": {
            "type": "string",
            "nullable": true
          },
          "accountType": {
            "$ref": "#/components/schemas/AccountType"
          },
          "balance": {
            "type": "number",
            "format": "double"
          },
          "isRestricted": {
            "type": "boolean"
          },
          "isClosed": {
            "type": "boolean"
          }
        },
        "additionalProperties": false
      },
      "AccountDTOListSuccessDataResult": {
        "type": "object",
        "properties": {
          "responseCode": {
            "type": "string",
            "nullable": true
          },
          "responseDescription": {
            "type": "string",
            "nullable": true
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AccountDTO"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "AccountDTOSuccessDataResult": {
        "type": "object",
        "properties": {
          "responseCode": {
            "type": "string",
            "nullable": true
          },
          "responseDescription": {
            "type": "string",
            "nullable": true
          },
          "data": {
            "$ref": "#/components/schemas/AccountDTO"
          }
        },
        "additionalProperties": false
      },
      "AccountType": {
        "enum": [
          1,
          2
        ],
        "type": "integer",
        "format": "int32"
      },
      "BenefitType": {
        "enum": [
          1,
          2,
          3
        ],
        "type": "integer",
        "format": "int32"
      },
      "ContributionDTO": {
        "type": "object",
        "properties": {
          "contributionId": {
            "type": "string",
            "nullable": true
          },
          "memberId": {
            "type": "string",
            "nullable": true
          },
          "memberName": {
            "type": "string",
            "nullable": true
          },
          "memberProfilePicture": {
            "type": "string",
            "nullable": true
          },
          "pensionAccountNumber": {
            "type": "string",
            "nullable": true
          },
          "amount": {
            "type": "number",
            "format": "double"
          },
          "contributionType": {
            "$ref": "#/components/schemas/ContributionType"
          },
          "contributionDate": {
            "type": "string",
            "format": "date-time"
          },
          "isValidated": {
            "type": "boolean"
          }
        },
        "additionalProperties": false
      },
      "ContributionDTOListSuccessDataResult": {
        "type": "object",
        "properties": {
          "responseCode": {
            "type": "string",
            "nullable": true
          },
          "responseDescription": {
            "type": "string",
            "nullable": true
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ContributionDTO"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ContributionDTOSuccessDataResult": {
        "type": "object",
        "properties": {
          "responseCode": {
            "type": "string",
            "nullable": true
          },
          "responseDescription": {
            "type": "string",
            "nullable": true
          },
          "data": {
            "$ref": "#/components/schemas/ContributionDTO"
          }
        },
        "additionalProperties": false
      },
      "ContributionRequest": {
        "type": "object",
        "properties": {
          "memberId": {
            "type": "string",
            "nullable": true
          },
          "accountType": {
            "$ref": "#/components/schemas/AccountType"
          },
          "amount": {
            "type": "number",
            "format": "double"
          },
          "contributionType": {
            "$ref": "#/components/schemas/ContributionType"
          }
        },
        "additionalProperties": false
      },
      "ContributionType": {
        "enum": [
          1,
          2
        ],
        "type": "integer",
        "format": "int32"
      },
      "EligibilityResultDTO": {
        "type": "object",
        "properties": {
          "memberId": {
            "type": "string",
            "nullable": true
          },
          "benefitType": {
            "$ref": "#/components/schemas/BenefitType"
          },
          "isEligible": {
            "type": "boolean"
          },
          "evaluationDate": {
            "type": "string",
            "format": "date-time"
          },
          "eligibilityDate": {
            "type": "string",
            "format": "date-time"
          },
          "passedRequirements": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          },
          "failedRequirements": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          },
          "summary": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          }
        },
        "additionalProperties": false
      },
      "EligibilityResultDTOSuccessDataResult": {
        "type": "object",
        "properties": {
          "responseCode": {
            "type": "string",
            "nullable": true
          },
          "responseDescription": {
            "type": "string",
            "nullable": true
          },
          "data": {
            "$ref": "#/components/schemas/EligibilityResultDTO"
          }
        },
        "additionalProperties": false
      },
      "Employer": {
        "type": "object",
        "properties": {
          "status": {
            "$ref": "#/components/schemas/Status"
          },
          "createdDate": {
            "type": "string",
            "format": "date-time"
          },
          "modifiedDate": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "deletedDate": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "employerId": {
            "type": "string",
            "nullable": true
          },
          "companyName": {
            "type": "string",
            "nullable": true
          },
          "companyProfileImage": {
            "type": "string",
            "nullable": true
          },
          "registrationNumber": {
            "type": "string",
            "nullable": true
          },
          "taxIdentificationNumber": {
            "type": "string",
            "nullable": true
          },
          "industry": {
            "type": "string",
            "nullable": true
          },
          "contactEmail": {
            "type": "string",
            "nullable": true
          },
          "contactPhone": {
            "type": "string",
            "nullable": true
          },
          "websiteUrl": {
            "type": "string",
            "nullable": true
          },
          "address": {
            "type": "string",
            "nullable": true
          },
          "country": {
            "type": "string",
            "nullable": true
          },
          "state": {
            "type": "string",
            "nullable": true
          },
          "city": {
            "type": "string",
            "nullable": true
          },
          "bankAccountNumber": {
            "type": "string",
            "nullable": true
          },
          "bankName": {
            "type": "string",
            "nullable": true
          },
          "numberOfEmployees": {
            "type": "integer",
            "format": "int32"
          },
          "pensionContributionRate": {
            "type": "number",
            "format": "double"
          },
          "isActive": {
            "type": "boolean"
          },
          "employees": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Member"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "EmployerDTO": {
        "type": "object",
        "properties": {
          "employerId": {
            "type": "string",
            "nullable": true
          },
          "companyName": {
            "type": "string",
            "nullable": true
          },
          "companyProfileImage": {
            "type": "string",
            "nullable": true
          },
          "registrationNumber": {
            "type": "string",
            "nullable": true
          },
          "taxIdentificationNumber": {
            "type": "string",
            "nullable": true
          },
          "industry": {
            "type": "string",
            "nullable": true
          },
          "contactEmail": {
            "type": "string",
            "nullable": true
          },
          "contactPhone": {
            "type": "string",
            "nullable": true
          },
          "websiteUrl": {
            "type": "string",
            "nullable": true
          },
          "address": {
            "type": "string",
            "nullable": true
          },
          "country": {
            "type": "string",
            "nullable": true
          },
          "state": {
            "type": "string",
            "nullable": true
          },
          "city": {
            "type": "string",
            "nullable": true
          },
          "bankAccountNumber": {
            "type": "string",
            "nullable": true
          },
          "bankName": {
            "type": "string",
            "nullable": true
          },
          "numberOfEmployees": {
            "type": "integer",
            "format": "int32"
          },
          "pensionContributionRate": {
            "type": "number",
            "format": "double"
          }
        },
        "additionalProperties": false
      },
      "EmployerDTOPaginatedList": {
        "type": "object",
        "properties": {
          "pageIndex": {
            "type": "integer",
            "format": "int32"
          },
          "totalPages": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "totalCount": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "_items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EmployerDTO"
            },
            "nullable": true
          },
          "hasPreviousPage": {
            "type": "boolean",
            "readOnly": true
          },
          "hasNextPage": {
            "type": "boolean",
            "readOnly": true
          }
        },
        "additionalProperties": false
      },
      "EmployerDTOPaginatedListSuccessDataResult": {
        "type": "object",
        "properties": {
          "responseCode": {
            "type": "string",
            "nullable": true
          },
          "responseDescription": {
            "type": "string",
            "nullable": true
          },
          "data": {
            "$ref": "#/components/schemas/EmployerDTOPaginatedList"
          }
        },
        "additionalProperties": false
      },
      "EmployerDTOSuccessDataResult": {
        "type": "object",
        "properties": {
          "responseCode": {
            "type": "string",
            "nullable": true
          },
          "responseDescription": {
            "type": "string",
            "nullable": true
          },
          "data": {
            "$ref": "#/components/schemas/EmployerDTO"
          }
        },
        "additionalProperties": false
      },
      "Member": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "nullable": true
          },
          "userName": {
            "type": "string",
            "nullable": true
          },
          "normalizedUserName": {
            "type": "string",
            "nullable": true
          },
          "email": {
            "type": "string",
            "nullable": true
          },
          "normalizedEmail": {
            "type": "string",
            "nullable": true
          },
          "emailConfirmed": {
            "type": "boolean"
          },
          "passwordHash": {
            "type": "string",
            "nullable": true
          },
          "securityStamp": {
            "type": "string",
            "nullable": true
          },
          "concurrencyStamp": {
            "type": "string",
            "nullable": true
          },
          "phoneNumber": {
            "type": "string",
            "nullable": true
          },
          "phoneNumberConfirmed": {
            "type": "boolean"
          },
          "twoFactorEnabled": {
            "type": "boolean"
          },
          "lockoutEnd": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "lockoutEnabled": {
            "type": "boolean"
          },
          "accessFailedCount": {
            "type": "integer",
            "format": "int32"
          },
          "firstName": {
            "type": "string",
            "nullable": true
          },
          "lastName": {
            "type": "string",
            "nullable": true
          },
          "nickName": {
            "type": "string",
            "nullable": true
          },
          "profilePicture": {
            "type": "string",
            "nullable": true
          },
          "dateOfBirth": {
            "type": "string",
            "format": "date-time"
          },
          "nationalIdentificationNumber": {
            "type": "string",
            "nullable": true
          },
          "address": {
            "type": "string",
            "nullable": true
          },
          "bankAccountNumber": {
            "type": "string",
            "nullable": true
          },
          "bankName": {
            "type": "string",
            "nullable": true
          },
          "refreshToken": {
            "type": "string",
            "nullable": true
          },
          "refreshTokenEndDate": {
            "type": "string",
            "format": "date-time"
          },
          "employerId": {
            "type": "string",
            "nullable": true
          },
          "employer": {
            "$ref": "#/components/schemas/Employer"
          },
          "isActive": {
            "type": "boolean"
          },
          "status": {
            "$ref": "#/components/schemas/Status"
          },
          "createdDate": {
            "type": "string",
            "format": "date-time"
          },
          "modifiedDate": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "deletedDate": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "membershipType": {
            "$ref": "#/components/schemas/MembershipType"
          },
          "isEligibleForBenefits": {
            "type": "boolean"
          },
          "accounts": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Account"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "MemberDTO": {
        "type": "object",
        "properties": {
          "memberId": {
            "type": "string",
            "nullable": true
          },
          "firstName": {
            "type": "string",
            "nullable": true
          },
          "lastName": {
            "type": "string",
            "nullable": true
          },
          "profilePicture": {
            "type": "string",
            "nullable": true
          },
          "role": {
            "type": "string",
            "nullable": true
          },
          "dateOfBirth": {
            "type": "string",
            "format": "date-time"
          },
          "nationalIdentificationNumber": {
            "type": "string",
            "nullable": true
          },
          "address": {
            "type": "string",
            "nullable": true
          },
          "bankAccountNumber": {
            "type": "string",
            "nullable": true
          },
          "bankName": {
            "type": "string",
            "nullable": true
          },
          "employerId": {
            "type": "string",
            "nullable": true
          },
          "employer": {
            "$ref": "#/components/schemas/Employer"
          },
          "isActive": {
            "type": "boolean"
          },
          "createdDate": {
            "type": "string",
            "format": "date-time"
          },
          "modifiedDate": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "deletedDate": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "membershipType": {
            "$ref": "#/components/schemas/MembershipType"
          },
          "totalContributions": {
            "type": "number",
            "format": "double"
          },
          "isEligibleForBenefits": {
            "type": "boolean"
          },
          "accounts": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Account"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "MemberDTOPaginatedList": {
        "type": "object",
        "properties": {
          "pageIndex": {
            "type": "integer",
            "format": "int32"
          },
          "totalPages": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "totalCount": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "_items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MemberDTO"
            },
            "nullable": true
          },
          "hasPreviousPage": {
            "type": "boolean",
            "readOnly": true
          },
          "hasNextPage": {
            "type": "boolean",
            "readOnly": true
          }
        },
        "additionalProperties": false
      },
      "MemberDTOPaginatedListSuccessDataResult": {
        "type": "object",
        "properties": {
          "responseCode": {
            "type": "string",
            "nullable": true
          },
          "responseDescription": {
            "type": "string",
            "nullable": true
          },
          "data": {
            "$ref": "#/components/schemas/MemberDTOPaginatedList"
          }
        },
        "additionalProperties": false
      },
      "MemberDTOSuccessDataResult": {
        "type": "object",
        "properties": {
          "responseCode": {
            "type": "string",
            "nullable": true
          },
          "responseDescription": {
            "type": "string",
            "nullable": true
          },
          "data": {
            "$ref": "#/components/schemas/MemberDTO"
          }
        },
        "additionalProperties": false
      },
      "MembershipType": {
        "enum": [
          1,
          2,
          3
        ],
        "type": "integer",
        "format": "int32"
      },
      "NewAccountRequest": {
        "type": "object",
        "properties": {
          "memberId": {
            "type": "string",
            "nullable": true
          },
          "accountType": {
            "$ref": "#/components/schemas/AccountType"
          }
        },
        "additionalProperties": false
      },
      "StatementFormat": {
        "enum": [
          1,
          2
        ],
        "type": "integer",
        "format": "int32"
      },
      "Status": {
        "enum": [
          1,
          2,
          3
        ],
        "type": "integer",
        "format": "int32"
      },
      "StringErrorDataResult": {
        "type": "object",
        "properties": {
          "responseCode": {
            "type": "string",
            "nullable": true
          },
          "responseDescription": {
            "type": "string",
            "nullable": true
          },
          "data": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "StringSuccessDataResult": {
        "type": "object",
        "properties": {
          "responseCode": {
            "type": "string",
            "nullable": true
          },
          "responseDescription": {
            "type": "string",
            "nullable": true
          },
          "data": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "WithdrawalRequest": {
        "required": [
          "accountType",
          "amount",
          "memberId"
        ],
        "type": "object",
        "properties": {
          "memberId": {
            "minLength": 1,
            "type": "string"
          },
          "amount": {
            "minimum": 0.01,
            "type": "number",
            "format": "double"
          },
          "accountType": {
            "$ref": "#/components/schemas/AccountType"
          },
          "notes": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "WithdrawalResult": {
        "type": "object",
        "properties": {
          "transactionId": {
            "type": "string",
            "nullable": true
          },
          "memberId": {
            "type": "string",
            "nullable": true
          },
          "amount": {
            "type": "number",
            "format": "double"
          },
          "newBalance": {
            "type": "number",
            "format": "double"
          },
          "processedDate": {
            "type": "string",
            "format": "date-time"
          }
        },
        "additionalProperties": false
      },
      "WithdrawalResultSuccessDataResult": {
        "type": "object",
        "properties": {
          "responseCode": {
            "type": "string",
            "nullable": true
          },
          "responseDescription": {
            "type": "string",
            "nullable": true
          },
          "data": {
            "$ref": "#/components/schemas/WithdrawalResult"
          }
        },
        "additionalProperties": false
      }
    },
    "securitySchemes": {
      "Bearer": {
        "type": "apiKey",
        "description": "JWT Authorization header using the Bearer scheme (Example: 'Bearer 12345abcdef')",
        "name": "Authorization",
        "in": "header"
      }
    }
  },
  "security": [
    {
      "Bearer": [ ]
    }
  ]
}' (Nullable = false) (Size = -1), @p12='{"Content-Type":["application/json;charset=utf-8"],"Date":["Fri, 28 Mar 2025 22:56:26 GMT"],"Server":["Kestrel"]}' (Nullable = false) (Size = 4000), @p13='2025-03-28T22:56:26.5589494Z', @p14='200', @p15='2025-03-28T22:56:26.5666741Z'], CommandType='"Text"', CommandTimeout='30']
SET IMPLICIT_TRANSACTIONS OFF;
SET NOCOUNT ON;
INSERT INTO [RequestResponseLogs] ([RequestResponseLogId], [ClientIp], [ExecutionTime], [HttpMethod], [MemberAgent], [MemberId], [QueryString], [RequestBody], [RequestHeaders], [RequestInitiatedAt], [RequestPath], [ResponseBody], [ResponseHeaders], [ResponseReceivedAt], [StatusCode], [Timestamp])
VALUES (@p0, @p1, @p2, @p3, @p4, @p5, @p6, @p7, @p8, @p9, @p10, @p11, @p12, @p13, @p14, @p15);
2025-03-28 15:56:26.698 -07:00 [INF] Request finished HTTP/2 GET https://localhost:7055/swagger/v1/swagger.json - 200 null application/json;charset=utf-8 361.3183ms
